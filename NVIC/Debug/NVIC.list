
NVIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000578  08000578  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000578  08000578  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000578  08000578  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000578  08000578  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000578  08000578  00010578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800057c  0800057c  0001057c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000580  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000028  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001a3d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000582  00000000  00000000  00021ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001f0  00000000  00000000  00022038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000015e  00000000  00000000  00022228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e6ac  00000000  00000000  00022386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002220  00000000  00000000  00040a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bba41  00000000  00000000  00042c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000005fc  00000000  00000000  000fe694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000fec90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000560 	.word	0x08000560

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000560 	.word	0x08000560

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	; (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <main>:
void delay(uint32_t time);

int flag = 0;
int count = 0;

int main(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	SysClockConfig();
 800025c:	f000 f876 	bl	800034c <SysClockConfig>
	PA0_CFG();
 8000260:	f000 f830 	bl	80002c4 <PA0_CFG>

	while(1){
		if(flag){
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <main+0x2c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0fb      	beq.n	8000264 <main+0xc>
			delay(100000);
 800026c:	4806      	ldr	r0, [pc, #24]	; (8000288 <main+0x30>)
 800026e:	f000 f8c7 	bl	8000400 <delay>
			count++;
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <main+0x34>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	3301      	adds	r3, #1
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <main+0x34>)
 800027a:	6013      	str	r3, [r2, #0]
			flag=0;
 800027c:	4b01      	ldr	r3, [pc, #4]	; (8000284 <main+0x2c>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
		if(flag){
 8000282:	e7ef      	b.n	8000264 <main+0xc>
 8000284:	20000020 	.word	0x20000020
 8000288:	000186a0 	.word	0x000186a0
 800028c:	20000024 	.word	0x20000024

08000290 <EXTI0_IRQHandler>:

	return 0;
}


void EXTI0_IRQHandler(void){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	/*
		-> CHECK THE PIN, WHICH TRIGGERED THE INTERRUPT
		-> CLEAR THE INTERRUPT PENDING BIT
	*/

	if (EXTI->PR & (1<<0)){ // Checking if the interrupt was triggered by NVIC LINE 0
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <EXTI0_IRQHandler+0x2c>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d008      	beq.n	80002b2 <EXTI0_IRQHandler+0x22>
		EXTI->PR &= (1<<0); //Cleaning the interrupt pending bit
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <EXTI0_IRQHandler+0x2c>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a05      	ldr	r2, [pc, #20]	; (80002bc <EXTI0_IRQHandler+0x2c>)
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	6153      	str	r3, [r2, #20]
		flag = 1;
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <EXTI0_IRQHandler+0x30>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	601a      	str	r2, [r3, #0]
	}


}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40013c00 	.word	0x40013c00
 80002c0:	20000020 	.word	0x20000020

080002c4 <PA0_CFG>:

void PA0_CFG(void){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0); //ENABLES GPIOA
 80002c8:	4b1c      	ldr	r3, [pc, #112]	; (800033c <PA0_CFG+0x78>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <PA0_CFG+0x78>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(3<<0); //PIN A0 AS INPUT
 80002d4:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <PA0_CFG+0x7c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a19      	ldr	r2, [pc, #100]	; (8000340 <PA0_CFG+0x7c>)
 80002da:	f023 0303 	bic.w	r3, r3, #3
 80002de:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= (1<<1);  //ENABLES PULLUPS
 80002e0:	4b17      	ldr	r3, [pc, #92]	; (8000340 <PA0_CFG+0x7c>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4a16      	ldr	r2, [pc, #88]	; (8000340 <PA0_CFG+0x7c>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	60d3      	str	r3, [r2, #12]

	RCC->APB2ENR |= (1<<14); //System configuration clock enabled
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <PA0_CFG+0x78>)
 80002ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002f0:	4a12      	ldr	r2, [pc, #72]	; (800033c <PA0_CFG+0x78>)
 80002f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002f6:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[0] &= ~(0x0F<<0);
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <PA0_CFG+0x80>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a11      	ldr	r2, [pc, #68]	; (8000344 <PA0_CFG+0x80>)
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	6093      	str	r3, [r2, #8]

	EXTI->FTSR |= (1<<0);  // FALLING EDGE TRIGGER ENABLED
 8000304:	4b10      	ldr	r3, [pc, #64]	; (8000348 <PA0_CFG+0x84>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <PA0_CFG+0x84>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1<<0); // RISING EDGE TRIGGER DISABLED
 8000310:	4b0d      	ldr	r3, [pc, #52]	; (8000348 <PA0_CFG+0x84>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <PA0_CFG+0x84>)
 8000316:	f023 0301 	bic.w	r3, r3, #1
 800031a:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= (1<<0);   // DISABLES MASK ON EXTI1
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <PA0_CFG+0x84>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a09      	ldr	r2, [pc, #36]	; (8000348 <PA0_CFG+0x84>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(EXTI0_IRQn,1);
 8000328:	2101      	movs	r1, #1
 800032a:	2006      	movs	r0, #6
 800032c:	f7ff ff6a 	bl	8000204 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000330:	2006      	movs	r0, #6
 8000332:	f7ff ff49 	bl	80001c8 <__NVIC_EnableIRQ>


	//EXTI->PR = (1<<0);

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800
 8000340:	40020000 	.word	0x40020000
 8000344:	40013800 	.word	0x40013800
 8000348:	40013c00 	.word	0x40013c00

0800034c <SysClockConfig>:

void SysClockConfig(void){
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	RCC->CR |= (1 << 16); //HSE on
 8000350:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <SysClockConfig+0xa4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a26      	ldr	r2, [pc, #152]	; (80003f0 <SysClockConfig+0xa4>)
 8000356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800035a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<17)));//Wait for HSE clock ready flag
 800035c:	bf00      	nop
 800035e:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <SysClockConfig+0xa4>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <SysClockConfig+0x12>

	RCC->APB1ENR |= (1<<28);
 800036a:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <SysClockConfig+0xa4>)
 800036c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800036e:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <SysClockConfig+0xa4>)
 8000370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000374:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= (1<<14);
 8000376:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <SysClockConfig+0xa8>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SysClockConfig+0xa8>)
 800037c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000380:	6013      	str	r3, [r2, #0]

	FLASH->ACR = (1<<9) | (1<<10) | (1<<8) | 0X05;
 8000382:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <SysClockConfig+0xac>)
 8000384:	f240 7205 	movw	r2, #1797	; 0x705
 8000388:	601a      	str	r2, [r3, #0]

	//AHB PRESCALER
	RCC->CFGR |= 0X00;
 800038a:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <SysClockConfig+0xa4>)
 800038c:	4a18      	ldr	r2, [pc, #96]	; (80003f0 <SysClockConfig+0xa4>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	6093      	str	r3, [r2, #8]
	//APB1 PRESCALER
	RCC->CFGR |= 0x00001400U;
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <SysClockConfig+0xa4>)
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <SysClockConfig+0xa4>)
 8000398:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800039c:	6093      	str	r3, [r2, #8]
	//APB2 PRESCALER
	RCC->CFGR |= 0x00008000U;
 800039e:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <SysClockConfig+0xa4>)
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	4a13      	ldr	r2, [pc, #76]	; (80003f0 <SysClockConfig+0xa4>)
 80003a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003a8:	6093      	str	r3, [r2, #8]

	//CONFIGURE THE MAIN PLL
	RCC->PLLCFGR = (4 <<0) | (180 << 6) | (0 <<16) | (1<<22);
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <SysClockConfig+0xa4>)
 80003ac:	4a13      	ldr	r2, [pc, #76]	; (80003fc <SysClockConfig+0xb0>)
 80003ae:	605a      	str	r2, [r3, #4]

	//Enable the PLL and wait for it to become ready
	RCC->CR |= (1<<24);
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <SysClockConfig+0xa4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <SysClockConfig+0xa4>)
 80003b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003ba:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<25)));
 80003bc:	bf00      	nop
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <SysClockConfig+0xa4>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <SysClockConfig+0x72>

	//Select the Clock Source and wait for it to be set
	RCC->CFGR |= 0x02;
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <SysClockConfig+0xa4>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <SysClockConfig+0xa4>)
 80003d0:	f043 0302 	orr.w	r3, r3, #2
 80003d4:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & (3<<2)) != 0x08);
 80003d6:	bf00      	nop
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <SysClockConfig+0xa4>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	f003 030c 	and.w	r3, r3, #12
 80003e0:	2b08      	cmp	r3, #8
 80003e2:	d1f9      	bne.n	80003d8 <SysClockConfig+0x8c>

}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40007000 	.word	0x40007000
 80003f8:	40023c00 	.word	0x40023c00
 80003fc:	00402d04 	.word	0x00402d04

08000400 <delay>:

void delay(uint32_t time){
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	while(time--);
 8000408:	bf00      	nop
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	1e5a      	subs	r2, r3, #1
 800040e:	607a      	str	r2, [r7, #4]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1fa      	bne.n	800040a <delay+0xa>
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000426:	e7fe      	b.n	8000426 <NMI_Handler+0x4>

08000428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <HardFault_Handler+0x4>

0800042e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <MemManage_Handler+0x4>

08000434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <BusFault_Handler+0x4>

0800043a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <UsageFault_Handler+0x4>

08000440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800046e:	f000 f83f 	bl	80004f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <SystemInit+0x20>)
 800047e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000482:	4a05      	ldr	r2, [pc, #20]	; (8000498 <SystemInit+0x20>)
 8000484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800049c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80004a0:	f7ff ffea 	bl	8000478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004a6:	490d      	ldr	r1, [pc, #52]	; (80004dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004bc:	4c0a      	ldr	r4, [pc, #40]	; (80004e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ca:	f000 f825 	bl	8000518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ce:	f7ff fec3 	bl	8000258 <main>
  bx  lr    
 80004d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80004d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004e0:	08000580 	.word	0x08000580
  ldr r2, =_sbss
 80004e4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004e8:	2000002c 	.word	0x2000002c

080004ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC_IRQHandler>
	...

080004f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_IncTick+0x20>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_IncTick+0x24>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4413      	add	r3, r2
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <HAL_IncTick+0x24>)
 8000502:	6013      	str	r3, [r2, #0]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000000 	.word	0x20000000
 8000514:	20000028 	.word	0x20000028

08000518 <__libc_init_array>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	4d0d      	ldr	r5, [pc, #52]	; (8000550 <__libc_init_array+0x38>)
 800051c:	4c0d      	ldr	r4, [pc, #52]	; (8000554 <__libc_init_array+0x3c>)
 800051e:	1b64      	subs	r4, r4, r5
 8000520:	10a4      	asrs	r4, r4, #2
 8000522:	2600      	movs	r6, #0
 8000524:	42a6      	cmp	r6, r4
 8000526:	d109      	bne.n	800053c <__libc_init_array+0x24>
 8000528:	4d0b      	ldr	r5, [pc, #44]	; (8000558 <__libc_init_array+0x40>)
 800052a:	4c0c      	ldr	r4, [pc, #48]	; (800055c <__libc_init_array+0x44>)
 800052c:	f000 f818 	bl	8000560 <_init>
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	10a4      	asrs	r4, r4, #2
 8000534:	2600      	movs	r6, #0
 8000536:	42a6      	cmp	r6, r4
 8000538:	d105      	bne.n	8000546 <__libc_init_array+0x2e>
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000540:	4798      	blx	r3
 8000542:	3601      	adds	r6, #1
 8000544:	e7ee      	b.n	8000524 <__libc_init_array+0xc>
 8000546:	f855 3b04 	ldr.w	r3, [r5], #4
 800054a:	4798      	blx	r3
 800054c:	3601      	adds	r6, #1
 800054e:	e7f2      	b.n	8000536 <__libc_init_array+0x1e>
 8000550:	08000578 	.word	0x08000578
 8000554:	08000578 	.word	0x08000578
 8000558:	08000578 	.word	0x08000578
 800055c:	0800057c 	.word	0x0800057c

08000560 <_init>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	bf00      	nop
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr

0800056c <_fini>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr
