
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000378  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000500  08000500  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000500  08000500  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000500  08000500  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000500  08000500  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000500  08000500  00010500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000504  08000504  00010504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000508  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001437  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000506  00000000  00000000  000214ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001f0  00000000  00000000  000219b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000015d  00000000  00000000  00021ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e6ac  00000000  00000000  00021d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000220c  00000000  00000000  000403b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bb9fb  00000000  00000000  000425bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000600  00000000  00000000  000fdfb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000fe5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004e8 	.word	0x080004e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080004e8 	.word	0x080004e8

080001c8 <main>:
uint8_t UART2_GetChar(void);
void delay(uint32_t time);

uint8_t buffer[30];
int indx = 0;
int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	SysClockConfig();
 80001cc:	f000 f882 	bl	80002d4 <SysClockConfig>
	GPIOA_Init();
 80001d0:	f000 f856 	bl	8000280 <GPIOA_Init>
	USART2_Init();
 80001d4:	f000 f80c 	bl	80001f0 <USART2_Init>
	while(1){
		delay(1000000);
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <main+0x24>)
 80001da:	f000 f8d5 	bl	8000388 <delay>
		USART2_SendChar(0x11);
 80001de:	2011      	movs	r0, #17
 80001e0:	f000 f836 	bl	8000250 <USART2_SendChar>
		delay(1000000);
 80001e4:	4801      	ldr	r0, [pc, #4]	; (80001ec <main+0x24>)
 80001e6:	f000 f8cf 	bl	8000388 <delay>
		delay(1000000);
 80001ea:	e7f5      	b.n	80001d8 <main+0x10>
 80001ec:	000f4240 	.word	0x000f4240

080001f0 <USART2_Init>:
	}
	return 0;
}


void USART2_Init(void){
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<17);
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <USART2_Init+0x58>)
 80001f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001f8:	4a13      	ldr	r2, [pc, #76]	; (8000248 <USART2_Init+0x58>)
 80001fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001fe:	6413      	str	r3, [r2, #64]	; 0x40
	USART2->CR1 |= 0x00;	// Clear all
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <USART2_Init+0x5c>)
 8000202:	4a12      	ldr	r2, [pc, #72]	; (800024c <USART2_Init+0x5c>)
 8000204:	68db      	ldr	r3, [r3, #12]
 8000206:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<13); // USART enabled
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <USART2_Init+0x5c>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	4a0f      	ldr	r2, [pc, #60]	; (800024c <USART2_Init+0x5c>)
 800020e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000212:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (0<<12); // Word length: 1 start bit, 8 data bits, n stop bit (default)
 8000214:	4b0d      	ldr	r3, [pc, #52]	; (800024c <USART2_Init+0x5c>)
 8000216:	4a0d      	ldr	r2, [pc, #52]	; (800024c <USART2_Init+0x5c>)
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	60d3      	str	r3, [r2, #12]
	USART2->BRR = ((13<<0) | (22<<4)); // APB1 Clock frequency of 42MHz
 800021c:	4b0b      	ldr	r3, [pc, #44]	; (800024c <USART2_Init+0x5c>)
 800021e:	f240 126d 	movw	r2, #365	; 0x16d
 8000222:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= (1<<2);  // Receiver enabled
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <USART2_Init+0x5c>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <USART2_Init+0x5c>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<3);  // Transmitter enabled
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <USART2_Init+0x5c>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <USART2_Init+0x5c>)
 8000236:	f043 0308 	orr.w	r3, r3, #8
 800023a:	60d3      	str	r3, [r2, #12]

}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40023800 	.word	0x40023800
 800024c:	40004400 	.word	0x40004400

08000250 <USART2_SendChar>:

void USART2_SendChar(uint8_t c){
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
	USART2->DR = c;
 800025a:	4a08      	ldr	r2, [pc, #32]	; (800027c <USART2_SendChar+0x2c>)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & (1<<6)));  // Wait for TC to SET.. This indicates that the data has been transmitted
 8000260:	bf00      	nop
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <USART2_SendChar+0x2c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f9      	beq.n	8000262 <USART2_SendChar+0x12>
}
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	40004400 	.word	0x40004400

08000280 <GPIOA_Init>:
	while (!(USART2->SR & (1<<5)));  // Wait for RXNE to SET.. This indicates that the data has been Received
	Temp = USART2->DR;  // Read the data.
	return Temp;
}

void GPIOA_Init(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0);
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <GPIOA_Init+0x4c>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a10      	ldr	r2, [pc, #64]	; (80002cc <GPIOA_Init+0x4c>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= (2<<4);   // Alternate function for pin PA2
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <GPIOA_Init+0x50>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <GPIOA_Init+0x50>)
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2<<6);   // Alternate function for pin PA3
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <GPIOA_Init+0x50>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <GPIOA_Init+0x50>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (7<<8);  // AF7 -> PA2
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <GPIOA_Init+0x50>)
 80002aa:	6a1b      	ldr	r3, [r3, #32]
 80002ac:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <GPIOA_Init+0x50>)
 80002ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80002b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7<<12); // AF7 -> PA3
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <GPIOA_Init+0x50>)
 80002b6:	6a1b      	ldr	r3, [r3, #32]
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <GPIOA_Init+0x50>)
 80002ba:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80002be:	6213      	str	r3, [r2, #32]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020000 	.word	0x40020000

080002d4 <SysClockConfig>:


void SysClockConfig(void){
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	RCC->CR |= (1 << 16); //HSE on
 80002d8:	4b27      	ldr	r3, [pc, #156]	; (8000378 <SysClockConfig+0xa4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a26      	ldr	r2, [pc, #152]	; (8000378 <SysClockConfig+0xa4>)
 80002de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002e2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<17)));//Wait for HSE clock ready flag
 80002e4:	bf00      	nop
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <SysClockConfig+0xa4>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f9      	beq.n	80002e6 <SysClockConfig+0x12>

	RCC->APB1ENR |= (1<<28);
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <SysClockConfig+0xa4>)
 80002f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002f6:	4a20      	ldr	r2, [pc, #128]	; (8000378 <SysClockConfig+0xa4>)
 80002f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002fc:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= (1<<14);
 80002fe:	4b1f      	ldr	r3, [pc, #124]	; (800037c <SysClockConfig+0xa8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a1e      	ldr	r2, [pc, #120]	; (800037c <SysClockConfig+0xa8>)
 8000304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000308:	6013      	str	r3, [r2, #0]

	FLASH->ACR = (1<<9) | (1<<10) | (1<<8) | 0X05;
 800030a:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <SysClockConfig+0xac>)
 800030c:	f240 7205 	movw	r2, #1797	; 0x705
 8000310:	601a      	str	r2, [r3, #0]

	//AHB PRESCALER
	RCC->CFGR |= 0X00;
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <SysClockConfig+0xa4>)
 8000314:	4a18      	ldr	r2, [pc, #96]	; (8000378 <SysClockConfig+0xa4>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	6093      	str	r3, [r2, #8]
	//APB1 PRESCALER
	RCC->CFGR |= 0x00001400U;
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <SysClockConfig+0xa4>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	4a16      	ldr	r2, [pc, #88]	; (8000378 <SysClockConfig+0xa4>)
 8000320:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000324:	6093      	str	r3, [r2, #8]
	//APB2 PRESCALER
	RCC->CFGR |= 0x00008000U;
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <SysClockConfig+0xa4>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	4a13      	ldr	r2, [pc, #76]	; (8000378 <SysClockConfig+0xa4>)
 800032c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000330:	6093      	str	r3, [r2, #8]

	//CONFIGURE THE MAIN PLL
	RCC->PLLCFGR = (4 <<0) | (168 << 6) | (0 <<16) | (1<<22);
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <SysClockConfig+0xa4>)
 8000334:	4a13      	ldr	r2, [pc, #76]	; (8000384 <SysClockConfig+0xb0>)
 8000336:	605a      	str	r2, [r3, #4]

	//Enable the PLL and wait for it to become ready
	RCC->CR |= (1<<24);
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <SysClockConfig+0xa4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <SysClockConfig+0xa4>)
 800033e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000342:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<25)));
 8000344:	bf00      	nop
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <SysClockConfig+0xa4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <SysClockConfig+0x72>

	//Select the Clock Source and wait for it to be set
	RCC->CFGR |= 0x02;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <SysClockConfig+0xa4>)
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	4a08      	ldr	r2, [pc, #32]	; (8000378 <SysClockConfig+0xa4>)
 8000358:	f043 0302 	orr.w	r3, r3, #2
 800035c:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & (3<<2)) != 0x08);
 800035e:	bf00      	nop
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <SysClockConfig+0xa4>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	f003 030c 	and.w	r3, r3, #12
 8000368:	2b08      	cmp	r3, #8
 800036a:	d1f9      	bne.n	8000360 <SysClockConfig+0x8c>

}
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40023800 	.word	0x40023800
 800037c:	40007000 	.word	0x40007000
 8000380:	40023c00 	.word	0x40023c00
 8000384:	00402a04 	.word	0x00402a04

08000388 <delay>:

void delay(uint32_t time){
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	while (time--);
 8000390:	bf00      	nop
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	1e5a      	subs	r2, r3, #1
 8000396:	607a      	str	r2, [r7, #4]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d1fa      	bne.n	8000392 <delay+0xa>
}
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003ae:	e7fe      	b.n	80003ae <NMI_Handler+0x4>

080003b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <HardFault_Handler+0x4>

080003b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ba:	e7fe      	b.n	80003ba <MemManage_Handler+0x4>

080003bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <BusFault_Handler+0x4>

080003c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <UsageFault_Handler+0x4>

080003c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f2:	b580      	push	{r7, lr}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f6:	f000 f83f 	bl	8000478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <SystemInit+0x20>)
 8000406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800040a:	4a05      	ldr	r2, [pc, #20]	; (8000420 <SystemInit+0x20>)
 800040c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800045c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000428:	f7ff ffea 	bl	8000400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800042e:	490d      	ldr	r1, [pc, #52]	; (8000464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000430:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000434:	e002      	b.n	800043c <LoopCopyDataInit>

08000436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043a:	3304      	adds	r3, #4

0800043c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800043c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000440:	d3f9      	bcc.n	8000436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000442:	4a0a      	ldr	r2, [pc, #40]	; (800046c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000444:	4c0a      	ldr	r4, [pc, #40]	; (8000470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000448:	e001      	b.n	800044e <LoopFillZerobss>

0800044a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800044c:	3204      	adds	r2, #4

0800044e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000450:	d3fb      	bcc.n	800044a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000452:	f000 f825 	bl	80004a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000456:	f7ff feb7 	bl	80001c8 <main>
  bx  lr    
 800045a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800045c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000468:	08000508 	.word	0x08000508
  ldr r2, =_sbss
 800046c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000470:	20000024 	.word	0x20000024

08000474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC_IRQHandler>
	...

08000478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <HAL_IncTick+0x20>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	461a      	mov	r2, r3
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <HAL_IncTick+0x24>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4413      	add	r3, r2
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <HAL_IncTick+0x24>)
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000000 	.word	0x20000000
 800049c:	20000020 	.word	0x20000020

080004a0 <__libc_init_array>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	4d0d      	ldr	r5, [pc, #52]	; (80004d8 <__libc_init_array+0x38>)
 80004a4:	4c0d      	ldr	r4, [pc, #52]	; (80004dc <__libc_init_array+0x3c>)
 80004a6:	1b64      	subs	r4, r4, r5
 80004a8:	10a4      	asrs	r4, r4, #2
 80004aa:	2600      	movs	r6, #0
 80004ac:	42a6      	cmp	r6, r4
 80004ae:	d109      	bne.n	80004c4 <__libc_init_array+0x24>
 80004b0:	4d0b      	ldr	r5, [pc, #44]	; (80004e0 <__libc_init_array+0x40>)
 80004b2:	4c0c      	ldr	r4, [pc, #48]	; (80004e4 <__libc_init_array+0x44>)
 80004b4:	f000 f818 	bl	80004e8 <_init>
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	10a4      	asrs	r4, r4, #2
 80004bc:	2600      	movs	r6, #0
 80004be:	42a6      	cmp	r6, r4
 80004c0:	d105      	bne.n	80004ce <__libc_init_array+0x2e>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c8:	4798      	blx	r3
 80004ca:	3601      	adds	r6, #1
 80004cc:	e7ee      	b.n	80004ac <__libc_init_array+0xc>
 80004ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d2:	4798      	blx	r3
 80004d4:	3601      	adds	r6, #1
 80004d6:	e7f2      	b.n	80004be <__libc_init_array+0x1e>
 80004d8:	08000500 	.word	0x08000500
 80004dc:	08000500 	.word	0x08000500
 80004e0:	08000500 	.word	0x08000500
 80004e4:	08000504 	.word	0x08000504

080004e8 <_init>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	bf00      	nop
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr

080004f4 <_fini>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr
