
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004208  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004468  08004468  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004470  08004470  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004474  08004474  00014474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          0000416c  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200041d8  200041d8  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e28e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027af  00000000  00000000  0002e36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f08  00000000  00000000  00030b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b7b  00000000  00000000  00031a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023191  00000000  00000000  000325a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010896  00000000  00000000  00055734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2e86  00000000  00000000  00065fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004528  00000000  00000000  00138e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0013d378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004380 	.word	0x08004380

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004380 	.word	0x08004380

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000088 	.word	0x20000088
 800059c:	200000dc 	.word	0x200000dc

080005a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d013      	beq.n	80005e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	e000      	b.n	80005cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <_write>:
uint8_t indx = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
	int i=0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e009      	b.n	8000618 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	60ba      	str	r2, [r7, #8]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffc7 	bl	80005a0 <ITM_SendChar>
	for(i=0; i<len; i++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbf1      	blt.n	8000604 <_write+0x16>
	return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b08e      	sub	sp, #56	; 0x38
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fab1 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f837 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f89f 	bl	800077c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting application...\n");
 800063e:	4815      	ldr	r0, [pc, #84]	; (8000694 <main+0x68>)
 8000640:	f003 f834 	bl	80036ac <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <main+0x6c>)
 8000646:	f107 041c 	add.w	r4, r7, #28
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fcd1 	bl	8002006 <osThreadCreate>
 8000664:	4603      	mov	r3, r0
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <main+0x70>)
 8000668:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(MyTask,MyTask_Init,osPriorityAboveNormal,0, 128 );
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <main+0x74>)
 800066c:	463c      	mov	r4, r7
 800066e:	461d      	mov	r5, r3
 8000670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MyTaskHandler = osThreadCreate(osThread(MyTask),NULL);
 800067c:	463b      	mov	r3, r7
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fcc0 	bl	8002006 <osThreadCreate>
 8000686:	4603      	mov	r3, r0
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <main+0x78>)
 800068a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800068c:	f001 fcb4 	bl	8001ff8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0x64>
 8000692:	bf00      	nop
 8000694:	08004398 	.word	0x08004398
 8000698:	080043bc 	.word	0x080043bc
 800069c:	200002dc 	.word	0x200002dc
 80006a0:	080043e0 	.word	0x080043e0
 80006a4:	200002e0 	.word	0x200002e0

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	; 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	; 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f8d8 	bl	800386c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	4a27      	ldr	r2, [pc, #156]	; (8000774 <SystemClock_Config+0xcc>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	; 0x40
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <SystemClock_Config+0xd0>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800071c:	23a8      	movs	r3, #168	; 0xa8
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fcf3 	bl	8001118 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000738:	f000 f8a4 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2105      	movs	r1, #5
 800075a:	4618      	mov	r0, r3
 800075c:	f000 ff54 	bl	8001608 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000766:	f000 f88d 	bl	8000884 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_GPIO_Init+0x90>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_GPIO_Init+0x90>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_GPIO_Init+0x90>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_GPIO_Init+0x90>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_GPIO_Init+0x90>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_GPIO_Init+0x90>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_GPIO_Init+0x90>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <MX_GPIO_Init+0x90>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_GPIO_Init+0x90>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4619      	mov	r1, r3
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_GPIO_Init+0x94>)
 80007fe:	f000 faef 	bl	8000de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020c00 	.word	0x40020c00

08000814 <MyTask_Init>:

/* USER CODE BEGIN 4 */
void MyTask_Init(void const *arg){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	for(;;){
		printf("index = %d\n",indx++);
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MyTask_Init+0x28>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	1c5a      	adds	r2, r3, #1
 8000822:	b2d1      	uxtb	r1, r2
 8000824:	4a05      	ldr	r2, [pc, #20]	; (800083c <MyTask_Init+0x28>)
 8000826:	7011      	strb	r1, [r2, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MyTask_Init+0x2c>)
 800082c:	f002 fed8 	bl	80035e0 <iprintf>
		osDelay(2000);
 8000830:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000834:	f001 fc33 	bl	800209e <osDelay>
		printf("index = %d\n",indx++);
 8000838:	e7f0      	b.n	800081c <MyTask_Init+0x8>
 800083a:	bf00      	nop
 800083c:	200002e4 	.word	0x200002e4
 8000840:	080043fc 	.word	0x080043fc

08000844 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("DefaultTask\n");
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <StartDefaultTask+0x18>)
 800084e:	f002 ff2d 	bl	80036ac <puts>
    osDelay(1000);
 8000852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000856:	f001 fc22 	bl	800209e <osDelay>
	printf("DefaultTask\n");
 800085a:	e7f7      	b.n	800084c <StartDefaultTask+0x8>
 800085c:	08004408 	.word	0x08004408

08000860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d101      	bne.n	8000876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000872:	f000 f9b3 	bl	8000bdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40010000 	.word	0x40010000

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_MspInit+0x54>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <HAL_MspInit+0x54>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x54>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_MspInit+0x54>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_MspInit+0x54>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_MspInit+0x54>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	210f      	movs	r1, #15
 80008d2:	f06f 0001 	mvn.w	r0, #1
 80008d6:	f000 fa59 	bl	8000d8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <HAL_InitTick+0xd4>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	4a2e      	ldr	r2, [pc, #184]	; (80009bc <HAL_InitTick+0xd4>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6453      	str	r3, [r2, #68]	; 0x44
 8000908:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <HAL_InitTick+0xd4>)
 800090a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000914:	f107 020c 	add.w	r2, r7, #12
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f001 f87e 	bl	8001a20 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000924:	f001 f868 	bl	80019f8 <HAL_RCC_GetPCLK2Freq>
 8000928:	4603      	mov	r3, r0
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000930:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <HAL_InitTick+0xd8>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	0c9b      	lsrs	r3, r3, #18
 8000938:	3b01      	subs	r3, #1
 800093a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_InitTick+0xdc>)
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <HAL_InitTick+0xe0>)
 8000940:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <HAL_InitTick+0xdc>)
 8000944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000948:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800094a:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <HAL_InitTick+0xdc>)
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_InitTick+0xdc>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_InitTick+0xdc>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_InitTick+0xdc>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000962:	4818      	ldr	r0, [pc, #96]	; (80009c4 <HAL_InitTick+0xdc>)
 8000964:	f001 f88e 	bl	8001a84 <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800096e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000972:	2b00      	cmp	r3, #0
 8000974:	d11b      	bne.n	80009ae <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <HAL_InitTick+0xdc>)
 8000978:	f001 f8de 	bl	8001b38 <HAL_TIM_Base_Start_IT>
 800097c:	4603      	mov	r3, r0
 800097e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000986:	2b00      	cmp	r3, #0
 8000988:	d111      	bne.n	80009ae <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800098a:	2019      	movs	r0, #25
 800098c:	f000 fa1a 	bl	8000dc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b0f      	cmp	r3, #15
 8000994:	d808      	bhi.n	80009a8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000996:	2200      	movs	r2, #0
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	2019      	movs	r0, #25
 800099c:	f000 f9f6 	bl	8000d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_InitTick+0xe4>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	e002      	b.n	80009ae <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	200002e8 	.word	0x200002e8
 80009c8:	40010000 	.word	0x40010000
 80009cc:	20000004 	.word	0x20000004

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a02:	f001 f909 	bl	8001c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200002e8 	.word	0x200002e8

08000a10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e00a      	b.n	8000a38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a22:	f3af 8000 	nop.w
 8000a26:	4601      	mov	r1, r0
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	b2ca      	uxtb	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf0      	blt.n	8000a22 <_read+0x12>
  }

  return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a72:	605a      	str	r2, [r3, #4]
  return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_isatty>:

int _isatty(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d207      	bcs.n	8000af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae4:	f002 ff10 	bl	8003908 <__errno>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20020000 	.word	0x20020000
 8000b14:	00000400 	.word	0x00000400
 8000b18:	20000330 	.word	0x20000330
 8000b1c:	200041d8 	.word	0x200041d8

08000b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b48:	f7ff ffea 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b4c:	480c      	ldr	r0, [pc, #48]	; (8000b80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b4e:	490d      	ldr	r1, [pc, #52]	; (8000b84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b64:	4c0a      	ldr	r4, [pc, #40]	; (8000b90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b72:	f002 fecf 	bl	8003914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b76:	f7ff fd59 	bl	800062c <main>
  bx  lr    
 8000b7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b88:	08004478 	.word	0x08004478
  ldr r2, =_sbss
 8000b8c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b90:	200041d8 	.word	0x200041d8

08000b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <HAL_Init+0x40>)
 8000ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_Init+0x40>)
 8000bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_Init+0x40>)
 8000bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f8d8 	bl	8000d76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f7ff fe8e 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bcc:	f7ff fe60 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023c00 	.word	0x40023c00

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000334 	.word	0x20000334

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000334 	.word	0x20000334

08000c1c <__NVIC_SetPriorityGrouping>:
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ff4c 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9e:	f7ff ff61 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000da2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	6978      	ldr	r0, [r7, #20]
 8000daa:	f7ff ffb1 	bl	8000d10 <NVIC_EncodePriority>
 8000dae:	4602      	mov	r2, r0
 8000db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff80 	bl	8000cbc <__NVIC_SetPriority>
}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff54 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e16b      	b.n	80010d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	f040 815a 	bne.w	80010ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d005      	beq.n	8000e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d130      	bne.n	8000e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f003 0201 	and.w	r2, r3, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d017      	beq.n	8000ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d123      	bne.n	8000f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	69b9      	ldr	r1, [r7, #24]
 8000f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0203 	and.w	r2, r3, #3
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80b4 	beq.w	80010ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b60      	ldr	r3, [pc, #384]	; (80010ec <HAL_GPIO_Init+0x30c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a5f      	ldr	r2, [pc, #380]	; (80010ec <HAL_GPIO_Init+0x30c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <HAL_GPIO_Init+0x30c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f82:	4a5b      	ldr	r2, [pc, #364]	; (80010f0 <HAL_GPIO_Init+0x310>)
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a52      	ldr	r2, [pc, #328]	; (80010f4 <HAL_GPIO_Init+0x314>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d02b      	beq.n	8001006 <HAL_GPIO_Init+0x226>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a51      	ldr	r2, [pc, #324]	; (80010f8 <HAL_GPIO_Init+0x318>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d025      	beq.n	8001002 <HAL_GPIO_Init+0x222>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a50      	ldr	r2, [pc, #320]	; (80010fc <HAL_GPIO_Init+0x31c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01f      	beq.n	8000ffe <HAL_GPIO_Init+0x21e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4f      	ldr	r2, [pc, #316]	; (8001100 <HAL_GPIO_Init+0x320>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d019      	beq.n	8000ffa <HAL_GPIO_Init+0x21a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_GPIO_Init+0x324>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d013      	beq.n	8000ff6 <HAL_GPIO_Init+0x216>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	; (8001108 <HAL_GPIO_Init+0x328>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	; (800110c <HAL_GPIO_Init+0x32c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x20e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4b      	ldr	r2, [pc, #300]	; (8001110 <HAL_GPIO_Init+0x330>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x20a>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e00e      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000fea:	2308      	movs	r3, #8
 8000fec:	e00c      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e00a      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	e008      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e004      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e002      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8001006:	2300      	movs	r3, #0
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	f002 0203 	and.w	r2, r2, #3
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	4093      	lsls	r3, r2
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001018:	4935      	ldr	r1, [pc, #212]	; (80010f0 <HAL_GPIO_Init+0x310>)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_GPIO_Init+0x334>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104a:	4a32      	ldr	r2, [pc, #200]	; (8001114 <HAL_GPIO_Init+0x334>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <HAL_GPIO_Init+0x334>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <HAL_GPIO_Init+0x334>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_GPIO_Init+0x334>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109e:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <HAL_GPIO_Init+0x334>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_GPIO_Init+0x334>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <HAL_GPIO_Init+0x334>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3301      	adds	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	f67f ae90 	bls.w	8000dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40021400 	.word	0x40021400
 800110c:	40021800 	.word	0x40021800
 8001110:	40021c00 	.word	0x40021c00
 8001114:	40013c00 	.word	0x40013c00

08001118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e267      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d075      	beq.n	8001222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001136:	4b88      	ldr	r3, [pc, #544]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b04      	cmp	r3, #4
 8001140:	d00c      	beq.n	800115c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001142:	4b85      	ldr	r3, [pc, #532]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800114a:	2b08      	cmp	r3, #8
 800114c:	d112      	bne.n	8001174 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	4b82      	ldr	r3, [pc, #520]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800115a:	d10b      	bne.n	8001174 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	4b7e      	ldr	r3, [pc, #504]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d05b      	beq.n	8001220 <HAL_RCC_OscConfig+0x108>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d157      	bne.n	8001220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e242      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117c:	d106      	bne.n	800118c <HAL_RCC_OscConfig+0x74>
 800117e:	4b76      	ldr	r3, [pc, #472]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a75      	ldr	r2, [pc, #468]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e01d      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x98>
 8001196:	4b70      	ldr	r3, [pc, #448]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6f      	ldr	r2, [pc, #444]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b6d      	ldr	r3, [pc, #436]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6c      	ldr	r2, [pc, #432]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 80011b0:	4b69      	ldr	r3, [pc, #420]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a68      	ldr	r2, [pc, #416]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b66      	ldr	r3, [pc, #408]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a65      	ldr	r2, [pc, #404]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fd18 	bl	8000c04 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fd14 	bl	8000c04 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e207      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0xc0>
 80011f6:	e014      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fd04 	bl	8000c04 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fd00 	bl	8000c04 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1f3      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001212:	4b51      	ldr	r3, [pc, #324]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0xe8>
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d063      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001242:	2b08      	cmp	r3, #8
 8001244:	d11c      	bne.n	8001280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001246:	4b44      	ldr	r3, [pc, #272]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d116      	bne.n	8001280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	4b41      	ldr	r3, [pc, #260]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_RCC_OscConfig+0x152>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d001      	beq.n	800126a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e1c7      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126a:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4937      	ldr	r1, [pc, #220]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127e:	e03a      	b.n	80012f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d020      	beq.n	80012ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001288:	4b34      	ldr	r3, [pc, #208]	; (800135c <HAL_RCC_OscConfig+0x244>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128e:	f7ff fcb9 	bl	8000c04 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001296:	f7ff fcb5 	bl	8000c04 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e1a8      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4925      	ldr	r1, [pc, #148]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
 80012c8:	e015      	b.n	80012f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_RCC_OscConfig+0x244>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc98 	bl	8000c04 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc94 	bl	8000c04 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e187      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d036      	beq.n	8001370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d016      	beq.n	8001338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_RCC_OscConfig+0x248>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff fc78 	bl	8000c04 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001318:	f7ff fc74 	bl	8000c04 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e167      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800132c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x200>
 8001336:	e01b      	b.n	8001370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_RCC_OscConfig+0x248>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fc61 	bl	8000c04 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	e00e      	b.n	8001364 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fc5d 	bl	8000c04 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d907      	bls.n	8001364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e150      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
 8001358:	40023800 	.word	0x40023800
 800135c:	42470000 	.word	0x42470000
 8001360:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	4b88      	ldr	r3, [pc, #544]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ea      	bne.n	8001346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8097 	beq.w	80014ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001382:	4b81      	ldr	r3, [pc, #516]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10f      	bne.n	80013ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b7d      	ldr	r3, [pc, #500]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a7c      	ldr	r2, [pc, #496]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b7a      	ldr	r3, [pc, #488]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013aa:	2301      	movs	r3, #1
 80013ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ae:	4b77      	ldr	r3, [pc, #476]	; (800158c <HAL_RCC_OscConfig+0x474>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d118      	bne.n	80013ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ba:	4b74      	ldr	r3, [pc, #464]	; (800158c <HAL_RCC_OscConfig+0x474>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a73      	ldr	r2, [pc, #460]	; (800158c <HAL_RCC_OscConfig+0x474>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fc1d 	bl	8000c04 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ce:	f7ff fc19 	bl	8000c04 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e10c      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e0:	4b6a      	ldr	r3, [pc, #424]	; (800158c <HAL_RCC_OscConfig+0x474>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x2ea>
 80013f4:	4b64      	ldr	r3, [pc, #400]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a63      	ldr	r2, [pc, #396]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001400:	e01c      	b.n	800143c <HAL_RCC_OscConfig+0x324>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x30c>
 800140a:	4b5f      	ldr	r3, [pc, #380]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140e:	4a5e      	ldr	r2, [pc, #376]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6713      	str	r3, [r2, #112]	; 0x70
 8001416:	4b5c      	ldr	r3, [pc, #368]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	4a5b      	ldr	r2, [pc, #364]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6713      	str	r3, [r2, #112]	; 0x70
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0x324>
 8001424:	4b58      	ldr	r3, [pc, #352]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001428:	4a57      	ldr	r2, [pc, #348]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 800142a:	f023 0301 	bic.w	r3, r3, #1
 800142e:	6713      	str	r3, [r2, #112]	; 0x70
 8001430:	4b55      	ldr	r3, [pc, #340]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	4a54      	ldr	r2, [pc, #336]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 0304 	bic.w	r3, r3, #4
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d015      	beq.n	8001470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fbde 	bl	8000c04 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fbda 	bl	8000c04 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0cb      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001462:	4b49      	ldr	r3, [pc, #292]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0ee      	beq.n	800144c <HAL_RCC_OscConfig+0x334>
 800146e:	e014      	b.n	800149a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff fbc8 	bl	8000c04 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f7ff fbc4 	bl	8000c04 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e0b5      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148e:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1ee      	bne.n	8001478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a0:	4b39      	ldr	r3, [pc, #228]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a38      	ldr	r2, [pc, #224]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80014a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80a1 	beq.w	80015f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b6:	4b34      	ldr	r3, [pc, #208]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d05c      	beq.n	800157c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d141      	bne.n	800154e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <HAL_RCC_OscConfig+0x478>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb98 	bl	8000c04 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fb94 	bl	8000c04 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e087      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	3b01      	subs	r3, #1
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	491b      	ldr	r1, [pc, #108]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_RCC_OscConfig+0x478>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fb6d 	bl	8000c04 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152e:	f7ff fb69 	bl	8000c04 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e05c      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x416>
 800154c:	e054      	b.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_RCC_OscConfig+0x478>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fb56 	bl	8000c04 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fb52 	bl	8000c04 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e045      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x444>
 800157a:	e03d      	b.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d107      	bne.n	8001594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e038      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
 8001588:	40023800 	.word	0x40023800
 800158c:	40007000 	.word	0x40007000
 8001590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x4ec>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d028      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d121      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d11a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d111      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	085b      	lsrs	r3, r3, #1
 80015dc:	3b01      	subs	r3, #1
 80015de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0cc      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d90c      	bls.n	8001644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b65      	ldr	r3, [pc, #404]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0b8      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800167e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	494d      	ldr	r1, [pc, #308]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d044      	beq.n	8001728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d119      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e07f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d003      	beq.n	80016c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e06f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e067      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e6:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 0203 	bic.w	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4934      	ldr	r1, [pc, #208]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f8:	f7ff fa84 	bl	8000c04 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f7ff fa80 	bl	8000c04 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	; 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e04f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 020c 	and.w	r2, r3, #12
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d1eb      	bne.n	8001700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d20c      	bcs.n	8001750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e032      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4916      	ldr	r1, [pc, #88]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	490e      	ldr	r1, [pc, #56]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800178e:	f000 f821 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8001792:	4602      	mov	r2, r0
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	490a      	ldr	r1, [pc, #40]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	5ccb      	ldrb	r3, [r1, r3]
 80017a2:	fa22 f303 	lsr.w	r3, r2, r3
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_ClockConfig+0x1c8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f89a 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00
 80017c4:	40023800 	.word	0x40023800
 80017c8:	0800441c 	.word	0x0800441c
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d8:	b094      	sub	sp, #80	; 0x50
 80017da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	647b      	str	r3, [r7, #68]	; 0x44
 80017e0:	2300      	movs	r3, #0
 80017e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e4:	2300      	movs	r3, #0
 80017e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ec:	4b79      	ldr	r3, [pc, #484]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d00d      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x40>
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	f200 80e1 	bhi.w	80019c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x34>
 8001802:	2b04      	cmp	r3, #4
 8001804:	d003      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x3a>
 8001806:	e0db      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b73      	ldr	r3, [pc, #460]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800180c:	e0db      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180e:	4b73      	ldr	r3, [pc, #460]	; (80019dc <HAL_RCC_GetSysClockFreq+0x208>)
 8001810:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001812:	e0d8      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001814:	4b6f      	ldr	r3, [pc, #444]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800181c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181e:	4b6d      	ldr	r3, [pc, #436]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d063      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182a:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	099b      	lsrs	r3, r3, #6
 8001830:	2200      	movs	r2, #0
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
 8001834:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
 8001842:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001846:	4622      	mov	r2, r4
 8001848:	462b      	mov	r3, r5
 800184a:	f04f 0000 	mov.w	r0, #0
 800184e:	f04f 0100 	mov.w	r1, #0
 8001852:	0159      	lsls	r1, r3, #5
 8001854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001858:	0150      	lsls	r0, r2, #5
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4621      	mov	r1, r4
 8001860:	1a51      	subs	r1, r2, r1
 8001862:	6139      	str	r1, [r7, #16]
 8001864:	4629      	mov	r1, r5
 8001866:	eb63 0301 	sbc.w	r3, r3, r1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001878:	4659      	mov	r1, fp
 800187a:	018b      	lsls	r3, r1, #6
 800187c:	4651      	mov	r1, sl
 800187e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001882:	4651      	mov	r1, sl
 8001884:	018a      	lsls	r2, r1, #6
 8001886:	4651      	mov	r1, sl
 8001888:	ebb2 0801 	subs.w	r8, r2, r1
 800188c:	4659      	mov	r1, fp
 800188e:	eb63 0901 	sbc.w	r9, r3, r1
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800189e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a6:	4690      	mov	r8, r2
 80018a8:	4699      	mov	r9, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	eb18 0303 	adds.w	r3, r8, r3
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	462b      	mov	r3, r5
 80018b4:	eb49 0303 	adc.w	r3, r9, r3
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018c6:	4629      	mov	r1, r5
 80018c8:	024b      	lsls	r3, r1, #9
 80018ca:	4621      	mov	r1, r4
 80018cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018d0:	4621      	mov	r1, r4
 80018d2:	024a      	lsls	r2, r1, #9
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018da:	2200      	movs	r2, #0
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80018de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018e4:	f7fe fcc4 	bl	8000270 <__aeabi_uldivmod>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4613      	mov	r3, r2
 80018ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018f0:	e058      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	099b      	lsrs	r3, r3, #6
 80018f8:	2200      	movs	r2, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	4611      	mov	r1, r2
 80018fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001902:	623b      	str	r3, [r7, #32]
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
 8001908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800190c:	4642      	mov	r2, r8
 800190e:	464b      	mov	r3, r9
 8001910:	f04f 0000 	mov.w	r0, #0
 8001914:	f04f 0100 	mov.w	r1, #0
 8001918:	0159      	lsls	r1, r3, #5
 800191a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191e:	0150      	lsls	r0, r2, #5
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4641      	mov	r1, r8
 8001926:	ebb2 0a01 	subs.w	sl, r2, r1
 800192a:	4649      	mov	r1, r9
 800192c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800193c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001944:	ebb2 040a 	subs.w	r4, r2, sl
 8001948:	eb63 050b 	sbc.w	r5, r3, fp
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	00eb      	lsls	r3, r5, #3
 8001956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800195a:	00e2      	lsls	r2, r4, #3
 800195c:	4614      	mov	r4, r2
 800195e:	461d      	mov	r5, r3
 8001960:	4643      	mov	r3, r8
 8001962:	18e3      	adds	r3, r4, r3
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	464b      	mov	r3, r9
 8001968:	eb45 0303 	adc.w	r3, r5, r3
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800197a:	4629      	mov	r1, r5
 800197c:	028b      	lsls	r3, r1, #10
 800197e:	4621      	mov	r1, r4
 8001980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001984:	4621      	mov	r1, r4
 8001986:	028a      	lsls	r2, r1, #10
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198e:	2200      	movs	r2, #0
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	61fa      	str	r2, [r7, #28]
 8001994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001998:	f7fe fc6a 	bl	8000270 <__aeabi_uldivmod>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4613      	mov	r3, r2
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019be:	e002      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3750      	adds	r7, #80	; 0x50
 80019cc:	46bd      	mov	sp, r7
 80019ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	007a1200 	.word	0x007a1200

080019e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000000 	.word	0x20000000

080019f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019fc:	f7ff fff0 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0b5b      	lsrs	r3, r3, #13
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	0800442c 	.word	0x0800442c

08001a20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	08db      	lsrs	r3, r3, #3
 8001a5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_RCC_GetClockConfig+0x60>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0207 	and.w	r2, r3, #7
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	601a      	str	r2, [r3, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40023c00 	.word	0x40023c00

08001a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e041      	b.n	8001b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f839 	bl	8001b22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	f000 f9c0 	bl	8001e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d001      	beq.n	8001b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e04e      	b.n	8001bee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <HAL_TIM_Base_Start_IT+0xc4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d022      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d01d      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d018      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00e      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d004      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d111      	bne.n	8001bdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d010      	beq.n	8001bec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bda:	e007      	b.n	8001bec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	40000400 	.word	0x40000400
 8001c04:	40000800 	.word	0x40000800
 8001c08:	40000c00 	.word	0x40000c00
 8001c0c:	40010400 	.word	0x40010400
 8001c10:	40014000 	.word	0x40014000
 8001c14:	40001800 	.word	0x40001800

08001c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d020      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01b      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0202 	mvn.w	r2, #2
 8001c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8d2 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001c68:	e005      	b.n	8001c76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8c4 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f8d5 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d020      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0204 	mvn.w	r2, #4
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8ac 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f89e 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8af 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d020      	beq.n	8001d14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0208 	mvn.w	r2, #8
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f886 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f878 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f889 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d020      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0210 	mvn.w	r2, #16
 8001d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2208      	movs	r2, #8
 8001d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f860 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001d4c:	e005      	b.n	8001d5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f852 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f863 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00c      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0201 	mvn.w	r2, #1
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fd6e 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00c      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f906 	bl	8001fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00c      	beq.n	8001dcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f834 	bl	8001e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00c      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0220 	mvn.w	r2, #32
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8d8 	bl	8001fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a46      	ldr	r2, [pc, #280]	; (8001f74 <TIM_Base_SetConfig+0x12c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d013      	beq.n	8001e88 <TIM_Base_SetConfig+0x40>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e66:	d00f      	beq.n	8001e88 <TIM_Base_SetConfig+0x40>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a43      	ldr	r2, [pc, #268]	; (8001f78 <TIM_Base_SetConfig+0x130>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00b      	beq.n	8001e88 <TIM_Base_SetConfig+0x40>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a42      	ldr	r2, [pc, #264]	; (8001f7c <TIM_Base_SetConfig+0x134>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <TIM_Base_SetConfig+0x40>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a41      	ldr	r2, [pc, #260]	; (8001f80 <TIM_Base_SetConfig+0x138>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d003      	beq.n	8001e88 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a40      	ldr	r2, [pc, #256]	; (8001f84 <TIM_Base_SetConfig+0x13c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d108      	bne.n	8001e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a35      	ldr	r2, [pc, #212]	; (8001f74 <TIM_Base_SetConfig+0x12c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d02b      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea8:	d027      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <TIM_Base_SetConfig+0x130>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d023      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a31      	ldr	r2, [pc, #196]	; (8001f7c <TIM_Base_SetConfig+0x134>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01f      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a30      	ldr	r2, [pc, #192]	; (8001f80 <TIM_Base_SetConfig+0x138>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d01b      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a2f      	ldr	r2, [pc, #188]	; (8001f84 <TIM_Base_SetConfig+0x13c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d017      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a2e      	ldr	r2, [pc, #184]	; (8001f88 <TIM_Base_SetConfig+0x140>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <TIM_Base_SetConfig+0x144>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00f      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2c      	ldr	r2, [pc, #176]	; (8001f90 <TIM_Base_SetConfig+0x148>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00b      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <TIM_Base_SetConfig+0x14c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2a      	ldr	r2, [pc, #168]	; (8001f98 <TIM_Base_SetConfig+0x150>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d003      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <TIM_Base_SetConfig+0x154>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d108      	bne.n	8001f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <TIM_Base_SetConfig+0x12c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_Base_SetConfig+0xf8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <TIM_Base_SetConfig+0x13c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d103      	bne.n	8001f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d105      	bne.n	8001f66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f023 0201 	bic.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]
  }
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40000400 	.word	0x40000400
 8001f7c:	40000800 	.word	0x40000800
 8001f80:	40000c00 	.word	0x40000c00
 8001f84:	40010400 	.word	0x40010400
 8001f88:	40014000 	.word	0x40014000
 8001f8c:	40014400 	.word	0x40014400
 8001f90:	40014800 	.word	0x40014800
 8001f94:	40001800 	.word	0x40001800
 8001f98:	40001c00 	.word	0x40001c00
 8001f9c:	40002000 	.word	0x40002000

08001fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fda:	2b84      	cmp	r3, #132	; 0x84
 8001fdc:	d005      	beq.n	8001fea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001fde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3303      	adds	r3, #3
 8001fe8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001ffc:	f000 fade 	bl	80025bc <vTaskStartScheduler>
  
  return osOK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}

08002006 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002006:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002008:	b089      	sub	sp, #36	; 0x24
 800200a:	af04      	add	r7, sp, #16
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <osThreadCreate+0x54>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01c      	beq.n	800205a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685c      	ldr	r4, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691e      	ldr	r6, [r3, #16]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ffc8 	bl	8001fc8 <makeFreeRtosPriority>
 8002038:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002042:	9202      	str	r2, [sp, #8]
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	9100      	str	r1, [sp, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	4632      	mov	r2, r6
 800204c:	4629      	mov	r1, r5
 800204e:	4620      	mov	r0, r4
 8002050:	f000 f8ed 	bl	800222e <xTaskCreateStatic>
 8002054:	4603      	mov	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e01c      	b.n	8002094 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685c      	ldr	r4, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002066:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ffaa 	bl	8001fc8 <makeFreeRtosPriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	9200      	str	r2, [sp, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	4632      	mov	r2, r6
 8002082:	4629      	mov	r1, r5
 8002084:	4620      	mov	r0, r4
 8002086:	f000 f92f 	bl	80022e8 <xTaskCreate>
 800208a:	4603      	mov	r3, r0
 800208c:	2b01      	cmp	r3, #1
 800208e:	d001      	beq.n	8002094 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	e000      	b.n	8002096 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002094:	68fb      	ldr	r3, [r7, #12]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800209e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <osDelay+0x16>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	e000      	b.n	80020b6 <osDelay+0x18>
 80020b4:	2301      	movs	r3, #1
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fa4c 	bl	8002554 <vTaskDelay>
  
  return osOK;
 80020bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f103 0208 	add.w	r2, r3, #8
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f04f 32ff 	mov.w	r2, #4294967295
 80020de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f103 0208 	add.w	r2, r3, #8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f103 0208 	add.w	r2, r3, #8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d103      	bne.n	8002188 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e00c      	b.n	80021a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3308      	adds	r3, #8
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e002      	b.n	8002196 <vListInsert+0x2e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d2f6      	bcs.n	8002190 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	601a      	str	r2, [r3, #0]
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6892      	ldr	r2, [r2, #8]
 80021f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6852      	ldr	r2, [r2, #4]
 80021fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	429a      	cmp	r2, r3
 8002204:	d103      	bne.n	800220e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800222e:	b580      	push	{r7, lr}
 8002230:	b08e      	sub	sp, #56	; 0x38
 8002232:	af04      	add	r7, sp, #16
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002246:	f383 8811 	msr	BASEPRI, r3
 800224a:	f3bf 8f6f 	isb	sy
 800224e:	f3bf 8f4f 	dsb	sy
 8002252:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002254:	bf00      	nop
 8002256:	e7fe      	b.n	8002256 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10a      	bne.n	8002274 <xTaskCreateStatic+0x46>
	__asm volatile
 800225e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002262:	f383 8811 	msr	BASEPRI, r3
 8002266:	f3bf 8f6f 	isb	sy
 800226a:	f3bf 8f4f 	dsb	sy
 800226e:	61fb      	str	r3, [r7, #28]
}
 8002270:	bf00      	nop
 8002272:	e7fe      	b.n	8002272 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002274:	2354      	movs	r3, #84	; 0x54
 8002276:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b54      	cmp	r3, #84	; 0x54
 800227c:	d00a      	beq.n	8002294 <xTaskCreateStatic+0x66>
	__asm volatile
 800227e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002282:	f383 8811 	msr	BASEPRI, r3
 8002286:	f3bf 8f6f 	isb	sy
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	61bb      	str	r3, [r7, #24]
}
 8002290:	bf00      	nop
 8002292:	e7fe      	b.n	8002292 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002294:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01e      	beq.n	80022da <xTaskCreateStatic+0xac>
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01b      	beq.n	80022da <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80022b4:	2300      	movs	r3, #0
 80022b6:	9303      	str	r3, [sp, #12]
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	9302      	str	r3, [sp, #8]
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f850 	bl	8002372 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022d4:	f000 f8d4 	bl	8002480 <prvAddNewTaskToReadyList>
 80022d8:	e001      	b.n	80022de <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80022de:	697b      	ldr	r3, [r7, #20]
	}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3728      	adds	r7, #40	; 0x28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	; 0x30
 80022ec:	af04      	add	r7, sp, #16
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fec3 	bl	8003088 <pvPortMalloc>
 8002302:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00e      	beq.n	8002328 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800230a:	2054      	movs	r0, #84	; 0x54
 800230c:	f000 febc 	bl	8003088 <pvPortMalloc>
 8002310:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
 800231e:	e005      	b.n	800232c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	f000 ff7d 	bl	8003220 <vPortFree>
 8002326:	e001      	b.n	800232c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d017      	beq.n	8002362 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800233a:	88fa      	ldrh	r2, [r7, #6]
 800233c:	2300      	movs	r3, #0
 800233e:	9303      	str	r3, [sp, #12]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f80e 	bl	8002372 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002356:	69f8      	ldr	r0, [r7, #28]
 8002358:	f000 f892 	bl	8002480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800235c:	2301      	movs	r3, #1
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	e002      	b.n	8002368 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002368:	69bb      	ldr	r3, [r7, #24]
	}
 800236a:	4618      	mov	r0, r3
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b088      	sub	sp, #32
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800238a:	3b01      	subs	r3, #1
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f023 0307 	bic.w	r3, r3, #7
 8002398:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <prvInitialiseNewTask+0x48>
	__asm volatile
 80023a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a8:	f383 8811 	msr	BASEPRI, r3
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f3bf 8f4f 	dsb	sy
 80023b4:	617b      	str	r3, [r7, #20]
}
 80023b6:	bf00      	nop
 80023b8:	e7fe      	b.n	80023b8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01f      	beq.n	8002400 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	e012      	b.n	80023ec <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	7819      	ldrb	r1, [r3, #0]
 80023ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	4413      	add	r3, r2
 80023d4:	3334      	adds	r3, #52	; 0x34
 80023d6:	460a      	mov	r2, r1
 80023d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3301      	adds	r3, #1
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b0f      	cmp	r3, #15
 80023f0:	d9e9      	bls.n	80023c6 <prvInitialiseNewTask+0x54>
 80023f2:	e000      	b.n	80023f6 <prvInitialiseNewTask+0x84>
			{
				break;
 80023f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023fe:	e003      	b.n	8002408 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	2b06      	cmp	r3, #6
 800240c:	d901      	bls.n	8002412 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800240e:	2306      	movs	r3, #6
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	2200      	movs	r2, #0
 8002422:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002426:	3304      	adds	r3, #4
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fe6c 	bl	8002106 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	3318      	adds	r3, #24
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fe67 	bl	8002106 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800243c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	f1c3 0207 	rsb	r2, r3, #7
 8002444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002446:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	2200      	movs	r2, #0
 8002452:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	68f9      	ldr	r1, [r7, #12]
 8002460:	69b8      	ldr	r0, [r7, #24]
 8002462:	f000 fc05 	bl	8002c70 <pxPortInitialiseStack>
 8002466:	4602      	mov	r2, r0
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002476:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002488:	f000 fd1c 	bl	8002ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800248c:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <prvAddNewTaskToReadyList+0xb8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3301      	adds	r3, #1
 8002492:	4a29      	ldr	r2, [pc, #164]	; (8002538 <prvAddNewTaskToReadyList+0xb8>)
 8002494:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <prvAddNewTaskToReadyList+0xbc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800249e:	4a27      	ldr	r2, [pc, #156]	; (800253c <prvAddNewTaskToReadyList+0xbc>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <prvAddNewTaskToReadyList+0xb8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d110      	bne.n	80024ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80024ac:	f000 fabc 	bl	8002a28 <prvInitialiseTaskLists>
 80024b0:	e00d      	b.n	80024ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80024b2:	4b23      	ldr	r3, [pc, #140]	; (8002540 <prvAddNewTaskToReadyList+0xc0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <prvAddNewTaskToReadyList+0xbc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d802      	bhi.n	80024ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80024c8:	4a1c      	ldr	r2, [pc, #112]	; (800253c <prvAddNewTaskToReadyList+0xbc>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <prvAddNewTaskToReadyList+0xc4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <prvAddNewTaskToReadyList+0xc4>)
 80024d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	2201      	movs	r2, #1
 80024de:	409a      	lsls	r2, r3
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <prvAddNewTaskToReadyList+0xc8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	4a18      	ldr	r2, [pc, #96]	; (8002548 <prvAddNewTaskToReadyList+0xc8>)
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4a15      	ldr	r2, [pc, #84]	; (800254c <prvAddNewTaskToReadyList+0xcc>)
 80024f8:	441a      	add	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3304      	adds	r3, #4
 80024fe:	4619      	mov	r1, r3
 8002500:	4610      	mov	r0, r2
 8002502:	f7ff fe0d 	bl	8002120 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002506:	f000 fd0d 	bl	8002f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <prvAddNewTaskToReadyList+0xc0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <prvAddNewTaskToReadyList+0xbc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	429a      	cmp	r2, r3
 800251e:	d207      	bcs.n	8002530 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <prvAddNewTaskToReadyList+0xd0>)
 8002522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000438 	.word	0x20000438
 800253c:	20000338 	.word	0x20000338
 8002540:	20000444 	.word	0x20000444
 8002544:	20000454 	.word	0x20000454
 8002548:	20000440 	.word	0x20000440
 800254c:	2000033c 	.word	0x2000033c
 8002550:	e000ed04 	.word	0xe000ed04

08002554 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d017      	beq.n	8002596 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <vTaskDelay+0x60>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <vTaskDelay+0x30>
	__asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	60bb      	str	r3, [r7, #8]
}
 8002580:	bf00      	nop
 8002582:	e7fe      	b.n	8002582 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002584:	f000 f87a 	bl	800267c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002588:	2100      	movs	r1, #0
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fb0a 	bl	8002ba4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002590:	f000 f882 	bl	8002698 <xTaskResumeAll>
 8002594:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d107      	bne.n	80025ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <vTaskDelay+0x64>)
 800259e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000460 	.word	0x20000460
 80025b8:	e000ed04 	.word	0xe000ed04

080025bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80025ca:	463a      	mov	r2, r7
 80025cc:	1d39      	adds	r1, r7, #4
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ffca 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80025d8:	6839      	ldr	r1, [r7, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	9202      	str	r2, [sp, #8]
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	2300      	movs	r3, #0
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2300      	movs	r3, #0
 80025e8:	460a      	mov	r2, r1
 80025ea:	491e      	ldr	r1, [pc, #120]	; (8002664 <vTaskStartScheduler+0xa8>)
 80025ec:	481e      	ldr	r0, [pc, #120]	; (8002668 <vTaskStartScheduler+0xac>)
 80025ee:	f7ff fe1e 	bl	800222e <xTaskCreateStatic>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4a1d      	ldr	r2, [pc, #116]	; (800266c <vTaskStartScheduler+0xb0>)
 80025f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80025f8:	4b1c      	ldr	r3, [pc, #112]	; (800266c <vTaskStartScheduler+0xb0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002600:	2301      	movs	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e001      	b.n	800260a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d116      	bne.n	800263e <vTaskStartScheduler+0x82>
	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	613b      	str	r3, [r7, #16]
}
 8002622:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <vTaskStartScheduler+0xb4>)
 8002626:	f04f 32ff 	mov.w	r2, #4294967295
 800262a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <vTaskStartScheduler+0xb8>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <vTaskStartScheduler+0xbc>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002638:	f000 fba2 	bl	8002d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800263c:	e00e      	b.n	800265c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d10a      	bne.n	800265c <vTaskStartScheduler+0xa0>
	__asm volatile
 8002646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	60fb      	str	r3, [r7, #12]
}
 8002658:	bf00      	nop
 800265a:	e7fe      	b.n	800265a <vTaskStartScheduler+0x9e>
}
 800265c:	bf00      	nop
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	08004414 	.word	0x08004414
 8002668:	080029f9 	.word	0x080029f9
 800266c:	2000045c 	.word	0x2000045c
 8002670:	20000458 	.word	0x20000458
 8002674:	20000444 	.word	0x20000444
 8002678:	2000043c 	.word	0x2000043c

0800267c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <vTaskSuspendAll+0x18>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	4a03      	ldr	r2, [pc, #12]	; (8002694 <vTaskSuspendAll+0x18>)
 8002688:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	20000460 	.word	0x20000460

08002698 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <xTaskResumeAll+0x114>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	603b      	str	r3, [r7, #0]
}
 80026c0:	bf00      	nop
 80026c2:	e7fe      	b.n	80026c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80026c4:	f000 fbfe 	bl	8002ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <xTaskResumeAll+0x114>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	4a37      	ldr	r2, [pc, #220]	; (80027ac <xTaskResumeAll+0x114>)
 80026d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026d2:	4b36      	ldr	r3, [pc, #216]	; (80027ac <xTaskResumeAll+0x114>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d161      	bne.n	800279e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026da:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <xTaskResumeAll+0x118>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d05d      	beq.n	800279e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026e2:	e02e      	b.n	8002742 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026e4:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <xTaskResumeAll+0x11c>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3318      	adds	r3, #24
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fd72 	bl	80021da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3304      	adds	r3, #4
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fd6d 	bl	80021da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	2201      	movs	r2, #1
 8002706:	409a      	lsls	r2, r3
 8002708:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <xTaskResumeAll+0x120>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4313      	orrs	r3, r2
 800270e:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <xTaskResumeAll+0x120>)
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4a27      	ldr	r2, [pc, #156]	; (80027bc <xTaskResumeAll+0x124>)
 8002720:	441a      	add	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3304      	adds	r3, #4
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f7ff fcf9 	bl	8002120 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <xTaskResumeAll+0x128>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	429a      	cmp	r2, r3
 800273a:	d302      	bcc.n	8002742 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <xTaskResumeAll+0x12c>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002742:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <xTaskResumeAll+0x11c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1cc      	bne.n	80026e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002750:	f000 fa08 	bl	8002b64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002754:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <xTaskResumeAll+0x130>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d010      	beq.n	8002782 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002760:	f000 f836 	bl	80027d0 <xTaskIncrementTick>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <xTaskResumeAll+0x12c>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f1      	bne.n	8002760 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <xTaskResumeAll+0x130>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <xTaskResumeAll+0x12c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800278a:	2301      	movs	r3, #1
 800278c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <xTaskResumeAll+0x134>)
 8002790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800279e:	f000 fbc1 	bl	8002f24 <vPortExitCritical>

	return xAlreadyYielded;
 80027a2:	68bb      	ldr	r3, [r7, #8]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000460 	.word	0x20000460
 80027b0:	20000438 	.word	0x20000438
 80027b4:	200003f8 	.word	0x200003f8
 80027b8:	20000440 	.word	0x20000440
 80027bc:	2000033c 	.word	0x2000033c
 80027c0:	20000338 	.word	0x20000338
 80027c4:	2000044c 	.word	0x2000044c
 80027c8:	20000448 	.word	0x20000448
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027da:	4b4e      	ldr	r3, [pc, #312]	; (8002914 <xTaskIncrementTick+0x144>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 808e 	bne.w	8002900 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027e4:	4b4c      	ldr	r3, [pc, #304]	; (8002918 <xTaskIncrementTick+0x148>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80027ec:	4a4a      	ldr	r2, [pc, #296]	; (8002918 <xTaskIncrementTick+0x148>)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d120      	bne.n	800283a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80027f8:	4b48      	ldr	r3, [pc, #288]	; (800291c <xTaskIncrementTick+0x14c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <xTaskIncrementTick+0x48>
	__asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	603b      	str	r3, [r7, #0]
}
 8002814:	bf00      	nop
 8002816:	e7fe      	b.n	8002816 <xTaskIncrementTick+0x46>
 8002818:	4b40      	ldr	r3, [pc, #256]	; (800291c <xTaskIncrementTick+0x14c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b40      	ldr	r3, [pc, #256]	; (8002920 <xTaskIncrementTick+0x150>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a3e      	ldr	r2, [pc, #248]	; (800291c <xTaskIncrementTick+0x14c>)
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4a3e      	ldr	r2, [pc, #248]	; (8002920 <xTaskIncrementTick+0x150>)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <xTaskIncrementTick+0x154>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	4a3c      	ldr	r2, [pc, #240]	; (8002924 <xTaskIncrementTick+0x154>)
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	f000 f995 	bl	8002b64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800283a:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <xTaskIncrementTick+0x158>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	d348      	bcc.n	80028d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002844:	4b35      	ldr	r3, [pc, #212]	; (800291c <xTaskIncrementTick+0x14c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <xTaskIncrementTick+0x158>)
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	601a      	str	r2, [r3, #0]
					break;
 8002856:	e03e      	b.n	80028d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002858:	4b30      	ldr	r3, [pc, #192]	; (800291c <xTaskIncrementTick+0x14c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	d203      	bcs.n	8002878 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002870:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <xTaskIncrementTick+0x158>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002876:	e02e      	b.n	80028d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	3304      	adds	r3, #4
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fcac 	bl	80021da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3318      	adds	r3, #24
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fca3 	bl	80021da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	2201      	movs	r2, #1
 800289a:	409a      	lsls	r2, r3
 800289c:	4b23      	ldr	r3, [pc, #140]	; (800292c <xTaskIncrementTick+0x15c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	4a22      	ldr	r2, [pc, #136]	; (800292c <xTaskIncrementTick+0x15c>)
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <xTaskIncrementTick+0x160>)
 80028b4:	441a      	add	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	3304      	adds	r3, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f7ff fc2f 	bl	8002120 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <xTaskIncrementTick+0x164>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d3b9      	bcc.n	8002844 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80028d0:	2301      	movs	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028d4:	e7b6      	b.n	8002844 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <xTaskIncrementTick+0x164>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	4914      	ldr	r1, [pc, #80]	; (8002930 <xTaskIncrementTick+0x160>)
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d901      	bls.n	80028f2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80028ee:	2301      	movs	r3, #1
 80028f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <xTaskIncrementTick+0x168>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80028fa:	2301      	movs	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e004      	b.n	800290a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002900:	4b0e      	ldr	r3, [pc, #56]	; (800293c <xTaskIncrementTick+0x16c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	4a0d      	ldr	r2, [pc, #52]	; (800293c <xTaskIncrementTick+0x16c>)
 8002908:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800290a:	697b      	ldr	r3, [r7, #20]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000460 	.word	0x20000460
 8002918:	2000043c 	.word	0x2000043c
 800291c:	200003f0 	.word	0x200003f0
 8002920:	200003f4 	.word	0x200003f4
 8002924:	20000450 	.word	0x20000450
 8002928:	20000458 	.word	0x20000458
 800292c:	20000440 	.word	0x20000440
 8002930:	2000033c 	.word	0x2000033c
 8002934:	20000338 	.word	0x20000338
 8002938:	2000044c 	.word	0x2000044c
 800293c:	20000448 	.word	0x20000448

08002940 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002946:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <vTaskSwitchContext+0xa4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800294e:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <vTaskSwitchContext+0xa8>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002954:	e03f      	b.n	80029d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <vTaskSwitchContext+0xa8>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <vTaskSwitchContext+0xac>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800296a:	7afb      	ldrb	r3, [r7, #11]
 800296c:	f1c3 031f 	rsb	r3, r3, #31
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	491f      	ldr	r1, [pc, #124]	; (80029f0 <vTaskSwitchContext+0xb0>)
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	607b      	str	r3, [r7, #4]
}
 8002998:	bf00      	nop
 800299a:	e7fe      	b.n	800299a <vTaskSwitchContext+0x5a>
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <vTaskSwitchContext+0xb0>)
 80029a8:	4413      	add	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	3308      	adds	r3, #8
 80029be:	429a      	cmp	r2, r3
 80029c0:	d104      	bne.n	80029cc <vTaskSwitchContext+0x8c>
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <vTaskSwitchContext+0xb4>)
 80029d4:	6013      	str	r3, [r2, #0]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000460 	.word	0x20000460
 80029e8:	2000044c 	.word	0x2000044c
 80029ec:	20000440 	.word	0x20000440
 80029f0:	2000033c 	.word	0x2000033c
 80029f4:	20000338 	.word	0x20000338

080029f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002a00:	f000 f852 	bl	8002aa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <prvIdleTask+0x28>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d9f9      	bls.n	8002a00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <prvIdleTask+0x2c>)
 8002a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002a1c:	e7f0      	b.n	8002a00 <prvIdleTask+0x8>
 8002a1e:	bf00      	nop
 8002a20:	2000033c 	.word	0x2000033c
 8002a24:	e000ed04 	.word	0xe000ed04

08002a28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	e00c      	b.n	8002a4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <prvInitialiseTaskLists+0x60>)
 8002a40:	4413      	add	r3, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fb3f 	bl	80020c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b06      	cmp	r3, #6
 8002a52:	d9ef      	bls.n	8002a34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a54:	480d      	ldr	r0, [pc, #52]	; (8002a8c <prvInitialiseTaskLists+0x64>)
 8002a56:	f7ff fb36 	bl	80020c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a5a:	480d      	ldr	r0, [pc, #52]	; (8002a90 <prvInitialiseTaskLists+0x68>)
 8002a5c:	f7ff fb33 	bl	80020c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a60:	480c      	ldr	r0, [pc, #48]	; (8002a94 <prvInitialiseTaskLists+0x6c>)
 8002a62:	f7ff fb30 	bl	80020c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a66:	480c      	ldr	r0, [pc, #48]	; (8002a98 <prvInitialiseTaskLists+0x70>)
 8002a68:	f7ff fb2d 	bl	80020c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a6c:	480b      	ldr	r0, [pc, #44]	; (8002a9c <prvInitialiseTaskLists+0x74>)
 8002a6e:	f7ff fb2a 	bl	80020c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <prvInitialiseTaskLists+0x78>)
 8002a74:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <prvInitialiseTaskLists+0x64>)
 8002a76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <prvInitialiseTaskLists+0x7c>)
 8002a7a:	4a05      	ldr	r2, [pc, #20]	; (8002a90 <prvInitialiseTaskLists+0x68>)
 8002a7c:	601a      	str	r2, [r3, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	2000033c 	.word	0x2000033c
 8002a8c:	200003c8 	.word	0x200003c8
 8002a90:	200003dc 	.word	0x200003dc
 8002a94:	200003f8 	.word	0x200003f8
 8002a98:	2000040c 	.word	0x2000040c
 8002a9c:	20000424 	.word	0x20000424
 8002aa0:	200003f0 	.word	0x200003f0
 8002aa4:	200003f4 	.word	0x200003f4

08002aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002aae:	e019      	b.n	8002ae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ab0:	f000 fa08 	bl	8002ec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <prvCheckTasksWaitingTermination+0x50>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fb8a 	bl	80021da <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <prvCheckTasksWaitingTermination+0x54>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <prvCheckTasksWaitingTermination+0x54>)
 8002ace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <prvCheckTasksWaitingTermination+0x58>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <prvCheckTasksWaitingTermination+0x58>)
 8002ad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002ada:	f000 fa23 	bl	8002f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f810 	bl	8002b04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <prvCheckTasksWaitingTermination+0x58>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e1      	bne.n	8002ab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000040c 	.word	0x2000040c
 8002afc:	20000438 	.word	0x20000438
 8002b00:	20000420 	.word	0x20000420

08002b04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d108      	bne.n	8002b28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fb80 	bl	8003220 <vPortFree>
				vPortFree( pxTCB );
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fb7d 	bl	8003220 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b26:	e018      	b.n	8002b5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d103      	bne.n	8002b3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fb74 	bl	8003220 <vPortFree>
	}
 8002b38:	e00f      	b.n	8002b5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d00a      	beq.n	8002b5a <prvDeleteTCB+0x56>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	60fb      	str	r3, [r7, #12]
}
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <prvDeleteTCB+0x54>
	}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <prvResetNextTaskUnblockTime+0x38>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d104      	bne.n	8002b7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8002b76:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002b7c:	e008      	b.n	8002b90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <prvResetNextTaskUnblockTime+0x38>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	200003f0 	.word	0x200003f0
 8002ba0:	20000458 	.word	0x20000458

08002ba4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002bae:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fb0d 	bl	80021da <uxListRemove>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10b      	bne.n	8002bde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	2201      	movs	r2, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002bdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d10a      	bne.n	8002bfc <prvAddCurrentTaskToDelayedList+0x58>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bec:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	481a      	ldr	r0, [pc, #104]	; (8002c60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002bf6:	f7ff fa93 	bl	8002120 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002bfa:	e026      	b.n	8002c4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d209      	bcs.n	8002c28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4610      	mov	r0, r2
 8002c22:	f7ff faa1 	bl	8002168 <vListInsert>
}
 8002c26:	e010      	b.n	8002c4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3304      	adds	r3, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	4610      	mov	r0, r2
 8002c36:	f7ff fa97 	bl	8002168 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d202      	bcs.n	8002c4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002c44:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6013      	str	r3, [r2, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000043c 	.word	0x2000043c
 8002c58:	20000338 	.word	0x20000338
 8002c5c:	20000440 	.word	0x20000440
 8002c60:	20000424 	.word	0x20000424
 8002c64:	200003f4 	.word	0x200003f4
 8002c68:	200003f0 	.word	0x200003f0
 8002c6c:	20000458 	.word	0x20000458

08002c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3b04      	subs	r3, #4
 8002c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3b04      	subs	r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f023 0201 	bic.w	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3b04      	subs	r3, #4
 8002c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <pxPortInitialiseStack+0x64>)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3b14      	subs	r3, #20
 8002caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3b04      	subs	r3, #4
 8002cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f06f 0202 	mvn.w	r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3b20      	subs	r3, #32
 8002cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	08002cd9 	.word	0x08002cd9

08002cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <prvTaskExitError+0x54>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d00a      	beq.n	8002d02 <prvTaskExitError+0x2a>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	60fb      	str	r3, [r7, #12]
}
 8002cfe:	bf00      	nop
 8002d00:	e7fe      	b.n	8002d00 <prvTaskExitError+0x28>
	__asm volatile
 8002d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	60bb      	str	r3, [r7, #8]
}
 8002d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002d16:	bf00      	nop
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0fc      	beq.n	8002d18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002d1e:	bf00      	nop
 8002d20:	bf00      	nop
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	2000000c 	.word	0x2000000c

08002d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <pxCurrentTCBConst2>)
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	6808      	ldr	r0, [r1, #0]
 8002d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d3a:	f380 8809 	msr	PSP, r0
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f04f 0000 	mov.w	r0, #0
 8002d46:	f380 8811 	msr	BASEPRI, r0
 8002d4a:	4770      	bx	lr
 8002d4c:	f3af 8000 	nop.w

08002d50 <pxCurrentTCBConst2>:
 8002d50:	20000338 	.word	0x20000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop

08002d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002d58:	4808      	ldr	r0, [pc, #32]	; (8002d7c <prvPortStartFirstTask+0x24>)
 8002d5a:	6800      	ldr	r0, [r0, #0]
 8002d5c:	6800      	ldr	r0, [r0, #0]
 8002d5e:	f380 8808 	msr	MSP, r0
 8002d62:	f04f 0000 	mov.w	r0, #0
 8002d66:	f380 8814 	msr	CONTROL, r0
 8002d6a:	b662      	cpsie	i
 8002d6c:	b661      	cpsie	f
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	df00      	svc	0
 8002d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d7a:	bf00      	nop
 8002d7c:	e000ed08 	.word	0xe000ed08

08002d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d86:	4b46      	ldr	r3, [pc, #280]	; (8002ea0 <xPortStartScheduler+0x120>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a46      	ldr	r2, [pc, #280]	; (8002ea4 <xPortStartScheduler+0x124>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d10a      	bne.n	8002da6 <xPortStartScheduler+0x26>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	613b      	str	r3, [r7, #16]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002da6:	4b3e      	ldr	r3, [pc, #248]	; (8002ea0 <xPortStartScheduler+0x120>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a3f      	ldr	r2, [pc, #252]	; (8002ea8 <xPortStartScheduler+0x128>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d10a      	bne.n	8002dc6 <xPortStartScheduler+0x46>
	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	60fb      	str	r3, [r7, #12]
}
 8002dc2:	bf00      	nop
 8002dc4:	e7fe      	b.n	8002dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dc6:	4b39      	ldr	r3, [pc, #228]	; (8002eac <xPortStartScheduler+0x12c>)
 8002dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	22ff      	movs	r2, #255	; 0xff
 8002dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <xPortStartScheduler+0x130>)
 8002dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <xPortStartScheduler+0x134>)
 8002df0:	2207      	movs	r2, #7
 8002df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002df4:	e009      	b.n	8002e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <xPortStartScheduler+0x134>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	4a2d      	ldr	r2, [pc, #180]	; (8002eb4 <xPortStartScheduler+0x134>)
 8002dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b80      	cmp	r3, #128	; 0x80
 8002e14:	d0ef      	beq.n	8002df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e16:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <xPortStartScheduler+0x134>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f1c3 0307 	rsb	r3, r3, #7
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d00a      	beq.n	8002e38 <xPortStartScheduler+0xb8>
	__asm volatile
 8002e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	60bb      	str	r3, [r7, #8]
}
 8002e34:	bf00      	nop
 8002e36:	e7fe      	b.n	8002e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <xPortStartScheduler+0x134>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <xPortStartScheduler+0x134>)
 8002e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e42:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <xPortStartScheduler+0x134>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e4a:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <xPortStartScheduler+0x134>)
 8002e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <xPortStartScheduler+0x138>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <xPortStartScheduler+0x138>)
 8002e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <xPortStartScheduler+0x138>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <xPortStartScheduler+0x138>)
 8002e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e6e:	f000 f8dd 	bl	800302c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <xPortStartScheduler+0x13c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002e78:	f000 f8fc 	bl	8003074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <xPortStartScheduler+0x140>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <xPortStartScheduler+0x140>)
 8002e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002e88:	f7ff ff66 	bl	8002d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002e8c:	f7ff fd58 	bl	8002940 <vTaskSwitchContext>
	prvTaskExitError();
 8002e90:	f7ff ff22 	bl	8002cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000ed00 	.word	0xe000ed00
 8002ea4:	410fc271 	.word	0x410fc271
 8002ea8:	410fc270 	.word	0x410fc270
 8002eac:	e000e400 	.word	0xe000e400
 8002eb0:	20000464 	.word	0x20000464
 8002eb4:	20000468 	.word	0x20000468
 8002eb8:	e000ed20 	.word	0xe000ed20
 8002ebc:	2000000c 	.word	0x2000000c
 8002ec0:	e000ef34 	.word	0xe000ef34

08002ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
	__asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	607b      	str	r3, [r7, #4]
}
 8002edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002ede:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <vPortEnterCritical+0x58>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <vPortEnterCritical+0x58>)
 8002ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <vPortEnterCritical+0x58>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10f      	bne.n	8002f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <vPortEnterCritical+0x5c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <vPortEnterCritical+0x4c>
	__asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	603b      	str	r3, [r7, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <vPortEnterCritical+0x4a>
	}
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	2000000c 	.word	0x2000000c
 8002f20:	e000ed04 	.word	0xe000ed04

08002f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <vPortExitCritical+0x50>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <vPortExitCritical+0x24>
	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	607b      	str	r3, [r7, #4]
}
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <vPortExitCritical+0x50>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <vPortExitCritical+0x50>)
 8002f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <vPortExitCritical+0x50>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <vPortExitCritical+0x42>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	2000000c 	.word	0x2000000c
	...

08002f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f80:	f3ef 8009 	mrs	r0, PSP
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <pxCurrentTCBConst>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	f01e 0f10 	tst.w	lr, #16
 8002f90:	bf08      	it	eq
 8002f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f9a:	6010      	str	r0, [r2, #0]
 8002f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002fa4:	f380 8811 	msr	BASEPRI, r0
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f7ff fcc6 	bl	8002940 <vTaskSwitchContext>
 8002fb4:	f04f 0000 	mov.w	r0, #0
 8002fb8:	f380 8811 	msr	BASEPRI, r0
 8002fbc:	bc09      	pop	{r0, r3}
 8002fbe:	6819      	ldr	r1, [r3, #0]
 8002fc0:	6808      	ldr	r0, [r1, #0]
 8002fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc6:	f01e 0f10 	tst.w	lr, #16
 8002fca:	bf08      	it	eq
 8002fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fd0:	f380 8809 	msr	PSP, r0
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	f3af 8000 	nop.w

08002fe0 <pxCurrentTCBConst>:
 8002fe0:	20000338 	.word	0x20000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop

08002fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
	__asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	607b      	str	r3, [r7, #4]
}
 8003000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003002:	f7ff fbe5 	bl	80027d0 <xTaskIncrementTick>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <SysTick_Handler+0x40>)
 800300e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	2300      	movs	r3, #0
 8003016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f383 8811 	msr	BASEPRI, r3
}
 800301e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <vPortSetupTimerInterrupt+0x34>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <vPortSetupTimerInterrupt+0x38>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <vPortSetupTimerInterrupt+0x3c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0a      	ldr	r2, [pc, #40]	; (800306c <vPortSetupTimerInterrupt+0x40>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	4a09      	ldr	r2, [pc, #36]	; (8003070 <vPortSetupTimerInterrupt+0x44>)
 800304a:	3b01      	subs	r3, #1
 800304c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <vPortSetupTimerInterrupt+0x34>)
 8003050:	2207      	movs	r2, #7
 8003052:	601a      	str	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010
 8003064:	e000e018 	.word	0xe000e018
 8003068:	20000000 	.word	0x20000000
 800306c:	10624dd3 	.word	0x10624dd3
 8003070:	e000e014 	.word	0xe000e014

08003074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003084 <vPortEnableVFP+0x10>
 8003078:	6801      	ldr	r1, [r0, #0]
 800307a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800307e:	6001      	str	r1, [r0, #0]
 8003080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003082:	bf00      	nop
 8003084:	e000ed88 	.word	0xe000ed88

08003088 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003094:	f7ff faf2 	bl	800267c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003098:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <pvPortMalloc+0x180>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80030a0:	f000 f920 	bl	80032e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030a4:	4b59      	ldr	r3, [pc, #356]	; (800320c <pvPortMalloc+0x184>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f040 8093 	bne.w	80031d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01d      	beq.n	80030f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80030b8:	2208      	movs	r2, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d014      	beq.n	80030f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f023 0307 	bic.w	r3, r3, #7
 80030d0:	3308      	adds	r3, #8
 80030d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <pvPortMalloc+0x6c>
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	617b      	str	r3, [r7, #20]
}
 80030f0:	bf00      	nop
 80030f2:	e7fe      	b.n	80030f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d06e      	beq.n	80031d8 <pvPortMalloc+0x150>
 80030fa:	4b45      	ldr	r3, [pc, #276]	; (8003210 <pvPortMalloc+0x188>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d869      	bhi.n	80031d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003104:	4b43      	ldr	r3, [pc, #268]	; (8003214 <pvPortMalloc+0x18c>)
 8003106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003108:	4b42      	ldr	r3, [pc, #264]	; (8003214 <pvPortMalloc+0x18c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800310e:	e004      	b.n	800311a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	429a      	cmp	r2, r3
 8003122:	d903      	bls.n	800312c <pvPortMalloc+0xa4>
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f1      	bne.n	8003110 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <pvPortMalloc+0x180>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003132:	429a      	cmp	r2, r3
 8003134:	d050      	beq.n	80031d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2208      	movs	r2, #8
 800313c:	4413      	add	r3, r2
 800313e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	2308      	movs	r3, #8
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	429a      	cmp	r2, r3
 8003156:	d91f      	bls.n	8003198 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <pvPortMalloc+0xf8>
	__asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	613b      	str	r3, [r7, #16]
}
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1ad2      	subs	r2, r2, r3
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003192:	69b8      	ldr	r0, [r7, #24]
 8003194:	f000 f908 	bl	80033a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <pvPortMalloc+0x188>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	4a1b      	ldr	r2, [pc, #108]	; (8003210 <pvPortMalloc+0x188>)
 80031a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031a6:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <pvPortMalloc+0x188>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <pvPortMalloc+0x190>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d203      	bcs.n	80031ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <pvPortMalloc+0x188>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a18      	ldr	r2, [pc, #96]	; (8003218 <pvPortMalloc+0x190>)
 80031b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <pvPortMalloc+0x184>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80031ce:	4b13      	ldr	r3, [pc, #76]	; (800321c <pvPortMalloc+0x194>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	4a11      	ldr	r2, [pc, #68]	; (800321c <pvPortMalloc+0x194>)
 80031d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80031d8:	f7ff fa5e 	bl	8002698 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <pvPortMalloc+0x174>
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	60fb      	str	r3, [r7, #12]
}
 80031f8:	bf00      	nop
 80031fa:	e7fe      	b.n	80031fa <pvPortMalloc+0x172>
	return pvReturn;
 80031fc:	69fb      	ldr	r3, [r7, #28]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3728      	adds	r7, #40	; 0x28
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20004074 	.word	0x20004074
 800320c:	20004088 	.word	0x20004088
 8003210:	20004078 	.word	0x20004078
 8003214:	2000406c 	.word	0x2000406c
 8003218:	2000407c 	.word	0x2000407c
 800321c:	20004080 	.word	0x20004080

08003220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d04d      	beq.n	80032ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003232:	2308      	movs	r3, #8
 8003234:	425b      	negs	r3, r3
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4413      	add	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <vPortFree+0xb8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10a      	bne.n	8003264 <vPortFree+0x44>
	__asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	60fb      	str	r3, [r7, #12]
}
 8003260:	bf00      	nop
 8003262:	e7fe      	b.n	8003262 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <vPortFree+0x62>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	60bb      	str	r3, [r7, #8]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <vPortFree+0xb8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01e      	beq.n	80032ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11a      	bne.n	80032ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <vPortFree+0xb8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	401a      	ands	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80032a8:	f7ff f9e8 	bl	800267c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <vPortFree+0xbc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4413      	add	r3, r2
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <vPortFree+0xbc>)
 80032b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032ba:	6938      	ldr	r0, [r7, #16]
 80032bc:	f000 f874 	bl	80033a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <vPortFree+0xc0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a06      	ldr	r2, [pc, #24]	; (80032e0 <vPortFree+0xc0>)
 80032c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80032ca:	f7ff f9e5 	bl	8002698 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80032ce:	bf00      	nop
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20004088 	.word	0x20004088
 80032dc:	20004078 	.word	0x20004078
 80032e0:	20004084 	.word	0x20004084

080032e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80032ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <prvHeapInit+0xac>)
 80032f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00c      	beq.n	8003318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3307      	adds	r3, #7
 8003302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0307 	bic.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <prvHeapInit+0xac>)
 8003314:	4413      	add	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800331c:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <prvHeapInit+0xb0>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <prvHeapInit+0xb0>)
 8003324:	2200      	movs	r2, #0
 8003326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	4413      	add	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003330:	2208      	movs	r2, #8
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0307 	bic.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a15      	ldr	r2, [pc, #84]	; (8003398 <prvHeapInit+0xb4>)
 8003344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <prvHeapInit+0xb4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <prvHeapInit+0xb4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	1ad2      	subs	r2, r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <prvHeapInit+0xb4>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <prvHeapInit+0xb8>)
 8003372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <prvHeapInit+0xbc>)
 800337a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <prvHeapInit+0xc0>)
 800337e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003382:	601a      	str	r2, [r3, #0]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	2000046c 	.word	0x2000046c
 8003394:	2000406c 	.word	0x2000406c
 8003398:	20004074 	.word	0x20004074
 800339c:	2000407c 	.word	0x2000407c
 80033a0:	20004078 	.word	0x20004078
 80033a4:	20004088 	.word	0x20004088

080033a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <prvInsertBlockIntoFreeList+0xac>)
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e002      	b.n	80033bc <prvInsertBlockIntoFreeList+0x14>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d8f7      	bhi.n	80033b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4413      	add	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d108      	bne.n	80033ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	441a      	add	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	441a      	add	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d118      	bne.n	8003430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <prvInsertBlockIntoFreeList+0xb0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d00d      	beq.n	8003426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	441a      	add	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e008      	b.n	8003438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <prvInsertBlockIntoFreeList+0xb0>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	e003      	b.n	8003438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	d002      	beq.n	8003446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	2000406c 	.word	0x2000406c
 8003458:	20004074 	.word	0x20004074

0800345c <std>:
 800345c:	2300      	movs	r3, #0
 800345e:	b510      	push	{r4, lr}
 8003460:	4604      	mov	r4, r0
 8003462:	e9c0 3300 	strd	r3, r3, [r0]
 8003466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800346a:	6083      	str	r3, [r0, #8]
 800346c:	8181      	strh	r1, [r0, #12]
 800346e:	6643      	str	r3, [r0, #100]	; 0x64
 8003470:	81c2      	strh	r2, [r0, #14]
 8003472:	6183      	str	r3, [r0, #24]
 8003474:	4619      	mov	r1, r3
 8003476:	2208      	movs	r2, #8
 8003478:	305c      	adds	r0, #92	; 0x5c
 800347a:	f000 f9f7 	bl	800386c <memset>
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <std+0x58>)
 8003480:	6263      	str	r3, [r4, #36]	; 0x24
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <std+0x5c>)
 8003484:	62a3      	str	r3, [r4, #40]	; 0x28
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <std+0x60>)
 8003488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800348a:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <std+0x64>)
 800348c:	6323      	str	r3, [r4, #48]	; 0x30
 800348e:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <std+0x68>)
 8003490:	6224      	str	r4, [r4, #32]
 8003492:	429c      	cmp	r4, r3
 8003494:	d006      	beq.n	80034a4 <std+0x48>
 8003496:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800349a:	4294      	cmp	r4, r2
 800349c:	d002      	beq.n	80034a4 <std+0x48>
 800349e:	33d0      	adds	r3, #208	; 0xd0
 80034a0:	429c      	cmp	r4, r3
 80034a2:	d105      	bne.n	80034b0 <std+0x54>
 80034a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ac:	f000 ba56 	b.w	800395c <__retarget_lock_init_recursive>
 80034b0:	bd10      	pop	{r4, pc}
 80034b2:	bf00      	nop
 80034b4:	080036bd 	.word	0x080036bd
 80034b8:	080036df 	.word	0x080036df
 80034bc:	08003717 	.word	0x08003717
 80034c0:	0800373b 	.word	0x0800373b
 80034c4:	2000408c 	.word	0x2000408c

080034c8 <stdio_exit_handler>:
 80034c8:	4a02      	ldr	r2, [pc, #8]	; (80034d4 <stdio_exit_handler+0xc>)
 80034ca:	4903      	ldr	r1, [pc, #12]	; (80034d8 <stdio_exit_handler+0x10>)
 80034cc:	4803      	ldr	r0, [pc, #12]	; (80034dc <stdio_exit_handler+0x14>)
 80034ce:	f000 b869 	b.w	80035a4 <_fwalk_sglue>
 80034d2:	bf00      	nop
 80034d4:	20000010 	.word	0x20000010
 80034d8:	08004209 	.word	0x08004209
 80034dc:	2000001c 	.word	0x2000001c

080034e0 <cleanup_stdio>:
 80034e0:	6841      	ldr	r1, [r0, #4]
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <cleanup_stdio+0x34>)
 80034e4:	4299      	cmp	r1, r3
 80034e6:	b510      	push	{r4, lr}
 80034e8:	4604      	mov	r4, r0
 80034ea:	d001      	beq.n	80034f0 <cleanup_stdio+0x10>
 80034ec:	f000 fe8c 	bl	8004208 <_fflush_r>
 80034f0:	68a1      	ldr	r1, [r4, #8]
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <cleanup_stdio+0x38>)
 80034f4:	4299      	cmp	r1, r3
 80034f6:	d002      	beq.n	80034fe <cleanup_stdio+0x1e>
 80034f8:	4620      	mov	r0, r4
 80034fa:	f000 fe85 	bl	8004208 <_fflush_r>
 80034fe:	68e1      	ldr	r1, [r4, #12]
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <cleanup_stdio+0x3c>)
 8003502:	4299      	cmp	r1, r3
 8003504:	d004      	beq.n	8003510 <cleanup_stdio+0x30>
 8003506:	4620      	mov	r0, r4
 8003508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800350c:	f000 be7c 	b.w	8004208 <_fflush_r>
 8003510:	bd10      	pop	{r4, pc}
 8003512:	bf00      	nop
 8003514:	2000408c 	.word	0x2000408c
 8003518:	200040f4 	.word	0x200040f4
 800351c:	2000415c 	.word	0x2000415c

08003520 <global_stdio_init.part.0>:
 8003520:	b510      	push	{r4, lr}
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <global_stdio_init.part.0+0x30>)
 8003524:	4c0b      	ldr	r4, [pc, #44]	; (8003554 <global_stdio_init.part.0+0x34>)
 8003526:	4a0c      	ldr	r2, [pc, #48]	; (8003558 <global_stdio_init.part.0+0x38>)
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	4620      	mov	r0, r4
 800352c:	2200      	movs	r2, #0
 800352e:	2104      	movs	r1, #4
 8003530:	f7ff ff94 	bl	800345c <std>
 8003534:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003538:	2201      	movs	r2, #1
 800353a:	2109      	movs	r1, #9
 800353c:	f7ff ff8e 	bl	800345c <std>
 8003540:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003544:	2202      	movs	r2, #2
 8003546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800354a:	2112      	movs	r1, #18
 800354c:	f7ff bf86 	b.w	800345c <std>
 8003550:	200041c4 	.word	0x200041c4
 8003554:	2000408c 	.word	0x2000408c
 8003558:	080034c9 	.word	0x080034c9

0800355c <__sfp_lock_acquire>:
 800355c:	4801      	ldr	r0, [pc, #4]	; (8003564 <__sfp_lock_acquire+0x8>)
 800355e:	f000 b9fe 	b.w	800395e <__retarget_lock_acquire_recursive>
 8003562:	bf00      	nop
 8003564:	200041cd 	.word	0x200041cd

08003568 <__sfp_lock_release>:
 8003568:	4801      	ldr	r0, [pc, #4]	; (8003570 <__sfp_lock_release+0x8>)
 800356a:	f000 b9f9 	b.w	8003960 <__retarget_lock_release_recursive>
 800356e:	bf00      	nop
 8003570:	200041cd 	.word	0x200041cd

08003574 <__sinit>:
 8003574:	b510      	push	{r4, lr}
 8003576:	4604      	mov	r4, r0
 8003578:	f7ff fff0 	bl	800355c <__sfp_lock_acquire>
 800357c:	6a23      	ldr	r3, [r4, #32]
 800357e:	b11b      	cbz	r3, 8003588 <__sinit+0x14>
 8003580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003584:	f7ff bff0 	b.w	8003568 <__sfp_lock_release>
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <__sinit+0x28>)
 800358a:	6223      	str	r3, [r4, #32]
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <__sinit+0x2c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f5      	bne.n	8003580 <__sinit+0xc>
 8003594:	f7ff ffc4 	bl	8003520 <global_stdio_init.part.0>
 8003598:	e7f2      	b.n	8003580 <__sinit+0xc>
 800359a:	bf00      	nop
 800359c:	080034e1 	.word	0x080034e1
 80035a0:	200041c4 	.word	0x200041c4

080035a4 <_fwalk_sglue>:
 80035a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035a8:	4607      	mov	r7, r0
 80035aa:	4688      	mov	r8, r1
 80035ac:	4614      	mov	r4, r2
 80035ae:	2600      	movs	r6, #0
 80035b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035b4:	f1b9 0901 	subs.w	r9, r9, #1
 80035b8:	d505      	bpl.n	80035c6 <_fwalk_sglue+0x22>
 80035ba:	6824      	ldr	r4, [r4, #0]
 80035bc:	2c00      	cmp	r4, #0
 80035be:	d1f7      	bne.n	80035b0 <_fwalk_sglue+0xc>
 80035c0:	4630      	mov	r0, r6
 80035c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035c6:	89ab      	ldrh	r3, [r5, #12]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d907      	bls.n	80035dc <_fwalk_sglue+0x38>
 80035cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035d0:	3301      	adds	r3, #1
 80035d2:	d003      	beq.n	80035dc <_fwalk_sglue+0x38>
 80035d4:	4629      	mov	r1, r5
 80035d6:	4638      	mov	r0, r7
 80035d8:	47c0      	blx	r8
 80035da:	4306      	orrs	r6, r0
 80035dc:	3568      	adds	r5, #104	; 0x68
 80035de:	e7e9      	b.n	80035b4 <_fwalk_sglue+0x10>

080035e0 <iprintf>:
 80035e0:	b40f      	push	{r0, r1, r2, r3}
 80035e2:	b507      	push	{r0, r1, r2, lr}
 80035e4:	4906      	ldr	r1, [pc, #24]	; (8003600 <iprintf+0x20>)
 80035e6:	ab04      	add	r3, sp, #16
 80035e8:	6808      	ldr	r0, [r1, #0]
 80035ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80035ee:	6881      	ldr	r1, [r0, #8]
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	f000 fad9 	bl	8003ba8 <_vfiprintf_r>
 80035f6:	b003      	add	sp, #12
 80035f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035fc:	b004      	add	sp, #16
 80035fe:	4770      	bx	lr
 8003600:	20000068 	.word	0x20000068

08003604 <_puts_r>:
 8003604:	6a03      	ldr	r3, [r0, #32]
 8003606:	b570      	push	{r4, r5, r6, lr}
 8003608:	6884      	ldr	r4, [r0, #8]
 800360a:	4605      	mov	r5, r0
 800360c:	460e      	mov	r6, r1
 800360e:	b90b      	cbnz	r3, 8003614 <_puts_r+0x10>
 8003610:	f7ff ffb0 	bl	8003574 <__sinit>
 8003614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003616:	07db      	lsls	r3, r3, #31
 8003618:	d405      	bmi.n	8003626 <_puts_r+0x22>
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	0598      	lsls	r0, r3, #22
 800361e:	d402      	bmi.n	8003626 <_puts_r+0x22>
 8003620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003622:	f000 f99c 	bl	800395e <__retarget_lock_acquire_recursive>
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	0719      	lsls	r1, r3, #28
 800362a:	d513      	bpl.n	8003654 <_puts_r+0x50>
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	b18b      	cbz	r3, 8003654 <_puts_r+0x50>
 8003630:	3e01      	subs	r6, #1
 8003632:	68a3      	ldr	r3, [r4, #8]
 8003634:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003638:	3b01      	subs	r3, #1
 800363a:	60a3      	str	r3, [r4, #8]
 800363c:	b9e9      	cbnz	r1, 800367a <_puts_r+0x76>
 800363e:	2b00      	cmp	r3, #0
 8003640:	da2e      	bge.n	80036a0 <_puts_r+0x9c>
 8003642:	4622      	mov	r2, r4
 8003644:	210a      	movs	r1, #10
 8003646:	4628      	mov	r0, r5
 8003648:	f000 f87b 	bl	8003742 <__swbuf_r>
 800364c:	3001      	adds	r0, #1
 800364e:	d007      	beq.n	8003660 <_puts_r+0x5c>
 8003650:	250a      	movs	r5, #10
 8003652:	e007      	b.n	8003664 <_puts_r+0x60>
 8003654:	4621      	mov	r1, r4
 8003656:	4628      	mov	r0, r5
 8003658:	f000 f8b0 	bl	80037bc <__swsetup_r>
 800365c:	2800      	cmp	r0, #0
 800365e:	d0e7      	beq.n	8003630 <_puts_r+0x2c>
 8003660:	f04f 35ff 	mov.w	r5, #4294967295
 8003664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003666:	07da      	lsls	r2, r3, #31
 8003668:	d405      	bmi.n	8003676 <_puts_r+0x72>
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	059b      	lsls	r3, r3, #22
 800366e:	d402      	bmi.n	8003676 <_puts_r+0x72>
 8003670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003672:	f000 f975 	bl	8003960 <__retarget_lock_release_recursive>
 8003676:	4628      	mov	r0, r5
 8003678:	bd70      	pop	{r4, r5, r6, pc}
 800367a:	2b00      	cmp	r3, #0
 800367c:	da04      	bge.n	8003688 <_puts_r+0x84>
 800367e:	69a2      	ldr	r2, [r4, #24]
 8003680:	429a      	cmp	r2, r3
 8003682:	dc06      	bgt.n	8003692 <_puts_r+0x8e>
 8003684:	290a      	cmp	r1, #10
 8003686:	d004      	beq.n	8003692 <_puts_r+0x8e>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	6022      	str	r2, [r4, #0]
 800368e:	7019      	strb	r1, [r3, #0]
 8003690:	e7cf      	b.n	8003632 <_puts_r+0x2e>
 8003692:	4622      	mov	r2, r4
 8003694:	4628      	mov	r0, r5
 8003696:	f000 f854 	bl	8003742 <__swbuf_r>
 800369a:	3001      	adds	r0, #1
 800369c:	d1c9      	bne.n	8003632 <_puts_r+0x2e>
 800369e:	e7df      	b.n	8003660 <_puts_r+0x5c>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	250a      	movs	r5, #10
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	6022      	str	r2, [r4, #0]
 80036a8:	701d      	strb	r5, [r3, #0]
 80036aa:	e7db      	b.n	8003664 <_puts_r+0x60>

080036ac <puts>:
 80036ac:	4b02      	ldr	r3, [pc, #8]	; (80036b8 <puts+0xc>)
 80036ae:	4601      	mov	r1, r0
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	f7ff bfa7 	b.w	8003604 <_puts_r>
 80036b6:	bf00      	nop
 80036b8:	20000068 	.word	0x20000068

080036bc <__sread>:
 80036bc:	b510      	push	{r4, lr}
 80036be:	460c      	mov	r4, r1
 80036c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c4:	f000 f8fc 	bl	80038c0 <_read_r>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	bfab      	itete	ge
 80036cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036ce:	89a3      	ldrhlt	r3, [r4, #12]
 80036d0:	181b      	addge	r3, r3, r0
 80036d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036d6:	bfac      	ite	ge
 80036d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80036da:	81a3      	strhlt	r3, [r4, #12]
 80036dc:	bd10      	pop	{r4, pc}

080036de <__swrite>:
 80036de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e2:	461f      	mov	r7, r3
 80036e4:	898b      	ldrh	r3, [r1, #12]
 80036e6:	05db      	lsls	r3, r3, #23
 80036e8:	4605      	mov	r5, r0
 80036ea:	460c      	mov	r4, r1
 80036ec:	4616      	mov	r6, r2
 80036ee:	d505      	bpl.n	80036fc <__swrite+0x1e>
 80036f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f4:	2302      	movs	r3, #2
 80036f6:	2200      	movs	r2, #0
 80036f8:	f000 f8d0 	bl	800389c <_lseek_r>
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003706:	81a3      	strh	r3, [r4, #12]
 8003708:	4632      	mov	r2, r6
 800370a:	463b      	mov	r3, r7
 800370c:	4628      	mov	r0, r5
 800370e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003712:	f000 b8e7 	b.w	80038e4 <_write_r>

08003716 <__sseek>:
 8003716:	b510      	push	{r4, lr}
 8003718:	460c      	mov	r4, r1
 800371a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800371e:	f000 f8bd 	bl	800389c <_lseek_r>
 8003722:	1c43      	adds	r3, r0, #1
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	bf15      	itete	ne
 8003728:	6560      	strne	r0, [r4, #84]	; 0x54
 800372a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800372e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003732:	81a3      	strheq	r3, [r4, #12]
 8003734:	bf18      	it	ne
 8003736:	81a3      	strhne	r3, [r4, #12]
 8003738:	bd10      	pop	{r4, pc}

0800373a <__sclose>:
 800373a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800373e:	f000 b89d 	b.w	800387c <_close_r>

08003742 <__swbuf_r>:
 8003742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003744:	460e      	mov	r6, r1
 8003746:	4614      	mov	r4, r2
 8003748:	4605      	mov	r5, r0
 800374a:	b118      	cbz	r0, 8003754 <__swbuf_r+0x12>
 800374c:	6a03      	ldr	r3, [r0, #32]
 800374e:	b90b      	cbnz	r3, 8003754 <__swbuf_r+0x12>
 8003750:	f7ff ff10 	bl	8003574 <__sinit>
 8003754:	69a3      	ldr	r3, [r4, #24]
 8003756:	60a3      	str	r3, [r4, #8]
 8003758:	89a3      	ldrh	r3, [r4, #12]
 800375a:	071a      	lsls	r2, r3, #28
 800375c:	d525      	bpl.n	80037aa <__swbuf_r+0x68>
 800375e:	6923      	ldr	r3, [r4, #16]
 8003760:	b31b      	cbz	r3, 80037aa <__swbuf_r+0x68>
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	6922      	ldr	r2, [r4, #16]
 8003766:	1a98      	subs	r0, r3, r2
 8003768:	6963      	ldr	r3, [r4, #20]
 800376a:	b2f6      	uxtb	r6, r6
 800376c:	4283      	cmp	r3, r0
 800376e:	4637      	mov	r7, r6
 8003770:	dc04      	bgt.n	800377c <__swbuf_r+0x3a>
 8003772:	4621      	mov	r1, r4
 8003774:	4628      	mov	r0, r5
 8003776:	f000 fd47 	bl	8004208 <_fflush_r>
 800377a:	b9e0      	cbnz	r0, 80037b6 <__swbuf_r+0x74>
 800377c:	68a3      	ldr	r3, [r4, #8]
 800377e:	3b01      	subs	r3, #1
 8003780:	60a3      	str	r3, [r4, #8]
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	6022      	str	r2, [r4, #0]
 8003788:	701e      	strb	r6, [r3, #0]
 800378a:	6962      	ldr	r2, [r4, #20]
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	429a      	cmp	r2, r3
 8003790:	d004      	beq.n	800379c <__swbuf_r+0x5a>
 8003792:	89a3      	ldrh	r3, [r4, #12]
 8003794:	07db      	lsls	r3, r3, #31
 8003796:	d506      	bpl.n	80037a6 <__swbuf_r+0x64>
 8003798:	2e0a      	cmp	r6, #10
 800379a:	d104      	bne.n	80037a6 <__swbuf_r+0x64>
 800379c:	4621      	mov	r1, r4
 800379e:	4628      	mov	r0, r5
 80037a0:	f000 fd32 	bl	8004208 <_fflush_r>
 80037a4:	b938      	cbnz	r0, 80037b6 <__swbuf_r+0x74>
 80037a6:	4638      	mov	r0, r7
 80037a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037aa:	4621      	mov	r1, r4
 80037ac:	4628      	mov	r0, r5
 80037ae:	f000 f805 	bl	80037bc <__swsetup_r>
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d0d5      	beq.n	8003762 <__swbuf_r+0x20>
 80037b6:	f04f 37ff 	mov.w	r7, #4294967295
 80037ba:	e7f4      	b.n	80037a6 <__swbuf_r+0x64>

080037bc <__swsetup_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <__swsetup_r+0xac>)
 80037c0:	4605      	mov	r5, r0
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	460c      	mov	r4, r1
 80037c6:	b118      	cbz	r0, 80037d0 <__swsetup_r+0x14>
 80037c8:	6a03      	ldr	r3, [r0, #32]
 80037ca:	b90b      	cbnz	r3, 80037d0 <__swsetup_r+0x14>
 80037cc:	f7ff fed2 	bl	8003574 <__sinit>
 80037d0:	89a3      	ldrh	r3, [r4, #12]
 80037d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037d6:	0718      	lsls	r0, r3, #28
 80037d8:	d422      	bmi.n	8003820 <__swsetup_r+0x64>
 80037da:	06d9      	lsls	r1, r3, #27
 80037dc:	d407      	bmi.n	80037ee <__swsetup_r+0x32>
 80037de:	2309      	movs	r3, #9
 80037e0:	602b      	str	r3, [r5, #0]
 80037e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037e6:	81a3      	strh	r3, [r4, #12]
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	e034      	b.n	8003858 <__swsetup_r+0x9c>
 80037ee:	0758      	lsls	r0, r3, #29
 80037f0:	d512      	bpl.n	8003818 <__swsetup_r+0x5c>
 80037f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037f4:	b141      	cbz	r1, 8003808 <__swsetup_r+0x4c>
 80037f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037fa:	4299      	cmp	r1, r3
 80037fc:	d002      	beq.n	8003804 <__swsetup_r+0x48>
 80037fe:	4628      	mov	r0, r5
 8003800:	f000 f8b0 	bl	8003964 <_free_r>
 8003804:	2300      	movs	r3, #0
 8003806:	6363      	str	r3, [r4, #52]	; 0x34
 8003808:	89a3      	ldrh	r3, [r4, #12]
 800380a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800380e:	81a3      	strh	r3, [r4, #12]
 8003810:	2300      	movs	r3, #0
 8003812:	6063      	str	r3, [r4, #4]
 8003814:	6923      	ldr	r3, [r4, #16]
 8003816:	6023      	str	r3, [r4, #0]
 8003818:	89a3      	ldrh	r3, [r4, #12]
 800381a:	f043 0308 	orr.w	r3, r3, #8
 800381e:	81a3      	strh	r3, [r4, #12]
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	b94b      	cbnz	r3, 8003838 <__swsetup_r+0x7c>
 8003824:	89a3      	ldrh	r3, [r4, #12]
 8003826:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800382a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382e:	d003      	beq.n	8003838 <__swsetup_r+0x7c>
 8003830:	4621      	mov	r1, r4
 8003832:	4628      	mov	r0, r5
 8003834:	f000 fd36 	bl	80042a4 <__smakebuf_r>
 8003838:	89a0      	ldrh	r0, [r4, #12]
 800383a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800383e:	f010 0301 	ands.w	r3, r0, #1
 8003842:	d00a      	beq.n	800385a <__swsetup_r+0x9e>
 8003844:	2300      	movs	r3, #0
 8003846:	60a3      	str	r3, [r4, #8]
 8003848:	6963      	ldr	r3, [r4, #20]
 800384a:	425b      	negs	r3, r3
 800384c:	61a3      	str	r3, [r4, #24]
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	b943      	cbnz	r3, 8003864 <__swsetup_r+0xa8>
 8003852:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003856:	d1c4      	bne.n	80037e2 <__swsetup_r+0x26>
 8003858:	bd38      	pop	{r3, r4, r5, pc}
 800385a:	0781      	lsls	r1, r0, #30
 800385c:	bf58      	it	pl
 800385e:	6963      	ldrpl	r3, [r4, #20]
 8003860:	60a3      	str	r3, [r4, #8]
 8003862:	e7f4      	b.n	800384e <__swsetup_r+0x92>
 8003864:	2000      	movs	r0, #0
 8003866:	e7f7      	b.n	8003858 <__swsetup_r+0x9c>
 8003868:	20000068 	.word	0x20000068

0800386c <memset>:
 800386c:	4402      	add	r2, r0
 800386e:	4603      	mov	r3, r0
 8003870:	4293      	cmp	r3, r2
 8003872:	d100      	bne.n	8003876 <memset+0xa>
 8003874:	4770      	bx	lr
 8003876:	f803 1b01 	strb.w	r1, [r3], #1
 800387a:	e7f9      	b.n	8003870 <memset+0x4>

0800387c <_close_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4d06      	ldr	r5, [pc, #24]	; (8003898 <_close_r+0x1c>)
 8003880:	2300      	movs	r3, #0
 8003882:	4604      	mov	r4, r0
 8003884:	4608      	mov	r0, r1
 8003886:	602b      	str	r3, [r5, #0]
 8003888:	f7fd f8df 	bl	8000a4a <_close>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_close_r+0x1a>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_close_r+0x1a>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	200041c8 	.word	0x200041c8

0800389c <_lseek_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4d07      	ldr	r5, [pc, #28]	; (80038bc <_lseek_r+0x20>)
 80038a0:	4604      	mov	r4, r0
 80038a2:	4608      	mov	r0, r1
 80038a4:	4611      	mov	r1, r2
 80038a6:	2200      	movs	r2, #0
 80038a8:	602a      	str	r2, [r5, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f7fd f8f4 	bl	8000a98 <_lseek>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	d102      	bne.n	80038ba <_lseek_r+0x1e>
 80038b4:	682b      	ldr	r3, [r5, #0]
 80038b6:	b103      	cbz	r3, 80038ba <_lseek_r+0x1e>
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	200041c8 	.word	0x200041c8

080038c0 <_read_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d07      	ldr	r5, [pc, #28]	; (80038e0 <_read_r+0x20>)
 80038c4:	4604      	mov	r4, r0
 80038c6:	4608      	mov	r0, r1
 80038c8:	4611      	mov	r1, r2
 80038ca:	2200      	movs	r2, #0
 80038cc:	602a      	str	r2, [r5, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f7fd f89e 	bl	8000a10 <_read>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d102      	bne.n	80038de <_read_r+0x1e>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	b103      	cbz	r3, 80038de <_read_r+0x1e>
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	bd38      	pop	{r3, r4, r5, pc}
 80038e0:	200041c8 	.word	0x200041c8

080038e4 <_write_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4d07      	ldr	r5, [pc, #28]	; (8003904 <_write_r+0x20>)
 80038e8:	4604      	mov	r4, r0
 80038ea:	4608      	mov	r0, r1
 80038ec:	4611      	mov	r1, r2
 80038ee:	2200      	movs	r2, #0
 80038f0:	602a      	str	r2, [r5, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f7fc fe7b 	bl	80005ee <_write>
 80038f8:	1c43      	adds	r3, r0, #1
 80038fa:	d102      	bne.n	8003902 <_write_r+0x1e>
 80038fc:	682b      	ldr	r3, [r5, #0]
 80038fe:	b103      	cbz	r3, 8003902 <_write_r+0x1e>
 8003900:	6023      	str	r3, [r4, #0]
 8003902:	bd38      	pop	{r3, r4, r5, pc}
 8003904:	200041c8 	.word	0x200041c8

08003908 <__errno>:
 8003908:	4b01      	ldr	r3, [pc, #4]	; (8003910 <__errno+0x8>)
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000068 	.word	0x20000068

08003914 <__libc_init_array>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4d0d      	ldr	r5, [pc, #52]	; (800394c <__libc_init_array+0x38>)
 8003918:	4c0d      	ldr	r4, [pc, #52]	; (8003950 <__libc_init_array+0x3c>)
 800391a:	1b64      	subs	r4, r4, r5
 800391c:	10a4      	asrs	r4, r4, #2
 800391e:	2600      	movs	r6, #0
 8003920:	42a6      	cmp	r6, r4
 8003922:	d109      	bne.n	8003938 <__libc_init_array+0x24>
 8003924:	4d0b      	ldr	r5, [pc, #44]	; (8003954 <__libc_init_array+0x40>)
 8003926:	4c0c      	ldr	r4, [pc, #48]	; (8003958 <__libc_init_array+0x44>)
 8003928:	f000 fd2a 	bl	8004380 <_init>
 800392c:	1b64      	subs	r4, r4, r5
 800392e:	10a4      	asrs	r4, r4, #2
 8003930:	2600      	movs	r6, #0
 8003932:	42a6      	cmp	r6, r4
 8003934:	d105      	bne.n	8003942 <__libc_init_array+0x2e>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	f855 3b04 	ldr.w	r3, [r5], #4
 800393c:	4798      	blx	r3
 800393e:	3601      	adds	r6, #1
 8003940:	e7ee      	b.n	8003920 <__libc_init_array+0xc>
 8003942:	f855 3b04 	ldr.w	r3, [r5], #4
 8003946:	4798      	blx	r3
 8003948:	3601      	adds	r6, #1
 800394a:	e7f2      	b.n	8003932 <__libc_init_array+0x1e>
 800394c:	08004470 	.word	0x08004470
 8003950:	08004470 	.word	0x08004470
 8003954:	08004470 	.word	0x08004470
 8003958:	08004474 	.word	0x08004474

0800395c <__retarget_lock_init_recursive>:
 800395c:	4770      	bx	lr

0800395e <__retarget_lock_acquire_recursive>:
 800395e:	4770      	bx	lr

08003960 <__retarget_lock_release_recursive>:
 8003960:	4770      	bx	lr
	...

08003964 <_free_r>:
 8003964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003966:	2900      	cmp	r1, #0
 8003968:	d044      	beq.n	80039f4 <_free_r+0x90>
 800396a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800396e:	9001      	str	r0, [sp, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f1a1 0404 	sub.w	r4, r1, #4
 8003976:	bfb8      	it	lt
 8003978:	18e4      	addlt	r4, r4, r3
 800397a:	f000 f8df 	bl	8003b3c <__malloc_lock>
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <_free_r+0x94>)
 8003980:	9801      	ldr	r0, [sp, #4]
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	b933      	cbnz	r3, 8003994 <_free_r+0x30>
 8003986:	6063      	str	r3, [r4, #4]
 8003988:	6014      	str	r4, [r2, #0]
 800398a:	b003      	add	sp, #12
 800398c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003990:	f000 b8da 	b.w	8003b48 <__malloc_unlock>
 8003994:	42a3      	cmp	r3, r4
 8003996:	d908      	bls.n	80039aa <_free_r+0x46>
 8003998:	6825      	ldr	r5, [r4, #0]
 800399a:	1961      	adds	r1, r4, r5
 800399c:	428b      	cmp	r3, r1
 800399e:	bf01      	itttt	eq
 80039a0:	6819      	ldreq	r1, [r3, #0]
 80039a2:	685b      	ldreq	r3, [r3, #4]
 80039a4:	1949      	addeq	r1, r1, r5
 80039a6:	6021      	streq	r1, [r4, #0]
 80039a8:	e7ed      	b.n	8003986 <_free_r+0x22>
 80039aa:	461a      	mov	r2, r3
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b10b      	cbz	r3, 80039b4 <_free_r+0x50>
 80039b0:	42a3      	cmp	r3, r4
 80039b2:	d9fa      	bls.n	80039aa <_free_r+0x46>
 80039b4:	6811      	ldr	r1, [r2, #0]
 80039b6:	1855      	adds	r5, r2, r1
 80039b8:	42a5      	cmp	r5, r4
 80039ba:	d10b      	bne.n	80039d4 <_free_r+0x70>
 80039bc:	6824      	ldr	r4, [r4, #0]
 80039be:	4421      	add	r1, r4
 80039c0:	1854      	adds	r4, r2, r1
 80039c2:	42a3      	cmp	r3, r4
 80039c4:	6011      	str	r1, [r2, #0]
 80039c6:	d1e0      	bne.n	800398a <_free_r+0x26>
 80039c8:	681c      	ldr	r4, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	6053      	str	r3, [r2, #4]
 80039ce:	440c      	add	r4, r1
 80039d0:	6014      	str	r4, [r2, #0]
 80039d2:	e7da      	b.n	800398a <_free_r+0x26>
 80039d4:	d902      	bls.n	80039dc <_free_r+0x78>
 80039d6:	230c      	movs	r3, #12
 80039d8:	6003      	str	r3, [r0, #0]
 80039da:	e7d6      	b.n	800398a <_free_r+0x26>
 80039dc:	6825      	ldr	r5, [r4, #0]
 80039de:	1961      	adds	r1, r4, r5
 80039e0:	428b      	cmp	r3, r1
 80039e2:	bf04      	itt	eq
 80039e4:	6819      	ldreq	r1, [r3, #0]
 80039e6:	685b      	ldreq	r3, [r3, #4]
 80039e8:	6063      	str	r3, [r4, #4]
 80039ea:	bf04      	itt	eq
 80039ec:	1949      	addeq	r1, r1, r5
 80039ee:	6021      	streq	r1, [r4, #0]
 80039f0:	6054      	str	r4, [r2, #4]
 80039f2:	e7ca      	b.n	800398a <_free_r+0x26>
 80039f4:	b003      	add	sp, #12
 80039f6:	bd30      	pop	{r4, r5, pc}
 80039f8:	200041d0 	.word	0x200041d0

080039fc <sbrk_aligned>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4e0e      	ldr	r6, [pc, #56]	; (8003a38 <sbrk_aligned+0x3c>)
 8003a00:	460c      	mov	r4, r1
 8003a02:	6831      	ldr	r1, [r6, #0]
 8003a04:	4605      	mov	r5, r0
 8003a06:	b911      	cbnz	r1, 8003a0e <sbrk_aligned+0x12>
 8003a08:	f000 fcaa 	bl	8004360 <_sbrk_r>
 8003a0c:	6030      	str	r0, [r6, #0]
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	f000 fca5 	bl	8004360 <_sbrk_r>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	d00a      	beq.n	8003a30 <sbrk_aligned+0x34>
 8003a1a:	1cc4      	adds	r4, r0, #3
 8003a1c:	f024 0403 	bic.w	r4, r4, #3
 8003a20:	42a0      	cmp	r0, r4
 8003a22:	d007      	beq.n	8003a34 <sbrk_aligned+0x38>
 8003a24:	1a21      	subs	r1, r4, r0
 8003a26:	4628      	mov	r0, r5
 8003a28:	f000 fc9a 	bl	8004360 <_sbrk_r>
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	d101      	bne.n	8003a34 <sbrk_aligned+0x38>
 8003a30:	f04f 34ff 	mov.w	r4, #4294967295
 8003a34:	4620      	mov	r0, r4
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	200041d4 	.word	0x200041d4

08003a3c <_malloc_r>:
 8003a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a40:	1ccd      	adds	r5, r1, #3
 8003a42:	f025 0503 	bic.w	r5, r5, #3
 8003a46:	3508      	adds	r5, #8
 8003a48:	2d0c      	cmp	r5, #12
 8003a4a:	bf38      	it	cc
 8003a4c:	250c      	movcc	r5, #12
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	4607      	mov	r7, r0
 8003a52:	db01      	blt.n	8003a58 <_malloc_r+0x1c>
 8003a54:	42a9      	cmp	r1, r5
 8003a56:	d905      	bls.n	8003a64 <_malloc_r+0x28>
 8003a58:	230c      	movs	r3, #12
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b38 <_malloc_r+0xfc>
 8003a68:	f000 f868 	bl	8003b3c <__malloc_lock>
 8003a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a70:	461c      	mov	r4, r3
 8003a72:	bb5c      	cbnz	r4, 8003acc <_malloc_r+0x90>
 8003a74:	4629      	mov	r1, r5
 8003a76:	4638      	mov	r0, r7
 8003a78:	f7ff ffc0 	bl	80039fc <sbrk_aligned>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	4604      	mov	r4, r0
 8003a80:	d155      	bne.n	8003b2e <_malloc_r+0xf2>
 8003a82:	f8d8 4000 	ldr.w	r4, [r8]
 8003a86:	4626      	mov	r6, r4
 8003a88:	2e00      	cmp	r6, #0
 8003a8a:	d145      	bne.n	8003b18 <_malloc_r+0xdc>
 8003a8c:	2c00      	cmp	r4, #0
 8003a8e:	d048      	beq.n	8003b22 <_malloc_r+0xe6>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	4631      	mov	r1, r6
 8003a94:	4638      	mov	r0, r7
 8003a96:	eb04 0903 	add.w	r9, r4, r3
 8003a9a:	f000 fc61 	bl	8004360 <_sbrk_r>
 8003a9e:	4581      	cmp	r9, r0
 8003aa0:	d13f      	bne.n	8003b22 <_malloc_r+0xe6>
 8003aa2:	6821      	ldr	r1, [r4, #0]
 8003aa4:	1a6d      	subs	r5, r5, r1
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	f7ff ffa7 	bl	80039fc <sbrk_aligned>
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d037      	beq.n	8003b22 <_malloc_r+0xe6>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	442b      	add	r3, r5
 8003ab6:	6023      	str	r3, [r4, #0]
 8003ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d038      	beq.n	8003b32 <_malloc_r+0xf6>
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	42a2      	cmp	r2, r4
 8003ac4:	d12b      	bne.n	8003b1e <_malloc_r+0xe2>
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	e00f      	b.n	8003aec <_malloc_r+0xb0>
 8003acc:	6822      	ldr	r2, [r4, #0]
 8003ace:	1b52      	subs	r2, r2, r5
 8003ad0:	d41f      	bmi.n	8003b12 <_malloc_r+0xd6>
 8003ad2:	2a0b      	cmp	r2, #11
 8003ad4:	d917      	bls.n	8003b06 <_malloc_r+0xca>
 8003ad6:	1961      	adds	r1, r4, r5
 8003ad8:	42a3      	cmp	r3, r4
 8003ada:	6025      	str	r5, [r4, #0]
 8003adc:	bf18      	it	ne
 8003ade:	6059      	strne	r1, [r3, #4]
 8003ae0:	6863      	ldr	r3, [r4, #4]
 8003ae2:	bf08      	it	eq
 8003ae4:	f8c8 1000 	streq.w	r1, [r8]
 8003ae8:	5162      	str	r2, [r4, r5]
 8003aea:	604b      	str	r3, [r1, #4]
 8003aec:	4638      	mov	r0, r7
 8003aee:	f104 060b 	add.w	r6, r4, #11
 8003af2:	f000 f829 	bl	8003b48 <__malloc_unlock>
 8003af6:	f026 0607 	bic.w	r6, r6, #7
 8003afa:	1d23      	adds	r3, r4, #4
 8003afc:	1af2      	subs	r2, r6, r3
 8003afe:	d0ae      	beq.n	8003a5e <_malloc_r+0x22>
 8003b00:	1b9b      	subs	r3, r3, r6
 8003b02:	50a3      	str	r3, [r4, r2]
 8003b04:	e7ab      	b.n	8003a5e <_malloc_r+0x22>
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	6862      	ldr	r2, [r4, #4]
 8003b0a:	d1dd      	bne.n	8003ac8 <_malloc_r+0x8c>
 8003b0c:	f8c8 2000 	str.w	r2, [r8]
 8003b10:	e7ec      	b.n	8003aec <_malloc_r+0xb0>
 8003b12:	4623      	mov	r3, r4
 8003b14:	6864      	ldr	r4, [r4, #4]
 8003b16:	e7ac      	b.n	8003a72 <_malloc_r+0x36>
 8003b18:	4634      	mov	r4, r6
 8003b1a:	6876      	ldr	r6, [r6, #4]
 8003b1c:	e7b4      	b.n	8003a88 <_malloc_r+0x4c>
 8003b1e:	4613      	mov	r3, r2
 8003b20:	e7cc      	b.n	8003abc <_malloc_r+0x80>
 8003b22:	230c      	movs	r3, #12
 8003b24:	603b      	str	r3, [r7, #0]
 8003b26:	4638      	mov	r0, r7
 8003b28:	f000 f80e 	bl	8003b48 <__malloc_unlock>
 8003b2c:	e797      	b.n	8003a5e <_malloc_r+0x22>
 8003b2e:	6025      	str	r5, [r4, #0]
 8003b30:	e7dc      	b.n	8003aec <_malloc_r+0xb0>
 8003b32:	605b      	str	r3, [r3, #4]
 8003b34:	deff      	udf	#255	; 0xff
 8003b36:	bf00      	nop
 8003b38:	200041d0 	.word	0x200041d0

08003b3c <__malloc_lock>:
 8003b3c:	4801      	ldr	r0, [pc, #4]	; (8003b44 <__malloc_lock+0x8>)
 8003b3e:	f7ff bf0e 	b.w	800395e <__retarget_lock_acquire_recursive>
 8003b42:	bf00      	nop
 8003b44:	200041cc 	.word	0x200041cc

08003b48 <__malloc_unlock>:
 8003b48:	4801      	ldr	r0, [pc, #4]	; (8003b50 <__malloc_unlock+0x8>)
 8003b4a:	f7ff bf09 	b.w	8003960 <__retarget_lock_release_recursive>
 8003b4e:	bf00      	nop
 8003b50:	200041cc 	.word	0x200041cc

08003b54 <__sfputc_r>:
 8003b54:	6893      	ldr	r3, [r2, #8]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	b410      	push	{r4}
 8003b5c:	6093      	str	r3, [r2, #8]
 8003b5e:	da08      	bge.n	8003b72 <__sfputc_r+0x1e>
 8003b60:	6994      	ldr	r4, [r2, #24]
 8003b62:	42a3      	cmp	r3, r4
 8003b64:	db01      	blt.n	8003b6a <__sfputc_r+0x16>
 8003b66:	290a      	cmp	r1, #10
 8003b68:	d103      	bne.n	8003b72 <__sfputc_r+0x1e>
 8003b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b6e:	f7ff bde8 	b.w	8003742 <__swbuf_r>
 8003b72:	6813      	ldr	r3, [r2, #0]
 8003b74:	1c58      	adds	r0, r3, #1
 8003b76:	6010      	str	r0, [r2, #0]
 8003b78:	7019      	strb	r1, [r3, #0]
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <__sfputs_r>:
 8003b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b84:	4606      	mov	r6, r0
 8003b86:	460f      	mov	r7, r1
 8003b88:	4614      	mov	r4, r2
 8003b8a:	18d5      	adds	r5, r2, r3
 8003b8c:	42ac      	cmp	r4, r5
 8003b8e:	d101      	bne.n	8003b94 <__sfputs_r+0x12>
 8003b90:	2000      	movs	r0, #0
 8003b92:	e007      	b.n	8003ba4 <__sfputs_r+0x22>
 8003b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b98:	463a      	mov	r2, r7
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f7ff ffda 	bl	8003b54 <__sfputc_r>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d1f3      	bne.n	8003b8c <__sfputs_r+0xa>
 8003ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ba8 <_vfiprintf_r>:
 8003ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bac:	460d      	mov	r5, r1
 8003bae:	b09d      	sub	sp, #116	; 0x74
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	4698      	mov	r8, r3
 8003bb4:	4606      	mov	r6, r0
 8003bb6:	b118      	cbz	r0, 8003bc0 <_vfiprintf_r+0x18>
 8003bb8:	6a03      	ldr	r3, [r0, #32]
 8003bba:	b90b      	cbnz	r3, 8003bc0 <_vfiprintf_r+0x18>
 8003bbc:	f7ff fcda 	bl	8003574 <__sinit>
 8003bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bc2:	07d9      	lsls	r1, r3, #31
 8003bc4:	d405      	bmi.n	8003bd2 <_vfiprintf_r+0x2a>
 8003bc6:	89ab      	ldrh	r3, [r5, #12]
 8003bc8:	059a      	lsls	r2, r3, #22
 8003bca:	d402      	bmi.n	8003bd2 <_vfiprintf_r+0x2a>
 8003bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bce:	f7ff fec6 	bl	800395e <__retarget_lock_acquire_recursive>
 8003bd2:	89ab      	ldrh	r3, [r5, #12]
 8003bd4:	071b      	lsls	r3, r3, #28
 8003bd6:	d501      	bpl.n	8003bdc <_vfiprintf_r+0x34>
 8003bd8:	692b      	ldr	r3, [r5, #16]
 8003bda:	b99b      	cbnz	r3, 8003c04 <_vfiprintf_r+0x5c>
 8003bdc:	4629      	mov	r1, r5
 8003bde:	4630      	mov	r0, r6
 8003be0:	f7ff fdec 	bl	80037bc <__swsetup_r>
 8003be4:	b170      	cbz	r0, 8003c04 <_vfiprintf_r+0x5c>
 8003be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003be8:	07dc      	lsls	r4, r3, #31
 8003bea:	d504      	bpl.n	8003bf6 <_vfiprintf_r+0x4e>
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	b01d      	add	sp, #116	; 0x74
 8003bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf6:	89ab      	ldrh	r3, [r5, #12]
 8003bf8:	0598      	lsls	r0, r3, #22
 8003bfa:	d4f7      	bmi.n	8003bec <_vfiprintf_r+0x44>
 8003bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bfe:	f7ff feaf 	bl	8003960 <__retarget_lock_release_recursive>
 8003c02:	e7f3      	b.n	8003bec <_vfiprintf_r+0x44>
 8003c04:	2300      	movs	r3, #0
 8003c06:	9309      	str	r3, [sp, #36]	; 0x24
 8003c08:	2320      	movs	r3, #32
 8003c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c12:	2330      	movs	r3, #48	; 0x30
 8003c14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003dc8 <_vfiprintf_r+0x220>
 8003c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c1c:	f04f 0901 	mov.w	r9, #1
 8003c20:	4623      	mov	r3, r4
 8003c22:	469a      	mov	sl, r3
 8003c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c28:	b10a      	cbz	r2, 8003c2e <_vfiprintf_r+0x86>
 8003c2a:	2a25      	cmp	r2, #37	; 0x25
 8003c2c:	d1f9      	bne.n	8003c22 <_vfiprintf_r+0x7a>
 8003c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8003c32:	d00b      	beq.n	8003c4c <_vfiprintf_r+0xa4>
 8003c34:	465b      	mov	r3, fp
 8003c36:	4622      	mov	r2, r4
 8003c38:	4629      	mov	r1, r5
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	f7ff ffa1 	bl	8003b82 <__sfputs_r>
 8003c40:	3001      	adds	r0, #1
 8003c42:	f000 80a9 	beq.w	8003d98 <_vfiprintf_r+0x1f0>
 8003c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c48:	445a      	add	r2, fp
 8003c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8003c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a1 	beq.w	8003d98 <_vfiprintf_r+0x1f0>
 8003c56:	2300      	movs	r3, #0
 8003c58:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c60:	f10a 0a01 	add.w	sl, sl, #1
 8003c64:	9304      	str	r3, [sp, #16]
 8003c66:	9307      	str	r3, [sp, #28]
 8003c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8003c6e:	4654      	mov	r4, sl
 8003c70:	2205      	movs	r2, #5
 8003c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c76:	4854      	ldr	r0, [pc, #336]	; (8003dc8 <_vfiprintf_r+0x220>)
 8003c78:	f7fc faaa 	bl	80001d0 <memchr>
 8003c7c:	9a04      	ldr	r2, [sp, #16]
 8003c7e:	b9d8      	cbnz	r0, 8003cb8 <_vfiprintf_r+0x110>
 8003c80:	06d1      	lsls	r1, r2, #27
 8003c82:	bf44      	itt	mi
 8003c84:	2320      	movmi	r3, #32
 8003c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c8a:	0713      	lsls	r3, r2, #28
 8003c8c:	bf44      	itt	mi
 8003c8e:	232b      	movmi	r3, #43	; 0x2b
 8003c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c94:	f89a 3000 	ldrb.w	r3, [sl]
 8003c98:	2b2a      	cmp	r3, #42	; 0x2a
 8003c9a:	d015      	beq.n	8003cc8 <_vfiprintf_r+0x120>
 8003c9c:	9a07      	ldr	r2, [sp, #28]
 8003c9e:	4654      	mov	r4, sl
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f04f 0c0a 	mov.w	ip, #10
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cac:	3b30      	subs	r3, #48	; 0x30
 8003cae:	2b09      	cmp	r3, #9
 8003cb0:	d94d      	bls.n	8003d4e <_vfiprintf_r+0x1a6>
 8003cb2:	b1b0      	cbz	r0, 8003ce2 <_vfiprintf_r+0x13a>
 8003cb4:	9207      	str	r2, [sp, #28]
 8003cb6:	e014      	b.n	8003ce2 <_vfiprintf_r+0x13a>
 8003cb8:	eba0 0308 	sub.w	r3, r0, r8
 8003cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	9304      	str	r3, [sp, #16]
 8003cc4:	46a2      	mov	sl, r4
 8003cc6:	e7d2      	b.n	8003c6e <_vfiprintf_r+0xc6>
 8003cc8:	9b03      	ldr	r3, [sp, #12]
 8003cca:	1d19      	adds	r1, r3, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	9103      	str	r1, [sp, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	bfbb      	ittet	lt
 8003cd4:	425b      	neglt	r3, r3
 8003cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8003cda:	9307      	strge	r3, [sp, #28]
 8003cdc:	9307      	strlt	r3, [sp, #28]
 8003cde:	bfb8      	it	lt
 8003ce0:	9204      	strlt	r2, [sp, #16]
 8003ce2:	7823      	ldrb	r3, [r4, #0]
 8003ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ce6:	d10c      	bne.n	8003d02 <_vfiprintf_r+0x15a>
 8003ce8:	7863      	ldrb	r3, [r4, #1]
 8003cea:	2b2a      	cmp	r3, #42	; 0x2a
 8003cec:	d134      	bne.n	8003d58 <_vfiprintf_r+0x1b0>
 8003cee:	9b03      	ldr	r3, [sp, #12]
 8003cf0:	1d1a      	adds	r2, r3, #4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	9203      	str	r2, [sp, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bfb8      	it	lt
 8003cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cfe:	3402      	adds	r4, #2
 8003d00:	9305      	str	r3, [sp, #20]
 8003d02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003dd8 <_vfiprintf_r+0x230>
 8003d06:	7821      	ldrb	r1, [r4, #0]
 8003d08:	2203      	movs	r2, #3
 8003d0a:	4650      	mov	r0, sl
 8003d0c:	f7fc fa60 	bl	80001d0 <memchr>
 8003d10:	b138      	cbz	r0, 8003d22 <_vfiprintf_r+0x17a>
 8003d12:	9b04      	ldr	r3, [sp, #16]
 8003d14:	eba0 000a 	sub.w	r0, r0, sl
 8003d18:	2240      	movs	r2, #64	; 0x40
 8003d1a:	4082      	lsls	r2, r0
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	3401      	adds	r4, #1
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d26:	4829      	ldr	r0, [pc, #164]	; (8003dcc <_vfiprintf_r+0x224>)
 8003d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d2c:	2206      	movs	r2, #6
 8003d2e:	f7fc fa4f 	bl	80001d0 <memchr>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d03f      	beq.n	8003db6 <_vfiprintf_r+0x20e>
 8003d36:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <_vfiprintf_r+0x228>)
 8003d38:	bb1b      	cbnz	r3, 8003d82 <_vfiprintf_r+0x1da>
 8003d3a:	9b03      	ldr	r3, [sp, #12]
 8003d3c:	3307      	adds	r3, #7
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	3308      	adds	r3, #8
 8003d44:	9303      	str	r3, [sp, #12]
 8003d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d48:	443b      	add	r3, r7
 8003d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4c:	e768      	b.n	8003c20 <_vfiprintf_r+0x78>
 8003d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d52:	460c      	mov	r4, r1
 8003d54:	2001      	movs	r0, #1
 8003d56:	e7a6      	b.n	8003ca6 <_vfiprintf_r+0xfe>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	3401      	adds	r4, #1
 8003d5c:	9305      	str	r3, [sp, #20]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f04f 0c0a 	mov.w	ip, #10
 8003d64:	4620      	mov	r0, r4
 8003d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d6a:	3a30      	subs	r2, #48	; 0x30
 8003d6c:	2a09      	cmp	r2, #9
 8003d6e:	d903      	bls.n	8003d78 <_vfiprintf_r+0x1d0>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0c6      	beq.n	8003d02 <_vfiprintf_r+0x15a>
 8003d74:	9105      	str	r1, [sp, #20]
 8003d76:	e7c4      	b.n	8003d02 <_vfiprintf_r+0x15a>
 8003d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e7f0      	b.n	8003d64 <_vfiprintf_r+0x1bc>
 8003d82:	ab03      	add	r3, sp, #12
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	462a      	mov	r2, r5
 8003d88:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <_vfiprintf_r+0x22c>)
 8003d8a:	a904      	add	r1, sp, #16
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f3af 8000 	nop.w
 8003d92:	4607      	mov	r7, r0
 8003d94:	1c78      	adds	r0, r7, #1
 8003d96:	d1d6      	bne.n	8003d46 <_vfiprintf_r+0x19e>
 8003d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d9a:	07d9      	lsls	r1, r3, #31
 8003d9c:	d405      	bmi.n	8003daa <_vfiprintf_r+0x202>
 8003d9e:	89ab      	ldrh	r3, [r5, #12]
 8003da0:	059a      	lsls	r2, r3, #22
 8003da2:	d402      	bmi.n	8003daa <_vfiprintf_r+0x202>
 8003da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003da6:	f7ff fddb 	bl	8003960 <__retarget_lock_release_recursive>
 8003daa:	89ab      	ldrh	r3, [r5, #12]
 8003dac:	065b      	lsls	r3, r3, #25
 8003dae:	f53f af1d 	bmi.w	8003bec <_vfiprintf_r+0x44>
 8003db2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003db4:	e71c      	b.n	8003bf0 <_vfiprintf_r+0x48>
 8003db6:	ab03      	add	r3, sp, #12
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	462a      	mov	r2, r5
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <_vfiprintf_r+0x22c>)
 8003dbe:	a904      	add	r1, sp, #16
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f000 f879 	bl	8003eb8 <_printf_i>
 8003dc6:	e7e4      	b.n	8003d92 <_vfiprintf_r+0x1ea>
 8003dc8:	08004434 	.word	0x08004434
 8003dcc:	0800443e 	.word	0x0800443e
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	08003b83 	.word	0x08003b83
 8003dd8:	0800443a 	.word	0x0800443a

08003ddc <_printf_common>:
 8003ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de0:	4616      	mov	r6, r2
 8003de2:	4699      	mov	r9, r3
 8003de4:	688a      	ldr	r2, [r1, #8]
 8003de6:	690b      	ldr	r3, [r1, #16]
 8003de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dec:	4293      	cmp	r3, r2
 8003dee:	bfb8      	it	lt
 8003df0:	4613      	movlt	r3, r2
 8003df2:	6033      	str	r3, [r6, #0]
 8003df4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003df8:	4607      	mov	r7, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	b10a      	cbz	r2, 8003e02 <_printf_common+0x26>
 8003dfe:	3301      	adds	r3, #1
 8003e00:	6033      	str	r3, [r6, #0]
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	0699      	lsls	r1, r3, #26
 8003e06:	bf42      	ittt	mi
 8003e08:	6833      	ldrmi	r3, [r6, #0]
 8003e0a:	3302      	addmi	r3, #2
 8003e0c:	6033      	strmi	r3, [r6, #0]
 8003e0e:	6825      	ldr	r5, [r4, #0]
 8003e10:	f015 0506 	ands.w	r5, r5, #6
 8003e14:	d106      	bne.n	8003e24 <_printf_common+0x48>
 8003e16:	f104 0a19 	add.w	sl, r4, #25
 8003e1a:	68e3      	ldr	r3, [r4, #12]
 8003e1c:	6832      	ldr	r2, [r6, #0]
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	42ab      	cmp	r3, r5
 8003e22:	dc26      	bgt.n	8003e72 <_printf_common+0x96>
 8003e24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e28:	1e13      	subs	r3, r2, #0
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	bf18      	it	ne
 8003e2e:	2301      	movne	r3, #1
 8003e30:	0692      	lsls	r2, r2, #26
 8003e32:	d42b      	bmi.n	8003e8c <_printf_common+0xb0>
 8003e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e38:	4649      	mov	r1, r9
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	47c0      	blx	r8
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d01e      	beq.n	8003e80 <_printf_common+0xa4>
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	6922      	ldr	r2, [r4, #16]
 8003e46:	f003 0306 	and.w	r3, r3, #6
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	bf02      	ittt	eq
 8003e4e:	68e5      	ldreq	r5, [r4, #12]
 8003e50:	6833      	ldreq	r3, [r6, #0]
 8003e52:	1aed      	subeq	r5, r5, r3
 8003e54:	68a3      	ldr	r3, [r4, #8]
 8003e56:	bf0c      	ite	eq
 8003e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e5c:	2500      	movne	r5, #0
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	bfc4      	itt	gt
 8003e62:	1a9b      	subgt	r3, r3, r2
 8003e64:	18ed      	addgt	r5, r5, r3
 8003e66:	2600      	movs	r6, #0
 8003e68:	341a      	adds	r4, #26
 8003e6a:	42b5      	cmp	r5, r6
 8003e6c:	d11a      	bne.n	8003ea4 <_printf_common+0xc8>
 8003e6e:	2000      	movs	r0, #0
 8003e70:	e008      	b.n	8003e84 <_printf_common+0xa8>
 8003e72:	2301      	movs	r3, #1
 8003e74:	4652      	mov	r2, sl
 8003e76:	4649      	mov	r1, r9
 8003e78:	4638      	mov	r0, r7
 8003e7a:	47c0      	blx	r8
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d103      	bne.n	8003e88 <_printf_common+0xac>
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295
 8003e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e88:	3501      	adds	r5, #1
 8003e8a:	e7c6      	b.n	8003e1a <_printf_common+0x3e>
 8003e8c:	18e1      	adds	r1, r4, r3
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	2030      	movs	r0, #48	; 0x30
 8003e92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e96:	4422      	add	r2, r4
 8003e98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	e7c7      	b.n	8003e34 <_printf_common+0x58>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	4638      	mov	r0, r7
 8003eac:	47c0      	blx	r8
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d0e6      	beq.n	8003e80 <_printf_common+0xa4>
 8003eb2:	3601      	adds	r6, #1
 8003eb4:	e7d9      	b.n	8003e6a <_printf_common+0x8e>
	...

08003eb8 <_printf_i>:
 8003eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ebc:	7e0f      	ldrb	r7, [r1, #24]
 8003ebe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ec0:	2f78      	cmp	r7, #120	; 0x78
 8003ec2:	4691      	mov	r9, r2
 8003ec4:	4680      	mov	r8, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	469a      	mov	sl, r3
 8003eca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ece:	d807      	bhi.n	8003ee0 <_printf_i+0x28>
 8003ed0:	2f62      	cmp	r7, #98	; 0x62
 8003ed2:	d80a      	bhi.n	8003eea <_printf_i+0x32>
 8003ed4:	2f00      	cmp	r7, #0
 8003ed6:	f000 80d4 	beq.w	8004082 <_printf_i+0x1ca>
 8003eda:	2f58      	cmp	r7, #88	; 0x58
 8003edc:	f000 80c0 	beq.w	8004060 <_printf_i+0x1a8>
 8003ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ee8:	e03a      	b.n	8003f60 <_printf_i+0xa8>
 8003eea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eee:	2b15      	cmp	r3, #21
 8003ef0:	d8f6      	bhi.n	8003ee0 <_printf_i+0x28>
 8003ef2:	a101      	add	r1, pc, #4	; (adr r1, 8003ef8 <_printf_i+0x40>)
 8003ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ef8:	08003f51 	.word	0x08003f51
 8003efc:	08003f65 	.word	0x08003f65
 8003f00:	08003ee1 	.word	0x08003ee1
 8003f04:	08003ee1 	.word	0x08003ee1
 8003f08:	08003ee1 	.word	0x08003ee1
 8003f0c:	08003ee1 	.word	0x08003ee1
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	08003ee1 	.word	0x08003ee1
 8003f18:	08003ee1 	.word	0x08003ee1
 8003f1c:	08003ee1 	.word	0x08003ee1
 8003f20:	08003ee1 	.word	0x08003ee1
 8003f24:	08004069 	.word	0x08004069
 8003f28:	08003f91 	.word	0x08003f91
 8003f2c:	08004023 	.word	0x08004023
 8003f30:	08003ee1 	.word	0x08003ee1
 8003f34:	08003ee1 	.word	0x08003ee1
 8003f38:	0800408b 	.word	0x0800408b
 8003f3c:	08003ee1 	.word	0x08003ee1
 8003f40:	08003f91 	.word	0x08003f91
 8003f44:	08003ee1 	.word	0x08003ee1
 8003f48:	08003ee1 	.word	0x08003ee1
 8003f4c:	0800402b 	.word	0x0800402b
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	1d1a      	adds	r2, r3, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	602a      	str	r2, [r5, #0]
 8003f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f60:	2301      	movs	r3, #1
 8003f62:	e09f      	b.n	80040a4 <_printf_i+0x1ec>
 8003f64:	6820      	ldr	r0, [r4, #0]
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	0607      	lsls	r7, r0, #24
 8003f6a:	f103 0104 	add.w	r1, r3, #4
 8003f6e:	6029      	str	r1, [r5, #0]
 8003f70:	d501      	bpl.n	8003f76 <_printf_i+0xbe>
 8003f72:	681e      	ldr	r6, [r3, #0]
 8003f74:	e003      	b.n	8003f7e <_printf_i+0xc6>
 8003f76:	0646      	lsls	r6, r0, #25
 8003f78:	d5fb      	bpl.n	8003f72 <_printf_i+0xba>
 8003f7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f7e:	2e00      	cmp	r6, #0
 8003f80:	da03      	bge.n	8003f8a <_printf_i+0xd2>
 8003f82:	232d      	movs	r3, #45	; 0x2d
 8003f84:	4276      	negs	r6, r6
 8003f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f8a:	485a      	ldr	r0, [pc, #360]	; (80040f4 <_printf_i+0x23c>)
 8003f8c:	230a      	movs	r3, #10
 8003f8e:	e012      	b.n	8003fb6 <_printf_i+0xfe>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	6820      	ldr	r0, [r4, #0]
 8003f94:	1d19      	adds	r1, r3, #4
 8003f96:	6029      	str	r1, [r5, #0]
 8003f98:	0605      	lsls	r5, r0, #24
 8003f9a:	d501      	bpl.n	8003fa0 <_printf_i+0xe8>
 8003f9c:	681e      	ldr	r6, [r3, #0]
 8003f9e:	e002      	b.n	8003fa6 <_printf_i+0xee>
 8003fa0:	0641      	lsls	r1, r0, #25
 8003fa2:	d5fb      	bpl.n	8003f9c <_printf_i+0xe4>
 8003fa4:	881e      	ldrh	r6, [r3, #0]
 8003fa6:	4853      	ldr	r0, [pc, #332]	; (80040f4 <_printf_i+0x23c>)
 8003fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8003faa:	bf0c      	ite	eq
 8003fac:	2308      	moveq	r3, #8
 8003fae:	230a      	movne	r3, #10
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fb6:	6865      	ldr	r5, [r4, #4]
 8003fb8:	60a5      	str	r5, [r4, #8]
 8003fba:	2d00      	cmp	r5, #0
 8003fbc:	bfa2      	ittt	ge
 8003fbe:	6821      	ldrge	r1, [r4, #0]
 8003fc0:	f021 0104 	bicge.w	r1, r1, #4
 8003fc4:	6021      	strge	r1, [r4, #0]
 8003fc6:	b90e      	cbnz	r6, 8003fcc <_printf_i+0x114>
 8003fc8:	2d00      	cmp	r5, #0
 8003fca:	d04b      	beq.n	8004064 <_printf_i+0x1ac>
 8003fcc:	4615      	mov	r5, r2
 8003fce:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fd2:	fb03 6711 	mls	r7, r3, r1, r6
 8003fd6:	5dc7      	ldrb	r7, [r0, r7]
 8003fd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fdc:	4637      	mov	r7, r6
 8003fde:	42bb      	cmp	r3, r7
 8003fe0:	460e      	mov	r6, r1
 8003fe2:	d9f4      	bls.n	8003fce <_printf_i+0x116>
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d10b      	bne.n	8004000 <_printf_i+0x148>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	07de      	lsls	r6, r3, #31
 8003fec:	d508      	bpl.n	8004000 <_printf_i+0x148>
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	6861      	ldr	r1, [r4, #4]
 8003ff2:	4299      	cmp	r1, r3
 8003ff4:	bfde      	ittt	le
 8003ff6:	2330      	movle	r3, #48	; 0x30
 8003ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004000:	1b52      	subs	r2, r2, r5
 8004002:	6122      	str	r2, [r4, #16]
 8004004:	f8cd a000 	str.w	sl, [sp]
 8004008:	464b      	mov	r3, r9
 800400a:	aa03      	add	r2, sp, #12
 800400c:	4621      	mov	r1, r4
 800400e:	4640      	mov	r0, r8
 8004010:	f7ff fee4 	bl	8003ddc <_printf_common>
 8004014:	3001      	adds	r0, #1
 8004016:	d14a      	bne.n	80040ae <_printf_i+0x1f6>
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	b004      	add	sp, #16
 800401e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	f043 0320 	orr.w	r3, r3, #32
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	4833      	ldr	r0, [pc, #204]	; (80040f8 <_printf_i+0x240>)
 800402c:	2778      	movs	r7, #120	; 0x78
 800402e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	6829      	ldr	r1, [r5, #0]
 8004036:	061f      	lsls	r7, r3, #24
 8004038:	f851 6b04 	ldr.w	r6, [r1], #4
 800403c:	d402      	bmi.n	8004044 <_printf_i+0x18c>
 800403e:	065f      	lsls	r7, r3, #25
 8004040:	bf48      	it	mi
 8004042:	b2b6      	uxthmi	r6, r6
 8004044:	07df      	lsls	r7, r3, #31
 8004046:	bf48      	it	mi
 8004048:	f043 0320 	orrmi.w	r3, r3, #32
 800404c:	6029      	str	r1, [r5, #0]
 800404e:	bf48      	it	mi
 8004050:	6023      	strmi	r3, [r4, #0]
 8004052:	b91e      	cbnz	r6, 800405c <_printf_i+0x1a4>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	f023 0320 	bic.w	r3, r3, #32
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	2310      	movs	r3, #16
 800405e:	e7a7      	b.n	8003fb0 <_printf_i+0xf8>
 8004060:	4824      	ldr	r0, [pc, #144]	; (80040f4 <_printf_i+0x23c>)
 8004062:	e7e4      	b.n	800402e <_printf_i+0x176>
 8004064:	4615      	mov	r5, r2
 8004066:	e7bd      	b.n	8003fe4 <_printf_i+0x12c>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	6826      	ldr	r6, [r4, #0]
 800406c:	6961      	ldr	r1, [r4, #20]
 800406e:	1d18      	adds	r0, r3, #4
 8004070:	6028      	str	r0, [r5, #0]
 8004072:	0635      	lsls	r5, r6, #24
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	d501      	bpl.n	800407c <_printf_i+0x1c4>
 8004078:	6019      	str	r1, [r3, #0]
 800407a:	e002      	b.n	8004082 <_printf_i+0x1ca>
 800407c:	0670      	lsls	r0, r6, #25
 800407e:	d5fb      	bpl.n	8004078 <_printf_i+0x1c0>
 8004080:	8019      	strh	r1, [r3, #0]
 8004082:	2300      	movs	r3, #0
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	4615      	mov	r5, r2
 8004088:	e7bc      	b.n	8004004 <_printf_i+0x14c>
 800408a:	682b      	ldr	r3, [r5, #0]
 800408c:	1d1a      	adds	r2, r3, #4
 800408e:	602a      	str	r2, [r5, #0]
 8004090:	681d      	ldr	r5, [r3, #0]
 8004092:	6862      	ldr	r2, [r4, #4]
 8004094:	2100      	movs	r1, #0
 8004096:	4628      	mov	r0, r5
 8004098:	f7fc f89a 	bl	80001d0 <memchr>
 800409c:	b108      	cbz	r0, 80040a2 <_printf_i+0x1ea>
 800409e:	1b40      	subs	r0, r0, r5
 80040a0:	6060      	str	r0, [r4, #4]
 80040a2:	6863      	ldr	r3, [r4, #4]
 80040a4:	6123      	str	r3, [r4, #16]
 80040a6:	2300      	movs	r3, #0
 80040a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ac:	e7aa      	b.n	8004004 <_printf_i+0x14c>
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	462a      	mov	r2, r5
 80040b2:	4649      	mov	r1, r9
 80040b4:	4640      	mov	r0, r8
 80040b6:	47d0      	blx	sl
 80040b8:	3001      	adds	r0, #1
 80040ba:	d0ad      	beq.n	8004018 <_printf_i+0x160>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	079b      	lsls	r3, r3, #30
 80040c0:	d413      	bmi.n	80040ea <_printf_i+0x232>
 80040c2:	68e0      	ldr	r0, [r4, #12]
 80040c4:	9b03      	ldr	r3, [sp, #12]
 80040c6:	4298      	cmp	r0, r3
 80040c8:	bfb8      	it	lt
 80040ca:	4618      	movlt	r0, r3
 80040cc:	e7a6      	b.n	800401c <_printf_i+0x164>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4632      	mov	r2, r6
 80040d2:	4649      	mov	r1, r9
 80040d4:	4640      	mov	r0, r8
 80040d6:	47d0      	blx	sl
 80040d8:	3001      	adds	r0, #1
 80040da:	d09d      	beq.n	8004018 <_printf_i+0x160>
 80040dc:	3501      	adds	r5, #1
 80040de:	68e3      	ldr	r3, [r4, #12]
 80040e0:	9903      	ldr	r1, [sp, #12]
 80040e2:	1a5b      	subs	r3, r3, r1
 80040e4:	42ab      	cmp	r3, r5
 80040e6:	dcf2      	bgt.n	80040ce <_printf_i+0x216>
 80040e8:	e7eb      	b.n	80040c2 <_printf_i+0x20a>
 80040ea:	2500      	movs	r5, #0
 80040ec:	f104 0619 	add.w	r6, r4, #25
 80040f0:	e7f5      	b.n	80040de <_printf_i+0x226>
 80040f2:	bf00      	nop
 80040f4:	08004445 	.word	0x08004445
 80040f8:	08004456 	.word	0x08004456

080040fc <__sflush_r>:
 80040fc:	898a      	ldrh	r2, [r1, #12]
 80040fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004102:	4605      	mov	r5, r0
 8004104:	0710      	lsls	r0, r2, #28
 8004106:	460c      	mov	r4, r1
 8004108:	d458      	bmi.n	80041bc <__sflush_r+0xc0>
 800410a:	684b      	ldr	r3, [r1, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	dc05      	bgt.n	800411c <__sflush_r+0x20>
 8004110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	dc02      	bgt.n	800411c <__sflush_r+0x20>
 8004116:	2000      	movs	r0, #0
 8004118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800411c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800411e:	2e00      	cmp	r6, #0
 8004120:	d0f9      	beq.n	8004116 <__sflush_r+0x1a>
 8004122:	2300      	movs	r3, #0
 8004124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004128:	682f      	ldr	r7, [r5, #0]
 800412a:	6a21      	ldr	r1, [r4, #32]
 800412c:	602b      	str	r3, [r5, #0]
 800412e:	d032      	beq.n	8004196 <__sflush_r+0x9a>
 8004130:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	075a      	lsls	r2, r3, #29
 8004136:	d505      	bpl.n	8004144 <__sflush_r+0x48>
 8004138:	6863      	ldr	r3, [r4, #4]
 800413a:	1ac0      	subs	r0, r0, r3
 800413c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800413e:	b10b      	cbz	r3, 8004144 <__sflush_r+0x48>
 8004140:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004142:	1ac0      	subs	r0, r0, r3
 8004144:	2300      	movs	r3, #0
 8004146:	4602      	mov	r2, r0
 8004148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800414a:	6a21      	ldr	r1, [r4, #32]
 800414c:	4628      	mov	r0, r5
 800414e:	47b0      	blx	r6
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	d106      	bne.n	8004164 <__sflush_r+0x68>
 8004156:	6829      	ldr	r1, [r5, #0]
 8004158:	291d      	cmp	r1, #29
 800415a:	d82b      	bhi.n	80041b4 <__sflush_r+0xb8>
 800415c:	4a29      	ldr	r2, [pc, #164]	; (8004204 <__sflush_r+0x108>)
 800415e:	410a      	asrs	r2, r1
 8004160:	07d6      	lsls	r6, r2, #31
 8004162:	d427      	bmi.n	80041b4 <__sflush_r+0xb8>
 8004164:	2200      	movs	r2, #0
 8004166:	6062      	str	r2, [r4, #4]
 8004168:	04d9      	lsls	r1, r3, #19
 800416a:	6922      	ldr	r2, [r4, #16]
 800416c:	6022      	str	r2, [r4, #0]
 800416e:	d504      	bpl.n	800417a <__sflush_r+0x7e>
 8004170:	1c42      	adds	r2, r0, #1
 8004172:	d101      	bne.n	8004178 <__sflush_r+0x7c>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b903      	cbnz	r3, 800417a <__sflush_r+0x7e>
 8004178:	6560      	str	r0, [r4, #84]	; 0x54
 800417a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800417c:	602f      	str	r7, [r5, #0]
 800417e:	2900      	cmp	r1, #0
 8004180:	d0c9      	beq.n	8004116 <__sflush_r+0x1a>
 8004182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004186:	4299      	cmp	r1, r3
 8004188:	d002      	beq.n	8004190 <__sflush_r+0x94>
 800418a:	4628      	mov	r0, r5
 800418c:	f7ff fbea 	bl	8003964 <_free_r>
 8004190:	2000      	movs	r0, #0
 8004192:	6360      	str	r0, [r4, #52]	; 0x34
 8004194:	e7c0      	b.n	8004118 <__sflush_r+0x1c>
 8004196:	2301      	movs	r3, #1
 8004198:	4628      	mov	r0, r5
 800419a:	47b0      	blx	r6
 800419c:	1c41      	adds	r1, r0, #1
 800419e:	d1c8      	bne.n	8004132 <__sflush_r+0x36>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0c5      	beq.n	8004132 <__sflush_r+0x36>
 80041a6:	2b1d      	cmp	r3, #29
 80041a8:	d001      	beq.n	80041ae <__sflush_r+0xb2>
 80041aa:	2b16      	cmp	r3, #22
 80041ac:	d101      	bne.n	80041b2 <__sflush_r+0xb6>
 80041ae:	602f      	str	r7, [r5, #0]
 80041b0:	e7b1      	b.n	8004116 <__sflush_r+0x1a>
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	e7ad      	b.n	8004118 <__sflush_r+0x1c>
 80041bc:	690f      	ldr	r7, [r1, #16]
 80041be:	2f00      	cmp	r7, #0
 80041c0:	d0a9      	beq.n	8004116 <__sflush_r+0x1a>
 80041c2:	0793      	lsls	r3, r2, #30
 80041c4:	680e      	ldr	r6, [r1, #0]
 80041c6:	bf08      	it	eq
 80041c8:	694b      	ldreq	r3, [r1, #20]
 80041ca:	600f      	str	r7, [r1, #0]
 80041cc:	bf18      	it	ne
 80041ce:	2300      	movne	r3, #0
 80041d0:	eba6 0807 	sub.w	r8, r6, r7
 80041d4:	608b      	str	r3, [r1, #8]
 80041d6:	f1b8 0f00 	cmp.w	r8, #0
 80041da:	dd9c      	ble.n	8004116 <__sflush_r+0x1a>
 80041dc:	6a21      	ldr	r1, [r4, #32]
 80041de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041e0:	4643      	mov	r3, r8
 80041e2:	463a      	mov	r2, r7
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b0      	blx	r6
 80041e8:	2800      	cmp	r0, #0
 80041ea:	dc06      	bgt.n	80041fa <__sflush_r+0xfe>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f2:	81a3      	strh	r3, [r4, #12]
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	e78e      	b.n	8004118 <__sflush_r+0x1c>
 80041fa:	4407      	add	r7, r0
 80041fc:	eba8 0800 	sub.w	r8, r8, r0
 8004200:	e7e9      	b.n	80041d6 <__sflush_r+0xda>
 8004202:	bf00      	nop
 8004204:	dfbffffe 	.word	0xdfbffffe

08004208 <_fflush_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	690b      	ldr	r3, [r1, #16]
 800420c:	4605      	mov	r5, r0
 800420e:	460c      	mov	r4, r1
 8004210:	b913      	cbnz	r3, 8004218 <_fflush_r+0x10>
 8004212:	2500      	movs	r5, #0
 8004214:	4628      	mov	r0, r5
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	b118      	cbz	r0, 8004222 <_fflush_r+0x1a>
 800421a:	6a03      	ldr	r3, [r0, #32]
 800421c:	b90b      	cbnz	r3, 8004222 <_fflush_r+0x1a>
 800421e:	f7ff f9a9 	bl	8003574 <__sinit>
 8004222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f3      	beq.n	8004212 <_fflush_r+0xa>
 800422a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800422c:	07d0      	lsls	r0, r2, #31
 800422e:	d404      	bmi.n	800423a <_fflush_r+0x32>
 8004230:	0599      	lsls	r1, r3, #22
 8004232:	d402      	bmi.n	800423a <_fflush_r+0x32>
 8004234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004236:	f7ff fb92 	bl	800395e <__retarget_lock_acquire_recursive>
 800423a:	4628      	mov	r0, r5
 800423c:	4621      	mov	r1, r4
 800423e:	f7ff ff5d 	bl	80040fc <__sflush_r>
 8004242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004244:	07da      	lsls	r2, r3, #31
 8004246:	4605      	mov	r5, r0
 8004248:	d4e4      	bmi.n	8004214 <_fflush_r+0xc>
 800424a:	89a3      	ldrh	r3, [r4, #12]
 800424c:	059b      	lsls	r3, r3, #22
 800424e:	d4e1      	bmi.n	8004214 <_fflush_r+0xc>
 8004250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004252:	f7ff fb85 	bl	8003960 <__retarget_lock_release_recursive>
 8004256:	e7dd      	b.n	8004214 <_fflush_r+0xc>

08004258 <__swhatbuf_r>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	460c      	mov	r4, r1
 800425c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004260:	2900      	cmp	r1, #0
 8004262:	b096      	sub	sp, #88	; 0x58
 8004264:	4615      	mov	r5, r2
 8004266:	461e      	mov	r6, r3
 8004268:	da0d      	bge.n	8004286 <__swhatbuf_r+0x2e>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004270:	f04f 0100 	mov.w	r1, #0
 8004274:	bf0c      	ite	eq
 8004276:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800427a:	2340      	movne	r3, #64	; 0x40
 800427c:	2000      	movs	r0, #0
 800427e:	6031      	str	r1, [r6, #0]
 8004280:	602b      	str	r3, [r5, #0]
 8004282:	b016      	add	sp, #88	; 0x58
 8004284:	bd70      	pop	{r4, r5, r6, pc}
 8004286:	466a      	mov	r2, sp
 8004288:	f000 f848 	bl	800431c <_fstat_r>
 800428c:	2800      	cmp	r0, #0
 800428e:	dbec      	blt.n	800426a <__swhatbuf_r+0x12>
 8004290:	9901      	ldr	r1, [sp, #4]
 8004292:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004296:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800429a:	4259      	negs	r1, r3
 800429c:	4159      	adcs	r1, r3
 800429e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042a2:	e7eb      	b.n	800427c <__swhatbuf_r+0x24>

080042a4 <__smakebuf_r>:
 80042a4:	898b      	ldrh	r3, [r1, #12]
 80042a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042a8:	079d      	lsls	r5, r3, #30
 80042aa:	4606      	mov	r6, r0
 80042ac:	460c      	mov	r4, r1
 80042ae:	d507      	bpl.n	80042c0 <__smakebuf_r+0x1c>
 80042b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	6123      	str	r3, [r4, #16]
 80042b8:	2301      	movs	r3, #1
 80042ba:	6163      	str	r3, [r4, #20]
 80042bc:	b002      	add	sp, #8
 80042be:	bd70      	pop	{r4, r5, r6, pc}
 80042c0:	ab01      	add	r3, sp, #4
 80042c2:	466a      	mov	r2, sp
 80042c4:	f7ff ffc8 	bl	8004258 <__swhatbuf_r>
 80042c8:	9900      	ldr	r1, [sp, #0]
 80042ca:	4605      	mov	r5, r0
 80042cc:	4630      	mov	r0, r6
 80042ce:	f7ff fbb5 	bl	8003a3c <_malloc_r>
 80042d2:	b948      	cbnz	r0, 80042e8 <__smakebuf_r+0x44>
 80042d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042d8:	059a      	lsls	r2, r3, #22
 80042da:	d4ef      	bmi.n	80042bc <__smakebuf_r+0x18>
 80042dc:	f023 0303 	bic.w	r3, r3, #3
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	81a3      	strh	r3, [r4, #12]
 80042e6:	e7e3      	b.n	80042b0 <__smakebuf_r+0xc>
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	6020      	str	r0, [r4, #0]
 80042ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f0:	81a3      	strh	r3, [r4, #12]
 80042f2:	9b00      	ldr	r3, [sp, #0]
 80042f4:	6163      	str	r3, [r4, #20]
 80042f6:	9b01      	ldr	r3, [sp, #4]
 80042f8:	6120      	str	r0, [r4, #16]
 80042fa:	b15b      	cbz	r3, 8004314 <__smakebuf_r+0x70>
 80042fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004300:	4630      	mov	r0, r6
 8004302:	f000 f81d 	bl	8004340 <_isatty_r>
 8004306:	b128      	cbz	r0, 8004314 <__smakebuf_r+0x70>
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	f023 0303 	bic.w	r3, r3, #3
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	81a3      	strh	r3, [r4, #12]
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	431d      	orrs	r5, r3
 8004318:	81a5      	strh	r5, [r4, #12]
 800431a:	e7cf      	b.n	80042bc <__smakebuf_r+0x18>

0800431c <_fstat_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4d07      	ldr	r5, [pc, #28]	; (800433c <_fstat_r+0x20>)
 8004320:	2300      	movs	r3, #0
 8004322:	4604      	mov	r4, r0
 8004324:	4608      	mov	r0, r1
 8004326:	4611      	mov	r1, r2
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	f7fc fb9a 	bl	8000a62 <_fstat>
 800432e:	1c43      	adds	r3, r0, #1
 8004330:	d102      	bne.n	8004338 <_fstat_r+0x1c>
 8004332:	682b      	ldr	r3, [r5, #0]
 8004334:	b103      	cbz	r3, 8004338 <_fstat_r+0x1c>
 8004336:	6023      	str	r3, [r4, #0]
 8004338:	bd38      	pop	{r3, r4, r5, pc}
 800433a:	bf00      	nop
 800433c:	200041c8 	.word	0x200041c8

08004340 <_isatty_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4d06      	ldr	r5, [pc, #24]	; (800435c <_isatty_r+0x1c>)
 8004344:	2300      	movs	r3, #0
 8004346:	4604      	mov	r4, r0
 8004348:	4608      	mov	r0, r1
 800434a:	602b      	str	r3, [r5, #0]
 800434c:	f7fc fb99 	bl	8000a82 <_isatty>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_isatty_r+0x1a>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	b103      	cbz	r3, 800435a <_isatty_r+0x1a>
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	200041c8 	.word	0x200041c8

08004360 <_sbrk_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4d06      	ldr	r5, [pc, #24]	; (800437c <_sbrk_r+0x1c>)
 8004364:	2300      	movs	r3, #0
 8004366:	4604      	mov	r4, r0
 8004368:	4608      	mov	r0, r1
 800436a:	602b      	str	r3, [r5, #0]
 800436c:	f7fc fba2 	bl	8000ab4 <_sbrk>
 8004370:	1c43      	adds	r3, r0, #1
 8004372:	d102      	bne.n	800437a <_sbrk_r+0x1a>
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	b103      	cbz	r3, 800437a <_sbrk_r+0x1a>
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	200041c8 	.word	0x200041c8

08004380 <_init>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	bf00      	nop
 8004384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004386:	bc08      	pop	{r3}
 8004388:	469e      	mov	lr, r3
 800438a:	4770      	bx	lr

0800438c <_fini>:
 800438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438e:	bf00      	nop
 8004390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004392:	bc08      	pop	{r3}
 8004394:	469e      	mov	lr, r3
 8004396:	4770      	bx	lr
