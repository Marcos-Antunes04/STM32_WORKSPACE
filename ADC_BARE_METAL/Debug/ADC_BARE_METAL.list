
ADC_BARE_METAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001464  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080015f4  080015f4  000115f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001634  08001634  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08001634  08001634  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001634  08001634  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001634  08001634  00011634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001638  08001638  00011638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800163c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00000174  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001fcd  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000893  00000000  00000000  000220a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002d0  00000000  00000000  00022938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001fc  00000000  00000000  00022c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000200c4  00000000  00000000  00022e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000325e  00000000  00000000  00042ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1315  00000000  00000000  00046126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000010e4  00000000  00000000  0010743c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00108520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080015dc 	.word	0x080015dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080015dc 	.word	0x080015dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_write>:
void ADC_WaitForConv(void);
uint16_t ADC_GetVal(void);
void ADC_Disable(void);
void SysClockConfig(void);

int _write(int file, char* ptr, int len){
 80002be:	b580      	push	{r7, lr}
 80002c0:	b086      	sub	sp, #24
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
	int i = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
	for(i=0; i < len; i++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	e009      	b.n	80002e8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1c5a      	adds	r2, r3, #1
 80002d8:	60ba      	str	r2, [r7, #8]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ffc7 	bl	8000270 <ITM_SendChar>
	for(i=0; i < len; i++)
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	3301      	adds	r3, #1
 80002e6:	617b      	str	r3, [r7, #20]
 80002e8:	697a      	ldr	r2, [r7, #20]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	dbf1      	blt.n	80002d4 <_write+0x16>
	return len;
 80002f0:	687b      	ldr	r3, [r7, #4]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3718      	adds	r7, #24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <main>:

uint16_t ADC_VAL;
int main(void){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	SysClockConfig();
 8000300:	f000 f8d8 	bl	80004b4 <SysClockConfig>
	ADC_Init();
 8000304:	f000 f818 	bl	8000338 <ADC_Init>
	ADC_Enable();
 8000308:	f000 f876 	bl	80003f8 <ADC_Enable>

	while (1){
		ADC_Start();
 800030c:	f000 f890 	bl	8000430 <ADC_Start>
		ADC_WaitForConv();
 8000310:	f000 f8b2 	bl	8000478 <ADC_WaitForConv>
		ADC_VAL = ADC_GetVal();
 8000314:	f000 f8c2 	bl	800049c <ADC_GetVal>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <main+0x34>)
 800031e:	801a      	strh	r2, [r3, #0]
		printf("VALUE -> %d\n",(int)ADC_VAL);
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <main+0x34>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	4619      	mov	r1, r3
 8000326:	4803      	ldr	r0, [pc, #12]	; (8000334 <main+0x38>)
 8000328:	f000 fae2 	bl	80008f0 <iprintf>
		ADC_Start();
 800032c:	e7ee      	b.n	800030c <main+0x10>
 800032e:	bf00      	nop
 8000330:	2000007c 	.word	0x2000007c
 8000334:	080015f4 	.word	0x080015f4

08000338 <ADC_Init>:
	}
}



void ADC_Init(void){
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1<<8); //Start ADC
 800033c:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <ADC_Init+0xb0>)
 800033e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000340:	4a29      	ldr	r2, [pc, #164]	; (80003e8 <ADC_Init+0xb0>)
 8000342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000346:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= (1<<0); //Start GPIOA
 8000348:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <ADC_Init+0xb0>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <ADC_Init+0xb0>)
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6313      	str	r3, [r2, #48]	; 0x30

	ADC->CCR |= (2<<16); //Adc PCLK2 divide by 6 prescaler
 8000354:	4b25      	ldr	r3, [pc, #148]	; (80003ec <ADC_Init+0xb4>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	4a24      	ldr	r2, [pc, #144]	; (80003ec <ADC_Init+0xb4>)
 800035a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035e:	6053      	str	r3, [r2, #4]

	ADC1->CR1 = (1<<8); // scan mode enabled
 8000360:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <ADC_Init+0xb8>)
 8000362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000366:	605a      	str	r2, [r3, #4]
	ADC1->CR1 &= ~(1<<24); //Sets resolution to 12bits(default)
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <ADC_Init+0xb8>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <ADC_Init+0xb8>)
 800036e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000372:	6053      	str	r3, [r2, #4]
	-> EOC is End Of Conversion specifies whether the EOC Flag should set after each conversion, or at the end of all the conversions.
	-> DMA specifies whether we want to use DMA for ADC.
	-> Data Alignment specifies whether the 12 bit data should be Right Aligned or Left Aligned in a 16 bit Register
	 */

	ADC1->CR2 = (1<<1);
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <ADC_Init+0xb8>)
 8000376:	2202      	movs	r2, #2
 8000378:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= (1<<10);
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <ADC_Init+0xb8>)
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <ADC_Init+0xb8>)
 8000380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000384:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(1<<11);
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <ADC_Init+0xb8>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	4a19      	ldr	r2, [pc, #100]	; (80003f0 <ADC_Init+0xb8>)
 800038c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000390:	6093      	str	r3, [r2, #8]

	ADC1->CR2 |= (1<<8);
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <ADC_Init+0xb8>)
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <ADC_Init+0xb8>)
 8000398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800039c:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1<<9);
 800039e:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <ADC_Init+0xb8>)
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	4a13      	ldr	r2, [pc, #76]	; (80003f0 <ADC_Init+0xb8>)
 80003a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003a8:	6093      	str	r3, [r2, #8]


	//Sampling time of 3 cycles for channels 1 and 4
	ADC1->SMPR2 &= ~((7<<3) | (7<<12));
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <ADC_Init+0xb8>)
 80003ac:	691b      	ldr	r3, [r3, #16]
 80003ae:	4a10      	ldr	r2, [pc, #64]	; (80003f0 <ADC_Init+0xb8>)
 80003b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80003b4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80003b8:	6113      	str	r3, [r2, #16]

	//6. Set the Regular channel sequence length in ADC_SQR1
	ADC1->SQR1 |= (2<<20);   // SQR1_L =2 for 3 conversions
 80003ba:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <ADC_Init+0xb8>)
 80003bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003be:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <ADC_Init+0xb8>)
 80003c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c4:	62d3      	str	r3, [r2, #44]	; 0x2c


	// Setting GPIOA 1 and 4 as Analog mode
	GPIOA->MODER |= (3<<2);  // analog mode for PA 1
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <ADC_Init+0xbc>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <ADC_Init+0xbc>)
 80003cc:	f043 030c 	orr.w	r3, r3, #12
 80003d0:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (3<<8);  // analog mode for PA 4
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <ADC_Init+0xbc>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a07      	ldr	r2, [pc, #28]	; (80003f4 <ADC_Init+0xbc>)
 80003d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80003dc:	6013      	str	r3, [r2, #0]
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40012300 	.word	0x40012300
 80003f0:	40012000 	.word	0x40012000
 80003f4:	40020000 	.word	0x40020000

080003f8 <ADC_Enable>:

void ADC_Enable(void){
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
	// Once the configuration has been completed, now its time to enable the ADC
	ADC1->CR2 |= 1<<0;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <ADC_Enable+0x34>)
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	4a0a      	ldr	r2, [pc, #40]	; (800042c <ADC_Enable+0x34>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6093      	str	r3, [r2, #8]
	uint32_t delay = 10000;
 800040a:	f242 7310 	movw	r3, #10000	; 0x2710
 800040e:	607b      	str	r3, [r7, #4]
	while(delay--);
 8000410:	bf00      	nop
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	1e5a      	subs	r2, r3, #1
 8000416:	607a      	str	r2, [r7, #4]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1fa      	bne.n	8000412 <ADC_Enable+0x1a>
}
 800041c:	bf00      	nop
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40012000 	.word	0x40012000

08000430 <ADC_Start>:

void ADC_Start(void){
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
	//Sequence in which the channels will be converted
	ADC1->SQR3 |= (1<<0);  // SEQ1 for Channel 1
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <ADC_Start+0x44>)
 8000436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000438:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <ADC_Start+0x44>)
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= (4<<5);  // SEQ2 for CHannel 4
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <ADC_Start+0x44>)
 8000442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000444:	4a0b      	ldr	r2, [pc, #44]	; (8000474 <ADC_Start+0x44>)
 8000446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= (18<<10);  // SEQ3 for CHannel 18
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <ADC_Start+0x44>)
 800044e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000450:	4a08      	ldr	r2, [pc, #32]	; (8000474 <ADC_Start+0x44>)
 8000452:	f443 4390 	orr.w	r3, r3, #18432	; 0x4800
 8000456:	6353      	str	r3, [r2, #52]	; 0x34

	//Needed for the conversion to start
	ADC1->SR = 0;        // clear the status register
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <ADC_Start+0x44>)
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]

	ADC1->CR2 |= (1<<30);  // start the conversion
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <ADC_Start+0x44>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	4a04      	ldr	r2, [pc, #16]	; (8000474 <ADC_Start+0x44>)
 8000464:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000468:	6093      	str	r3, [r2, #8]
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	40012000 	.word	0x40012000

08000478 <ADC_WaitForConv>:

void ADC_WaitForConv(void){
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	while(!(ADC1->SR & (1<<1))); // WAIT FOR EOC FLAG TO SET
 800047c:	bf00      	nop
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <ADC_WaitForConv+0x20>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f003 0302 	and.w	r3, r3, #2
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f9      	beq.n	800047e <ADC_WaitForConv+0x6>
}
 800048a:	bf00      	nop
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40012000 	.word	0x40012000

0800049c <ADC_GetVal>:
uint16_t ADC_GetVal(void){
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	return ADC1->DR; // Read the Data Register
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <ADC_GetVal+0x14>)
 80004a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a4:	b29b      	uxth	r3, r3
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	40012000 	.word	0x40012000

080004b4 <SysClockConfig>:

void ADC_Disable(void){
	ADC1->CR2 &= ~(1<<0); // DISABLE ADC
}

void SysClockConfig(void){
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
	RCC->CR |= (1 << 16); //HSE on
 80004b8:	4b27      	ldr	r3, [pc, #156]	; (8000558 <SysClockConfig+0xa4>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a26      	ldr	r2, [pc, #152]	; (8000558 <SysClockConfig+0xa4>)
 80004be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004c2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<17)));//Wait for HSE clock ready flag
 80004c4:	bf00      	nop
 80004c6:	4b24      	ldr	r3, [pc, #144]	; (8000558 <SysClockConfig+0xa4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0f9      	beq.n	80004c6 <SysClockConfig+0x12>

	RCC->APB1ENR |= (1<<28);
 80004d2:	4b21      	ldr	r3, [pc, #132]	; (8000558 <SysClockConfig+0xa4>)
 80004d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d6:	4a20      	ldr	r2, [pc, #128]	; (8000558 <SysClockConfig+0xa4>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= (1<<14);
 80004de:	4b1f      	ldr	r3, [pc, #124]	; (800055c <SysClockConfig+0xa8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a1e      	ldr	r2, [pc, #120]	; (800055c <SysClockConfig+0xa8>)
 80004e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004e8:	6013      	str	r3, [r2, #0]

	FLASH->ACR = (1<<9) | (1<<10) | (1<<8) | 0X05;
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <SysClockConfig+0xac>)
 80004ec:	f240 7205 	movw	r2, #1797	; 0x705
 80004f0:	601a      	str	r2, [r3, #0]

	//AHB PRESCALER
	RCC->CFGR |= 0X00;
 80004f2:	4b19      	ldr	r3, [pc, #100]	; (8000558 <SysClockConfig+0xa4>)
 80004f4:	4a18      	ldr	r2, [pc, #96]	; (8000558 <SysClockConfig+0xa4>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	6093      	str	r3, [r2, #8]
	//APB1 PRESCALER
	RCC->CFGR |= 0x00001400U;
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <SysClockConfig+0xa4>)
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	4a16      	ldr	r2, [pc, #88]	; (8000558 <SysClockConfig+0xa4>)
 8000500:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000504:	6093      	str	r3, [r2, #8]
	//APB2 PRESCALER
	RCC->CFGR |= 0x00008000U;
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <SysClockConfig+0xa4>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	4a13      	ldr	r2, [pc, #76]	; (8000558 <SysClockConfig+0xa4>)
 800050c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000510:	6093      	str	r3, [r2, #8]

	//CONFIGURE THE MAIN PLL
	RCC->PLLCFGR = (4 <<0) | (180 << 6) | (0 <<16) | (1<<22);
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <SysClockConfig+0xa4>)
 8000514:	4a13      	ldr	r2, [pc, #76]	; (8000564 <SysClockConfig+0xb0>)
 8000516:	605a      	str	r2, [r3, #4]

	//Enable the PLL and wait for it to become ready
	RCC->CR |= (1<<24);
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <SysClockConfig+0xa4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <SysClockConfig+0xa4>)
 800051e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000522:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<25)));
 8000524:	bf00      	nop
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <SysClockConfig+0xa4>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f9      	beq.n	8000526 <SysClockConfig+0x72>

	//Select the Clock Source and wait for it to be set
	RCC->CFGR |= 0x02;
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <SysClockConfig+0xa4>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	4a08      	ldr	r2, [pc, #32]	; (8000558 <SysClockConfig+0xa4>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & (3<<2)) != 0x08);
 800053e:	bf00      	nop
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <SysClockConfig+0xa4>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	f003 030c 	and.w	r3, r3, #12
 8000548:	2b08      	cmp	r3, #8
 800054a:	d1f9      	bne.n	8000540 <SysClockConfig+0x8c>

}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40023800 	.word	0x40023800
 800055c:	40007000 	.word	0x40007000
 8000560:	40023c00 	.word	0x40023c00
 8000564:	00402d04 	.word	0x00402d04

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800056c:	e7fe      	b.n	800056c <NMI_Handler+0x4>

0800056e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <MemManage_Handler+0x4>

0800057a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <UsageFault_Handler+0x4>

08000586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 f8c6 	bl	8000744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00a      	b.n	80005e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005ce:	f3af 8000 	nop.w
 80005d2:	4601      	mov	r1, r0
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	b2ca      	uxtb	r2, r1
 80005dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dbf0      	blt.n	80005ce <_read+0x12>
  }

  return len;
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800061e:	605a      	str	r2, [r3, #4]
  return 0;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <_isatty>:

int _isatty(int file)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000668:	4a14      	ldr	r2, [pc, #80]	; (80006bc <_sbrk+0x5c>)
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <_sbrk+0x60>)
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <_sbrk+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d102      	bne.n	8000682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <_sbrk+0x64>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <_sbrk+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	429a      	cmp	r2, r3
 800068e:	d207      	bcs.n	80006a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000690:	f000 f9d2 	bl	8000a38 <__errno>
 8000694:	4603      	mov	r3, r0
 8000696:	220c      	movs	r2, #12
 8000698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	e009      	b.n	80006b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <_sbrk+0x64>)
 80006b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006b2:	68fb      	ldr	r3, [r7, #12]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20020000 	.word	0x20020000
 80006c0:	00000400 	.word	0x00000400
 80006c4:	20000080 	.word	0x20000080
 80006c8:	200001d8 	.word	0x200001d8

080006cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <SystemInit+0x20>)
 80006d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006d6:	4a05      	ldr	r2, [pc, #20]	; (80006ec <SystemInit+0x20>)
 80006d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000728 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80006f4:	f7ff ffea 	bl	80006cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	; (8000730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	; (800073c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071e:	f000 f991 	bl	8000a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000722:	f7ff fdeb 	bl	80002fc <main>
  bx  lr    
 8000726:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000734:	0800163c 	.word	0x0800163c
  ldr r2, =_sbss
 8000738:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800073c:	200001d4 	.word	0x200001d4

08000740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC_IRQHandler>
	...

08000744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_IncTick+0x20>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_IncTick+0x24>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_IncTick+0x24>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000000 	.word	0x20000000
 8000768:	20000084 	.word	0x20000084

0800076c <std>:
 800076c:	2300      	movs	r3, #0
 800076e:	b510      	push	{r4, lr}
 8000770:	4604      	mov	r4, r0
 8000772:	e9c0 3300 	strd	r3, r3, [r0]
 8000776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800077a:	6083      	str	r3, [r0, #8]
 800077c:	8181      	strh	r1, [r0, #12]
 800077e:	6643      	str	r3, [r0, #100]	; 0x64
 8000780:	81c2      	strh	r2, [r0, #14]
 8000782:	6183      	str	r3, [r0, #24]
 8000784:	4619      	mov	r1, r3
 8000786:	2208      	movs	r2, #8
 8000788:	305c      	adds	r0, #92	; 0x5c
 800078a:	f000 f906 	bl	800099a <memset>
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <std+0x58>)
 8000790:	6263      	str	r3, [r4, #36]	; 0x24
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <std+0x5c>)
 8000794:	62a3      	str	r3, [r4, #40]	; 0x28
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <std+0x60>)
 8000798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <std+0x64>)
 800079c:	6323      	str	r3, [r4, #48]	; 0x30
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <std+0x68>)
 80007a0:	6224      	str	r4, [r4, #32]
 80007a2:	429c      	cmp	r4, r3
 80007a4:	d006      	beq.n	80007b4 <std+0x48>
 80007a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80007aa:	4294      	cmp	r4, r2
 80007ac:	d002      	beq.n	80007b4 <std+0x48>
 80007ae:	33d0      	adds	r3, #208	; 0xd0
 80007b0:	429c      	cmp	r4, r3
 80007b2:	d105      	bne.n	80007c0 <std+0x54>
 80007b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007bc:	f000 b966 	b.w	8000a8c <__retarget_lock_init_recursive>
 80007c0:	bd10      	pop	{r4, pc}
 80007c2:	bf00      	nop
 80007c4:	08000915 	.word	0x08000915
 80007c8:	08000937 	.word	0x08000937
 80007cc:	0800096f 	.word	0x0800096f
 80007d0:	08000993 	.word	0x08000993
 80007d4:	20000088 	.word	0x20000088

080007d8 <stdio_exit_handler>:
 80007d8:	4a02      	ldr	r2, [pc, #8]	; (80007e4 <stdio_exit_handler+0xc>)
 80007da:	4903      	ldr	r1, [pc, #12]	; (80007e8 <stdio_exit_handler+0x10>)
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <stdio_exit_handler+0x14>)
 80007de:	f000 b869 	b.w	80008b4 <_fwalk_sglue>
 80007e2:	bf00      	nop
 80007e4:	20000004 	.word	0x20000004
 80007e8:	08001339 	.word	0x08001339
 80007ec:	20000010 	.word	0x20000010

080007f0 <cleanup_stdio>:
 80007f0:	6841      	ldr	r1, [r0, #4]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <cleanup_stdio+0x34>)
 80007f4:	4299      	cmp	r1, r3
 80007f6:	b510      	push	{r4, lr}
 80007f8:	4604      	mov	r4, r0
 80007fa:	d001      	beq.n	8000800 <cleanup_stdio+0x10>
 80007fc:	f000 fd9c 	bl	8001338 <_fflush_r>
 8000800:	68a1      	ldr	r1, [r4, #8]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <cleanup_stdio+0x38>)
 8000804:	4299      	cmp	r1, r3
 8000806:	d002      	beq.n	800080e <cleanup_stdio+0x1e>
 8000808:	4620      	mov	r0, r4
 800080a:	f000 fd95 	bl	8001338 <_fflush_r>
 800080e:	68e1      	ldr	r1, [r4, #12]
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <cleanup_stdio+0x3c>)
 8000812:	4299      	cmp	r1, r3
 8000814:	d004      	beq.n	8000820 <cleanup_stdio+0x30>
 8000816:	4620      	mov	r0, r4
 8000818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800081c:	f000 bd8c 	b.w	8001338 <_fflush_r>
 8000820:	bd10      	pop	{r4, pc}
 8000822:	bf00      	nop
 8000824:	20000088 	.word	0x20000088
 8000828:	200000f0 	.word	0x200000f0
 800082c:	20000158 	.word	0x20000158

08000830 <global_stdio_init.part.0>:
 8000830:	b510      	push	{r4, lr}
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <global_stdio_init.part.0+0x30>)
 8000834:	4c0b      	ldr	r4, [pc, #44]	; (8000864 <global_stdio_init.part.0+0x34>)
 8000836:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <global_stdio_init.part.0+0x38>)
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	4620      	mov	r0, r4
 800083c:	2200      	movs	r2, #0
 800083e:	2104      	movs	r1, #4
 8000840:	f7ff ff94 	bl	800076c <std>
 8000844:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000848:	2201      	movs	r2, #1
 800084a:	2109      	movs	r1, #9
 800084c:	f7ff ff8e 	bl	800076c <std>
 8000850:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000854:	2202      	movs	r2, #2
 8000856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800085a:	2112      	movs	r1, #18
 800085c:	f7ff bf86 	b.w	800076c <std>
 8000860:	200001c0 	.word	0x200001c0
 8000864:	20000088 	.word	0x20000088
 8000868:	080007d9 	.word	0x080007d9

0800086c <__sfp_lock_acquire>:
 800086c:	4801      	ldr	r0, [pc, #4]	; (8000874 <__sfp_lock_acquire+0x8>)
 800086e:	f000 b90e 	b.w	8000a8e <__retarget_lock_acquire_recursive>
 8000872:	bf00      	nop
 8000874:	200001c9 	.word	0x200001c9

08000878 <__sfp_lock_release>:
 8000878:	4801      	ldr	r0, [pc, #4]	; (8000880 <__sfp_lock_release+0x8>)
 800087a:	f000 b909 	b.w	8000a90 <__retarget_lock_release_recursive>
 800087e:	bf00      	nop
 8000880:	200001c9 	.word	0x200001c9

08000884 <__sinit>:
 8000884:	b510      	push	{r4, lr}
 8000886:	4604      	mov	r4, r0
 8000888:	f7ff fff0 	bl	800086c <__sfp_lock_acquire>
 800088c:	6a23      	ldr	r3, [r4, #32]
 800088e:	b11b      	cbz	r3, 8000898 <__sinit+0x14>
 8000890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000894:	f7ff bff0 	b.w	8000878 <__sfp_lock_release>
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__sinit+0x28>)
 800089a:	6223      	str	r3, [r4, #32]
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <__sinit+0x2c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f5      	bne.n	8000890 <__sinit+0xc>
 80008a4:	f7ff ffc4 	bl	8000830 <global_stdio_init.part.0>
 80008a8:	e7f2      	b.n	8000890 <__sinit+0xc>
 80008aa:	bf00      	nop
 80008ac:	080007f1 	.word	0x080007f1
 80008b0:	200001c0 	.word	0x200001c0

080008b4 <_fwalk_sglue>:
 80008b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008b8:	4607      	mov	r7, r0
 80008ba:	4688      	mov	r8, r1
 80008bc:	4614      	mov	r4, r2
 80008be:	2600      	movs	r6, #0
 80008c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008c4:	f1b9 0901 	subs.w	r9, r9, #1
 80008c8:	d505      	bpl.n	80008d6 <_fwalk_sglue+0x22>
 80008ca:	6824      	ldr	r4, [r4, #0]
 80008cc:	2c00      	cmp	r4, #0
 80008ce:	d1f7      	bne.n	80008c0 <_fwalk_sglue+0xc>
 80008d0:	4630      	mov	r0, r6
 80008d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008d6:	89ab      	ldrh	r3, [r5, #12]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d907      	bls.n	80008ec <_fwalk_sglue+0x38>
 80008dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008e0:	3301      	adds	r3, #1
 80008e2:	d003      	beq.n	80008ec <_fwalk_sglue+0x38>
 80008e4:	4629      	mov	r1, r5
 80008e6:	4638      	mov	r0, r7
 80008e8:	47c0      	blx	r8
 80008ea:	4306      	orrs	r6, r0
 80008ec:	3568      	adds	r5, #104	; 0x68
 80008ee:	e7e9      	b.n	80008c4 <_fwalk_sglue+0x10>

080008f0 <iprintf>:
 80008f0:	b40f      	push	{r0, r1, r2, r3}
 80008f2:	b507      	push	{r0, r1, r2, lr}
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <iprintf+0x20>)
 80008f6:	ab04      	add	r3, sp, #16
 80008f8:	6808      	ldr	r0, [r1, #0]
 80008fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80008fe:	6881      	ldr	r1, [r0, #8]
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	f000 f9e9 	bl	8000cd8 <_vfiprintf_r>
 8000906:	b003      	add	sp, #12
 8000908:	f85d eb04 	ldr.w	lr, [sp], #4
 800090c:	b004      	add	sp, #16
 800090e:	4770      	bx	lr
 8000910:	2000005c 	.word	0x2000005c

08000914 <__sread>:
 8000914:	b510      	push	{r4, lr}
 8000916:	460c      	mov	r4, r1
 8000918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800091c:	f000 f868 	bl	80009f0 <_read_r>
 8000920:	2800      	cmp	r0, #0
 8000922:	bfab      	itete	ge
 8000924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000926:	89a3      	ldrhlt	r3, [r4, #12]
 8000928:	181b      	addge	r3, r3, r0
 800092a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800092e:	bfac      	ite	ge
 8000930:	6563      	strge	r3, [r4, #84]	; 0x54
 8000932:	81a3      	strhlt	r3, [r4, #12]
 8000934:	bd10      	pop	{r4, pc}

08000936 <__swrite>:
 8000936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800093a:	461f      	mov	r7, r3
 800093c:	898b      	ldrh	r3, [r1, #12]
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	4605      	mov	r5, r0
 8000942:	460c      	mov	r4, r1
 8000944:	4616      	mov	r6, r2
 8000946:	d505      	bpl.n	8000954 <__swrite+0x1e>
 8000948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800094c:	2302      	movs	r3, #2
 800094e:	2200      	movs	r2, #0
 8000950:	f000 f83c 	bl	80009cc <_lseek_r>
 8000954:	89a3      	ldrh	r3, [r4, #12]
 8000956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800095a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800095e:	81a3      	strh	r3, [r4, #12]
 8000960:	4632      	mov	r2, r6
 8000962:	463b      	mov	r3, r7
 8000964:	4628      	mov	r0, r5
 8000966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800096a:	f000 b853 	b.w	8000a14 <_write_r>

0800096e <__sseek>:
 800096e:	b510      	push	{r4, lr}
 8000970:	460c      	mov	r4, r1
 8000972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000976:	f000 f829 	bl	80009cc <_lseek_r>
 800097a:	1c43      	adds	r3, r0, #1
 800097c:	89a3      	ldrh	r3, [r4, #12]
 800097e:	bf15      	itete	ne
 8000980:	6560      	strne	r0, [r4, #84]	; 0x54
 8000982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800098a:	81a3      	strheq	r3, [r4, #12]
 800098c:	bf18      	it	ne
 800098e:	81a3      	strhne	r3, [r4, #12]
 8000990:	bd10      	pop	{r4, pc}

08000992 <__sclose>:
 8000992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000996:	f000 b809 	b.w	80009ac <_close_r>

0800099a <memset>:
 800099a:	4402      	add	r2, r0
 800099c:	4603      	mov	r3, r0
 800099e:	4293      	cmp	r3, r2
 80009a0:	d100      	bne.n	80009a4 <memset+0xa>
 80009a2:	4770      	bx	lr
 80009a4:	f803 1b01 	strb.w	r1, [r3], #1
 80009a8:	e7f9      	b.n	800099e <memset+0x4>
	...

080009ac <_close_r>:
 80009ac:	b538      	push	{r3, r4, r5, lr}
 80009ae:	4d06      	ldr	r5, [pc, #24]	; (80009c8 <_close_r+0x1c>)
 80009b0:	2300      	movs	r3, #0
 80009b2:	4604      	mov	r4, r0
 80009b4:	4608      	mov	r0, r1
 80009b6:	602b      	str	r3, [r5, #0]
 80009b8:	f7ff fe1d 	bl	80005f6 <_close>
 80009bc:	1c43      	adds	r3, r0, #1
 80009be:	d102      	bne.n	80009c6 <_close_r+0x1a>
 80009c0:	682b      	ldr	r3, [r5, #0]
 80009c2:	b103      	cbz	r3, 80009c6 <_close_r+0x1a>
 80009c4:	6023      	str	r3, [r4, #0]
 80009c6:	bd38      	pop	{r3, r4, r5, pc}
 80009c8:	200001c4 	.word	0x200001c4

080009cc <_lseek_r>:
 80009cc:	b538      	push	{r3, r4, r5, lr}
 80009ce:	4d07      	ldr	r5, [pc, #28]	; (80009ec <_lseek_r+0x20>)
 80009d0:	4604      	mov	r4, r0
 80009d2:	4608      	mov	r0, r1
 80009d4:	4611      	mov	r1, r2
 80009d6:	2200      	movs	r2, #0
 80009d8:	602a      	str	r2, [r5, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	f7ff fe32 	bl	8000644 <_lseek>
 80009e0:	1c43      	adds	r3, r0, #1
 80009e2:	d102      	bne.n	80009ea <_lseek_r+0x1e>
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	b103      	cbz	r3, 80009ea <_lseek_r+0x1e>
 80009e8:	6023      	str	r3, [r4, #0]
 80009ea:	bd38      	pop	{r3, r4, r5, pc}
 80009ec:	200001c4 	.word	0x200001c4

080009f0 <_read_r>:
 80009f0:	b538      	push	{r3, r4, r5, lr}
 80009f2:	4d07      	ldr	r5, [pc, #28]	; (8000a10 <_read_r+0x20>)
 80009f4:	4604      	mov	r4, r0
 80009f6:	4608      	mov	r0, r1
 80009f8:	4611      	mov	r1, r2
 80009fa:	2200      	movs	r2, #0
 80009fc:	602a      	str	r2, [r5, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	f7ff fddc 	bl	80005bc <_read>
 8000a04:	1c43      	adds	r3, r0, #1
 8000a06:	d102      	bne.n	8000a0e <_read_r+0x1e>
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	b103      	cbz	r3, 8000a0e <_read_r+0x1e>
 8000a0c:	6023      	str	r3, [r4, #0]
 8000a0e:	bd38      	pop	{r3, r4, r5, pc}
 8000a10:	200001c4 	.word	0x200001c4

08000a14 <_write_r>:
 8000a14:	b538      	push	{r3, r4, r5, lr}
 8000a16:	4d07      	ldr	r5, [pc, #28]	; (8000a34 <_write_r+0x20>)
 8000a18:	4604      	mov	r4, r0
 8000a1a:	4608      	mov	r0, r1
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	2200      	movs	r2, #0
 8000a20:	602a      	str	r2, [r5, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	f7ff fc4b 	bl	80002be <_write>
 8000a28:	1c43      	adds	r3, r0, #1
 8000a2a:	d102      	bne.n	8000a32 <_write_r+0x1e>
 8000a2c:	682b      	ldr	r3, [r5, #0]
 8000a2e:	b103      	cbz	r3, 8000a32 <_write_r+0x1e>
 8000a30:	6023      	str	r3, [r4, #0]
 8000a32:	bd38      	pop	{r3, r4, r5, pc}
 8000a34:	200001c4 	.word	0x200001c4

08000a38 <__errno>:
 8000a38:	4b01      	ldr	r3, [pc, #4]	; (8000a40 <__errno+0x8>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	2000005c 	.word	0x2000005c

08000a44 <__libc_init_array>:
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	4d0d      	ldr	r5, [pc, #52]	; (8000a7c <__libc_init_array+0x38>)
 8000a48:	4c0d      	ldr	r4, [pc, #52]	; (8000a80 <__libc_init_array+0x3c>)
 8000a4a:	1b64      	subs	r4, r4, r5
 8000a4c:	10a4      	asrs	r4, r4, #2
 8000a4e:	2600      	movs	r6, #0
 8000a50:	42a6      	cmp	r6, r4
 8000a52:	d109      	bne.n	8000a68 <__libc_init_array+0x24>
 8000a54:	4d0b      	ldr	r5, [pc, #44]	; (8000a84 <__libc_init_array+0x40>)
 8000a56:	4c0c      	ldr	r4, [pc, #48]	; (8000a88 <__libc_init_array+0x44>)
 8000a58:	f000 fdc0 	bl	80015dc <_init>
 8000a5c:	1b64      	subs	r4, r4, r5
 8000a5e:	10a4      	asrs	r4, r4, #2
 8000a60:	2600      	movs	r6, #0
 8000a62:	42a6      	cmp	r6, r4
 8000a64:	d105      	bne.n	8000a72 <__libc_init_array+0x2e>
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
 8000a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a6c:	4798      	blx	r3
 8000a6e:	3601      	adds	r6, #1
 8000a70:	e7ee      	b.n	8000a50 <__libc_init_array+0xc>
 8000a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a76:	4798      	blx	r3
 8000a78:	3601      	adds	r6, #1
 8000a7a:	e7f2      	b.n	8000a62 <__libc_init_array+0x1e>
 8000a7c:	08001634 	.word	0x08001634
 8000a80:	08001634 	.word	0x08001634
 8000a84:	08001634 	.word	0x08001634
 8000a88:	08001638 	.word	0x08001638

08000a8c <__retarget_lock_init_recursive>:
 8000a8c:	4770      	bx	lr

08000a8e <__retarget_lock_acquire_recursive>:
 8000a8e:	4770      	bx	lr

08000a90 <__retarget_lock_release_recursive>:
 8000a90:	4770      	bx	lr
	...

08000a94 <_free_r>:
 8000a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a96:	2900      	cmp	r1, #0
 8000a98:	d044      	beq.n	8000b24 <_free_r+0x90>
 8000a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a9e:	9001      	str	r0, [sp, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f1a1 0404 	sub.w	r4, r1, #4
 8000aa6:	bfb8      	it	lt
 8000aa8:	18e4      	addlt	r4, r4, r3
 8000aaa:	f000 f8df 	bl	8000c6c <__malloc_lock>
 8000aae:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <_free_r+0x94>)
 8000ab0:	9801      	ldr	r0, [sp, #4]
 8000ab2:	6813      	ldr	r3, [r2, #0]
 8000ab4:	b933      	cbnz	r3, 8000ac4 <_free_r+0x30>
 8000ab6:	6063      	str	r3, [r4, #4]
 8000ab8:	6014      	str	r4, [r2, #0]
 8000aba:	b003      	add	sp, #12
 8000abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ac0:	f000 b8da 	b.w	8000c78 <__malloc_unlock>
 8000ac4:	42a3      	cmp	r3, r4
 8000ac6:	d908      	bls.n	8000ada <_free_r+0x46>
 8000ac8:	6825      	ldr	r5, [r4, #0]
 8000aca:	1961      	adds	r1, r4, r5
 8000acc:	428b      	cmp	r3, r1
 8000ace:	bf01      	itttt	eq
 8000ad0:	6819      	ldreq	r1, [r3, #0]
 8000ad2:	685b      	ldreq	r3, [r3, #4]
 8000ad4:	1949      	addeq	r1, r1, r5
 8000ad6:	6021      	streq	r1, [r4, #0]
 8000ad8:	e7ed      	b.n	8000ab6 <_free_r+0x22>
 8000ada:	461a      	mov	r2, r3
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	b10b      	cbz	r3, 8000ae4 <_free_r+0x50>
 8000ae0:	42a3      	cmp	r3, r4
 8000ae2:	d9fa      	bls.n	8000ada <_free_r+0x46>
 8000ae4:	6811      	ldr	r1, [r2, #0]
 8000ae6:	1855      	adds	r5, r2, r1
 8000ae8:	42a5      	cmp	r5, r4
 8000aea:	d10b      	bne.n	8000b04 <_free_r+0x70>
 8000aec:	6824      	ldr	r4, [r4, #0]
 8000aee:	4421      	add	r1, r4
 8000af0:	1854      	adds	r4, r2, r1
 8000af2:	42a3      	cmp	r3, r4
 8000af4:	6011      	str	r1, [r2, #0]
 8000af6:	d1e0      	bne.n	8000aba <_free_r+0x26>
 8000af8:	681c      	ldr	r4, [r3, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	6053      	str	r3, [r2, #4]
 8000afe:	440c      	add	r4, r1
 8000b00:	6014      	str	r4, [r2, #0]
 8000b02:	e7da      	b.n	8000aba <_free_r+0x26>
 8000b04:	d902      	bls.n	8000b0c <_free_r+0x78>
 8000b06:	230c      	movs	r3, #12
 8000b08:	6003      	str	r3, [r0, #0]
 8000b0a:	e7d6      	b.n	8000aba <_free_r+0x26>
 8000b0c:	6825      	ldr	r5, [r4, #0]
 8000b0e:	1961      	adds	r1, r4, r5
 8000b10:	428b      	cmp	r3, r1
 8000b12:	bf04      	itt	eq
 8000b14:	6819      	ldreq	r1, [r3, #0]
 8000b16:	685b      	ldreq	r3, [r3, #4]
 8000b18:	6063      	str	r3, [r4, #4]
 8000b1a:	bf04      	itt	eq
 8000b1c:	1949      	addeq	r1, r1, r5
 8000b1e:	6021      	streq	r1, [r4, #0]
 8000b20:	6054      	str	r4, [r2, #4]
 8000b22:	e7ca      	b.n	8000aba <_free_r+0x26>
 8000b24:	b003      	add	sp, #12
 8000b26:	bd30      	pop	{r4, r5, pc}
 8000b28:	200001cc 	.word	0x200001cc

08000b2c <sbrk_aligned>:
 8000b2c:	b570      	push	{r4, r5, r6, lr}
 8000b2e:	4e0e      	ldr	r6, [pc, #56]	; (8000b68 <sbrk_aligned+0x3c>)
 8000b30:	460c      	mov	r4, r1
 8000b32:	6831      	ldr	r1, [r6, #0]
 8000b34:	4605      	mov	r5, r0
 8000b36:	b911      	cbnz	r1, 8000b3e <sbrk_aligned+0x12>
 8000b38:	f000 fcbc 	bl	80014b4 <_sbrk_r>
 8000b3c:	6030      	str	r0, [r6, #0]
 8000b3e:	4621      	mov	r1, r4
 8000b40:	4628      	mov	r0, r5
 8000b42:	f000 fcb7 	bl	80014b4 <_sbrk_r>
 8000b46:	1c43      	adds	r3, r0, #1
 8000b48:	d00a      	beq.n	8000b60 <sbrk_aligned+0x34>
 8000b4a:	1cc4      	adds	r4, r0, #3
 8000b4c:	f024 0403 	bic.w	r4, r4, #3
 8000b50:	42a0      	cmp	r0, r4
 8000b52:	d007      	beq.n	8000b64 <sbrk_aligned+0x38>
 8000b54:	1a21      	subs	r1, r4, r0
 8000b56:	4628      	mov	r0, r5
 8000b58:	f000 fcac 	bl	80014b4 <_sbrk_r>
 8000b5c:	3001      	adds	r0, #1
 8000b5e:	d101      	bne.n	8000b64 <sbrk_aligned+0x38>
 8000b60:	f04f 34ff 	mov.w	r4, #4294967295
 8000b64:	4620      	mov	r0, r4
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	200001d0 	.word	0x200001d0

08000b6c <_malloc_r>:
 8000b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b70:	1ccd      	adds	r5, r1, #3
 8000b72:	f025 0503 	bic.w	r5, r5, #3
 8000b76:	3508      	adds	r5, #8
 8000b78:	2d0c      	cmp	r5, #12
 8000b7a:	bf38      	it	cc
 8000b7c:	250c      	movcc	r5, #12
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	4607      	mov	r7, r0
 8000b82:	db01      	blt.n	8000b88 <_malloc_r+0x1c>
 8000b84:	42a9      	cmp	r1, r5
 8000b86:	d905      	bls.n	8000b94 <_malloc_r+0x28>
 8000b88:	230c      	movs	r3, #12
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	4630      	mov	r0, r6
 8000b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c68 <_malloc_r+0xfc>
 8000b98:	f000 f868 	bl	8000c6c <__malloc_lock>
 8000b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8000ba0:	461c      	mov	r4, r3
 8000ba2:	bb5c      	cbnz	r4, 8000bfc <_malloc_r+0x90>
 8000ba4:	4629      	mov	r1, r5
 8000ba6:	4638      	mov	r0, r7
 8000ba8:	f7ff ffc0 	bl	8000b2c <sbrk_aligned>
 8000bac:	1c43      	adds	r3, r0, #1
 8000bae:	4604      	mov	r4, r0
 8000bb0:	d155      	bne.n	8000c5e <_malloc_r+0xf2>
 8000bb2:	f8d8 4000 	ldr.w	r4, [r8]
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	2e00      	cmp	r6, #0
 8000bba:	d145      	bne.n	8000c48 <_malloc_r+0xdc>
 8000bbc:	2c00      	cmp	r4, #0
 8000bbe:	d048      	beq.n	8000c52 <_malloc_r+0xe6>
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	4631      	mov	r1, r6
 8000bc4:	4638      	mov	r0, r7
 8000bc6:	eb04 0903 	add.w	r9, r4, r3
 8000bca:	f000 fc73 	bl	80014b4 <_sbrk_r>
 8000bce:	4581      	cmp	r9, r0
 8000bd0:	d13f      	bne.n	8000c52 <_malloc_r+0xe6>
 8000bd2:	6821      	ldr	r1, [r4, #0]
 8000bd4:	1a6d      	subs	r5, r5, r1
 8000bd6:	4629      	mov	r1, r5
 8000bd8:	4638      	mov	r0, r7
 8000bda:	f7ff ffa7 	bl	8000b2c <sbrk_aligned>
 8000bde:	3001      	adds	r0, #1
 8000be0:	d037      	beq.n	8000c52 <_malloc_r+0xe6>
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	442b      	add	r3, r5
 8000be6:	6023      	str	r3, [r4, #0]
 8000be8:	f8d8 3000 	ldr.w	r3, [r8]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d038      	beq.n	8000c62 <_malloc_r+0xf6>
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	42a2      	cmp	r2, r4
 8000bf4:	d12b      	bne.n	8000c4e <_malloc_r+0xe2>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	e00f      	b.n	8000c1c <_malloc_r+0xb0>
 8000bfc:	6822      	ldr	r2, [r4, #0]
 8000bfe:	1b52      	subs	r2, r2, r5
 8000c00:	d41f      	bmi.n	8000c42 <_malloc_r+0xd6>
 8000c02:	2a0b      	cmp	r2, #11
 8000c04:	d917      	bls.n	8000c36 <_malloc_r+0xca>
 8000c06:	1961      	adds	r1, r4, r5
 8000c08:	42a3      	cmp	r3, r4
 8000c0a:	6025      	str	r5, [r4, #0]
 8000c0c:	bf18      	it	ne
 8000c0e:	6059      	strne	r1, [r3, #4]
 8000c10:	6863      	ldr	r3, [r4, #4]
 8000c12:	bf08      	it	eq
 8000c14:	f8c8 1000 	streq.w	r1, [r8]
 8000c18:	5162      	str	r2, [r4, r5]
 8000c1a:	604b      	str	r3, [r1, #4]
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f104 060b 	add.w	r6, r4, #11
 8000c22:	f000 f829 	bl	8000c78 <__malloc_unlock>
 8000c26:	f026 0607 	bic.w	r6, r6, #7
 8000c2a:	1d23      	adds	r3, r4, #4
 8000c2c:	1af2      	subs	r2, r6, r3
 8000c2e:	d0ae      	beq.n	8000b8e <_malloc_r+0x22>
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	50a3      	str	r3, [r4, r2]
 8000c34:	e7ab      	b.n	8000b8e <_malloc_r+0x22>
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	6862      	ldr	r2, [r4, #4]
 8000c3a:	d1dd      	bne.n	8000bf8 <_malloc_r+0x8c>
 8000c3c:	f8c8 2000 	str.w	r2, [r8]
 8000c40:	e7ec      	b.n	8000c1c <_malloc_r+0xb0>
 8000c42:	4623      	mov	r3, r4
 8000c44:	6864      	ldr	r4, [r4, #4]
 8000c46:	e7ac      	b.n	8000ba2 <_malloc_r+0x36>
 8000c48:	4634      	mov	r4, r6
 8000c4a:	6876      	ldr	r6, [r6, #4]
 8000c4c:	e7b4      	b.n	8000bb8 <_malloc_r+0x4c>
 8000c4e:	4613      	mov	r3, r2
 8000c50:	e7cc      	b.n	8000bec <_malloc_r+0x80>
 8000c52:	230c      	movs	r3, #12
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4638      	mov	r0, r7
 8000c58:	f000 f80e 	bl	8000c78 <__malloc_unlock>
 8000c5c:	e797      	b.n	8000b8e <_malloc_r+0x22>
 8000c5e:	6025      	str	r5, [r4, #0]
 8000c60:	e7dc      	b.n	8000c1c <_malloc_r+0xb0>
 8000c62:	605b      	str	r3, [r3, #4]
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	bf00      	nop
 8000c68:	200001cc 	.word	0x200001cc

08000c6c <__malloc_lock>:
 8000c6c:	4801      	ldr	r0, [pc, #4]	; (8000c74 <__malloc_lock+0x8>)
 8000c6e:	f7ff bf0e 	b.w	8000a8e <__retarget_lock_acquire_recursive>
 8000c72:	bf00      	nop
 8000c74:	200001c8 	.word	0x200001c8

08000c78 <__malloc_unlock>:
 8000c78:	4801      	ldr	r0, [pc, #4]	; (8000c80 <__malloc_unlock+0x8>)
 8000c7a:	f7ff bf09 	b.w	8000a90 <__retarget_lock_release_recursive>
 8000c7e:	bf00      	nop
 8000c80:	200001c8 	.word	0x200001c8

08000c84 <__sfputc_r>:
 8000c84:	6893      	ldr	r3, [r2, #8]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	b410      	push	{r4}
 8000c8c:	6093      	str	r3, [r2, #8]
 8000c8e:	da08      	bge.n	8000ca2 <__sfputc_r+0x1e>
 8000c90:	6994      	ldr	r4, [r2, #24]
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	db01      	blt.n	8000c9a <__sfputc_r+0x16>
 8000c96:	290a      	cmp	r1, #10
 8000c98:	d103      	bne.n	8000ca2 <__sfputc_r+0x1e>
 8000c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c9e:	f000 bb73 	b.w	8001388 <__swbuf_r>
 8000ca2:	6813      	ldr	r3, [r2, #0]
 8000ca4:	1c58      	adds	r0, r3, #1
 8000ca6:	6010      	str	r0, [r2, #0]
 8000ca8:	7019      	strb	r1, [r3, #0]
 8000caa:	4608      	mov	r0, r1
 8000cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <__sfputs_r>:
 8000cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	460f      	mov	r7, r1
 8000cb8:	4614      	mov	r4, r2
 8000cba:	18d5      	adds	r5, r2, r3
 8000cbc:	42ac      	cmp	r4, r5
 8000cbe:	d101      	bne.n	8000cc4 <__sfputs_r+0x12>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e007      	b.n	8000cd4 <__sfputs_r+0x22>
 8000cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cc8:	463a      	mov	r2, r7
 8000cca:	4630      	mov	r0, r6
 8000ccc:	f7ff ffda 	bl	8000c84 <__sfputc_r>
 8000cd0:	1c43      	adds	r3, r0, #1
 8000cd2:	d1f3      	bne.n	8000cbc <__sfputs_r+0xa>
 8000cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cd8 <_vfiprintf_r>:
 8000cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cdc:	460d      	mov	r5, r1
 8000cde:	b09d      	sub	sp, #116	; 0x74
 8000ce0:	4614      	mov	r4, r2
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	4606      	mov	r6, r0
 8000ce6:	b118      	cbz	r0, 8000cf0 <_vfiprintf_r+0x18>
 8000ce8:	6a03      	ldr	r3, [r0, #32]
 8000cea:	b90b      	cbnz	r3, 8000cf0 <_vfiprintf_r+0x18>
 8000cec:	f7ff fdca 	bl	8000884 <__sinit>
 8000cf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cf2:	07d9      	lsls	r1, r3, #31
 8000cf4:	d405      	bmi.n	8000d02 <_vfiprintf_r+0x2a>
 8000cf6:	89ab      	ldrh	r3, [r5, #12]
 8000cf8:	059a      	lsls	r2, r3, #22
 8000cfa:	d402      	bmi.n	8000d02 <_vfiprintf_r+0x2a>
 8000cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cfe:	f7ff fec6 	bl	8000a8e <__retarget_lock_acquire_recursive>
 8000d02:	89ab      	ldrh	r3, [r5, #12]
 8000d04:	071b      	lsls	r3, r3, #28
 8000d06:	d501      	bpl.n	8000d0c <_vfiprintf_r+0x34>
 8000d08:	692b      	ldr	r3, [r5, #16]
 8000d0a:	b99b      	cbnz	r3, 8000d34 <_vfiprintf_r+0x5c>
 8000d0c:	4629      	mov	r1, r5
 8000d0e:	4630      	mov	r0, r6
 8000d10:	f000 fb78 	bl	8001404 <__swsetup_r>
 8000d14:	b170      	cbz	r0, 8000d34 <_vfiprintf_r+0x5c>
 8000d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d18:	07dc      	lsls	r4, r3, #31
 8000d1a:	d504      	bpl.n	8000d26 <_vfiprintf_r+0x4e>
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	b01d      	add	sp, #116	; 0x74
 8000d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d26:	89ab      	ldrh	r3, [r5, #12]
 8000d28:	0598      	lsls	r0, r3, #22
 8000d2a:	d4f7      	bmi.n	8000d1c <_vfiprintf_r+0x44>
 8000d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d2e:	f7ff feaf 	bl	8000a90 <__retarget_lock_release_recursive>
 8000d32:	e7f3      	b.n	8000d1c <_vfiprintf_r+0x44>
 8000d34:	2300      	movs	r3, #0
 8000d36:	9309      	str	r3, [sp, #36]	; 0x24
 8000d38:	2320      	movs	r3, #32
 8000d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d42:	2330      	movs	r3, #48	; 0x30
 8000d44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000ef8 <_vfiprintf_r+0x220>
 8000d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d4c:	f04f 0901 	mov.w	r9, #1
 8000d50:	4623      	mov	r3, r4
 8000d52:	469a      	mov	sl, r3
 8000d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d58:	b10a      	cbz	r2, 8000d5e <_vfiprintf_r+0x86>
 8000d5a:	2a25      	cmp	r2, #37	; 0x25
 8000d5c:	d1f9      	bne.n	8000d52 <_vfiprintf_r+0x7a>
 8000d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8000d62:	d00b      	beq.n	8000d7c <_vfiprintf_r+0xa4>
 8000d64:	465b      	mov	r3, fp
 8000d66:	4622      	mov	r2, r4
 8000d68:	4629      	mov	r1, r5
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	f7ff ffa1 	bl	8000cb2 <__sfputs_r>
 8000d70:	3001      	adds	r0, #1
 8000d72:	f000 80a9 	beq.w	8000ec8 <_vfiprintf_r+0x1f0>
 8000d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d78:	445a      	add	r2, fp
 8000d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8000d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 80a1 	beq.w	8000ec8 <_vfiprintf_r+0x1f0>
 8000d86:	2300      	movs	r3, #0
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d90:	f10a 0a01 	add.w	sl, sl, #1
 8000d94:	9304      	str	r3, [sp, #16]
 8000d96:	9307      	str	r3, [sp, #28]
 8000d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8000d9e:	4654      	mov	r4, sl
 8000da0:	2205      	movs	r2, #5
 8000da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000da6:	4854      	ldr	r0, [pc, #336]	; (8000ef8 <_vfiprintf_r+0x220>)
 8000da8:	f7ff fa12 	bl	80001d0 <memchr>
 8000dac:	9a04      	ldr	r2, [sp, #16]
 8000dae:	b9d8      	cbnz	r0, 8000de8 <_vfiprintf_r+0x110>
 8000db0:	06d1      	lsls	r1, r2, #27
 8000db2:	bf44      	itt	mi
 8000db4:	2320      	movmi	r3, #32
 8000db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dba:	0713      	lsls	r3, r2, #28
 8000dbc:	bf44      	itt	mi
 8000dbe:	232b      	movmi	r3, #43	; 0x2b
 8000dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8000dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8000dca:	d015      	beq.n	8000df8 <_vfiprintf_r+0x120>
 8000dcc:	9a07      	ldr	r2, [sp, #28]
 8000dce:	4654      	mov	r4, sl
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f04f 0c0a 	mov.w	ip, #10
 8000dd6:	4621      	mov	r1, r4
 8000dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ddc:	3b30      	subs	r3, #48	; 0x30
 8000dde:	2b09      	cmp	r3, #9
 8000de0:	d94d      	bls.n	8000e7e <_vfiprintf_r+0x1a6>
 8000de2:	b1b0      	cbz	r0, 8000e12 <_vfiprintf_r+0x13a>
 8000de4:	9207      	str	r2, [sp, #28]
 8000de6:	e014      	b.n	8000e12 <_vfiprintf_r+0x13a>
 8000de8:	eba0 0308 	sub.w	r3, r0, r8
 8000dec:	fa09 f303 	lsl.w	r3, r9, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	9304      	str	r3, [sp, #16]
 8000df4:	46a2      	mov	sl, r4
 8000df6:	e7d2      	b.n	8000d9e <_vfiprintf_r+0xc6>
 8000df8:	9b03      	ldr	r3, [sp, #12]
 8000dfa:	1d19      	adds	r1, r3, #4
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	9103      	str	r1, [sp, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bfbb      	ittet	lt
 8000e04:	425b      	neglt	r3, r3
 8000e06:	f042 0202 	orrlt.w	r2, r2, #2
 8000e0a:	9307      	strge	r3, [sp, #28]
 8000e0c:	9307      	strlt	r3, [sp, #28]
 8000e0e:	bfb8      	it	lt
 8000e10:	9204      	strlt	r2, [sp, #16]
 8000e12:	7823      	ldrb	r3, [r4, #0]
 8000e14:	2b2e      	cmp	r3, #46	; 0x2e
 8000e16:	d10c      	bne.n	8000e32 <_vfiprintf_r+0x15a>
 8000e18:	7863      	ldrb	r3, [r4, #1]
 8000e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8000e1c:	d134      	bne.n	8000e88 <_vfiprintf_r+0x1b0>
 8000e1e:	9b03      	ldr	r3, [sp, #12]
 8000e20:	1d1a      	adds	r2, r3, #4
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	9203      	str	r2, [sp, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bfb8      	it	lt
 8000e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e2e:	3402      	adds	r4, #2
 8000e30:	9305      	str	r3, [sp, #20]
 8000e32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000f08 <_vfiprintf_r+0x230>
 8000e36:	7821      	ldrb	r1, [r4, #0]
 8000e38:	2203      	movs	r2, #3
 8000e3a:	4650      	mov	r0, sl
 8000e3c:	f7ff f9c8 	bl	80001d0 <memchr>
 8000e40:	b138      	cbz	r0, 8000e52 <_vfiprintf_r+0x17a>
 8000e42:	9b04      	ldr	r3, [sp, #16]
 8000e44:	eba0 000a 	sub.w	r0, r0, sl
 8000e48:	2240      	movs	r2, #64	; 0x40
 8000e4a:	4082      	lsls	r2, r0
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	3401      	adds	r4, #1
 8000e50:	9304      	str	r3, [sp, #16]
 8000e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e56:	4829      	ldr	r0, [pc, #164]	; (8000efc <_vfiprintf_r+0x224>)
 8000e58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e5c:	2206      	movs	r2, #6
 8000e5e:	f7ff f9b7 	bl	80001d0 <memchr>
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d03f      	beq.n	8000ee6 <_vfiprintf_r+0x20e>
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <_vfiprintf_r+0x228>)
 8000e68:	bb1b      	cbnz	r3, 8000eb2 <_vfiprintf_r+0x1da>
 8000e6a:	9b03      	ldr	r3, [sp, #12]
 8000e6c:	3307      	adds	r3, #7
 8000e6e:	f023 0307 	bic.w	r3, r3, #7
 8000e72:	3308      	adds	r3, #8
 8000e74:	9303      	str	r3, [sp, #12]
 8000e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e78:	443b      	add	r3, r7
 8000e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8000e7c:	e768      	b.n	8000d50 <_vfiprintf_r+0x78>
 8000e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e82:	460c      	mov	r4, r1
 8000e84:	2001      	movs	r0, #1
 8000e86:	e7a6      	b.n	8000dd6 <_vfiprintf_r+0xfe>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	3401      	adds	r4, #1
 8000e8c:	9305      	str	r3, [sp, #20]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f04f 0c0a 	mov.w	ip, #10
 8000e94:	4620      	mov	r0, r4
 8000e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e9a:	3a30      	subs	r2, #48	; 0x30
 8000e9c:	2a09      	cmp	r2, #9
 8000e9e:	d903      	bls.n	8000ea8 <_vfiprintf_r+0x1d0>
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0c6      	beq.n	8000e32 <_vfiprintf_r+0x15a>
 8000ea4:	9105      	str	r1, [sp, #20]
 8000ea6:	e7c4      	b.n	8000e32 <_vfiprintf_r+0x15a>
 8000ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000eac:	4604      	mov	r4, r0
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e7f0      	b.n	8000e94 <_vfiprintf_r+0x1bc>
 8000eb2:	ab03      	add	r3, sp, #12
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	462a      	mov	r2, r5
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <_vfiprintf_r+0x22c>)
 8000eba:	a904      	add	r1, sp, #16
 8000ebc:	4630      	mov	r0, r6
 8000ebe:	f3af 8000 	nop.w
 8000ec2:	4607      	mov	r7, r0
 8000ec4:	1c78      	adds	r0, r7, #1
 8000ec6:	d1d6      	bne.n	8000e76 <_vfiprintf_r+0x19e>
 8000ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000eca:	07d9      	lsls	r1, r3, #31
 8000ecc:	d405      	bmi.n	8000eda <_vfiprintf_r+0x202>
 8000ece:	89ab      	ldrh	r3, [r5, #12]
 8000ed0:	059a      	lsls	r2, r3, #22
 8000ed2:	d402      	bmi.n	8000eda <_vfiprintf_r+0x202>
 8000ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ed6:	f7ff fddb 	bl	8000a90 <__retarget_lock_release_recursive>
 8000eda:	89ab      	ldrh	r3, [r5, #12]
 8000edc:	065b      	lsls	r3, r3, #25
 8000ede:	f53f af1d 	bmi.w	8000d1c <_vfiprintf_r+0x44>
 8000ee2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ee4:	e71c      	b.n	8000d20 <_vfiprintf_r+0x48>
 8000ee6:	ab03      	add	r3, sp, #12
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	462a      	mov	r2, r5
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <_vfiprintf_r+0x22c>)
 8000eee:	a904      	add	r1, sp, #16
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	f000 f879 	bl	8000fe8 <_printf_i>
 8000ef6:	e7e4      	b.n	8000ec2 <_vfiprintf_r+0x1ea>
 8000ef8:	08001601 	.word	0x08001601
 8000efc:	0800160b 	.word	0x0800160b
 8000f00:	00000000 	.word	0x00000000
 8000f04:	08000cb3 	.word	0x08000cb3
 8000f08:	08001607 	.word	0x08001607

08000f0c <_printf_common>:
 8000f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f10:	4616      	mov	r6, r2
 8000f12:	4699      	mov	r9, r3
 8000f14:	688a      	ldr	r2, [r1, #8]
 8000f16:	690b      	ldr	r3, [r1, #16]
 8000f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	bfb8      	it	lt
 8000f20:	4613      	movlt	r3, r2
 8000f22:	6033      	str	r3, [r6, #0]
 8000f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f28:	4607      	mov	r7, r0
 8000f2a:	460c      	mov	r4, r1
 8000f2c:	b10a      	cbz	r2, 8000f32 <_printf_common+0x26>
 8000f2e:	3301      	adds	r3, #1
 8000f30:	6033      	str	r3, [r6, #0]
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	0699      	lsls	r1, r3, #26
 8000f36:	bf42      	ittt	mi
 8000f38:	6833      	ldrmi	r3, [r6, #0]
 8000f3a:	3302      	addmi	r3, #2
 8000f3c:	6033      	strmi	r3, [r6, #0]
 8000f3e:	6825      	ldr	r5, [r4, #0]
 8000f40:	f015 0506 	ands.w	r5, r5, #6
 8000f44:	d106      	bne.n	8000f54 <_printf_common+0x48>
 8000f46:	f104 0a19 	add.w	sl, r4, #25
 8000f4a:	68e3      	ldr	r3, [r4, #12]
 8000f4c:	6832      	ldr	r2, [r6, #0]
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	42ab      	cmp	r3, r5
 8000f52:	dc26      	bgt.n	8000fa2 <_printf_common+0x96>
 8000f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f58:	1e13      	subs	r3, r2, #0
 8000f5a:	6822      	ldr	r2, [r4, #0]
 8000f5c:	bf18      	it	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	0692      	lsls	r2, r2, #26
 8000f62:	d42b      	bmi.n	8000fbc <_printf_common+0xb0>
 8000f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f68:	4649      	mov	r1, r9
 8000f6a:	4638      	mov	r0, r7
 8000f6c:	47c0      	blx	r8
 8000f6e:	3001      	adds	r0, #1
 8000f70:	d01e      	beq.n	8000fb0 <_printf_common+0xa4>
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	6922      	ldr	r2, [r4, #16]
 8000f76:	f003 0306 	and.w	r3, r3, #6
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf02      	ittt	eq
 8000f7e:	68e5      	ldreq	r5, [r4, #12]
 8000f80:	6833      	ldreq	r3, [r6, #0]
 8000f82:	1aed      	subeq	r5, r5, r3
 8000f84:	68a3      	ldr	r3, [r4, #8]
 8000f86:	bf0c      	ite	eq
 8000f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f8c:	2500      	movne	r5, #0
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	bfc4      	itt	gt
 8000f92:	1a9b      	subgt	r3, r3, r2
 8000f94:	18ed      	addgt	r5, r5, r3
 8000f96:	2600      	movs	r6, #0
 8000f98:	341a      	adds	r4, #26
 8000f9a:	42b5      	cmp	r5, r6
 8000f9c:	d11a      	bne.n	8000fd4 <_printf_common+0xc8>
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	e008      	b.n	8000fb4 <_printf_common+0xa8>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	4652      	mov	r2, sl
 8000fa6:	4649      	mov	r1, r9
 8000fa8:	4638      	mov	r0, r7
 8000faa:	47c0      	blx	r8
 8000fac:	3001      	adds	r0, #1
 8000fae:	d103      	bne.n	8000fb8 <_printf_common+0xac>
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb8:	3501      	adds	r5, #1
 8000fba:	e7c6      	b.n	8000f4a <_printf_common+0x3e>
 8000fbc:	18e1      	adds	r1, r4, r3
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	2030      	movs	r0, #48	; 0x30
 8000fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000fc6:	4422      	add	r2, r4
 8000fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	e7c7      	b.n	8000f64 <_printf_common+0x58>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	4649      	mov	r1, r9
 8000fda:	4638      	mov	r0, r7
 8000fdc:	47c0      	blx	r8
 8000fde:	3001      	adds	r0, #1
 8000fe0:	d0e6      	beq.n	8000fb0 <_printf_common+0xa4>
 8000fe2:	3601      	adds	r6, #1
 8000fe4:	e7d9      	b.n	8000f9a <_printf_common+0x8e>
	...

08000fe8 <_printf_i>:
 8000fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fec:	7e0f      	ldrb	r7, [r1, #24]
 8000fee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ff0:	2f78      	cmp	r7, #120	; 0x78
 8000ff2:	4691      	mov	r9, r2
 8000ff4:	4680      	mov	r8, r0
 8000ff6:	460c      	mov	r4, r1
 8000ff8:	469a      	mov	sl, r3
 8000ffa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ffe:	d807      	bhi.n	8001010 <_printf_i+0x28>
 8001000:	2f62      	cmp	r7, #98	; 0x62
 8001002:	d80a      	bhi.n	800101a <_printf_i+0x32>
 8001004:	2f00      	cmp	r7, #0
 8001006:	f000 80d4 	beq.w	80011b2 <_printf_i+0x1ca>
 800100a:	2f58      	cmp	r7, #88	; 0x58
 800100c:	f000 80c0 	beq.w	8001190 <_printf_i+0x1a8>
 8001010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001018:	e03a      	b.n	8001090 <_printf_i+0xa8>
 800101a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800101e:	2b15      	cmp	r3, #21
 8001020:	d8f6      	bhi.n	8001010 <_printf_i+0x28>
 8001022:	a101      	add	r1, pc, #4	; (adr r1, 8001028 <_printf_i+0x40>)
 8001024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001028:	08001081 	.word	0x08001081
 800102c:	08001095 	.word	0x08001095
 8001030:	08001011 	.word	0x08001011
 8001034:	08001011 	.word	0x08001011
 8001038:	08001011 	.word	0x08001011
 800103c:	08001011 	.word	0x08001011
 8001040:	08001095 	.word	0x08001095
 8001044:	08001011 	.word	0x08001011
 8001048:	08001011 	.word	0x08001011
 800104c:	08001011 	.word	0x08001011
 8001050:	08001011 	.word	0x08001011
 8001054:	08001199 	.word	0x08001199
 8001058:	080010c1 	.word	0x080010c1
 800105c:	08001153 	.word	0x08001153
 8001060:	08001011 	.word	0x08001011
 8001064:	08001011 	.word	0x08001011
 8001068:	080011bb 	.word	0x080011bb
 800106c:	08001011 	.word	0x08001011
 8001070:	080010c1 	.word	0x080010c1
 8001074:	08001011 	.word	0x08001011
 8001078:	08001011 	.word	0x08001011
 800107c:	0800115b 	.word	0x0800115b
 8001080:	682b      	ldr	r3, [r5, #0]
 8001082:	1d1a      	adds	r2, r3, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	602a      	str	r2, [r5, #0]
 8001088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800108c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001090:	2301      	movs	r3, #1
 8001092:	e09f      	b.n	80011d4 <_printf_i+0x1ec>
 8001094:	6820      	ldr	r0, [r4, #0]
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	0607      	lsls	r7, r0, #24
 800109a:	f103 0104 	add.w	r1, r3, #4
 800109e:	6029      	str	r1, [r5, #0]
 80010a0:	d501      	bpl.n	80010a6 <_printf_i+0xbe>
 80010a2:	681e      	ldr	r6, [r3, #0]
 80010a4:	e003      	b.n	80010ae <_printf_i+0xc6>
 80010a6:	0646      	lsls	r6, r0, #25
 80010a8:	d5fb      	bpl.n	80010a2 <_printf_i+0xba>
 80010aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80010ae:	2e00      	cmp	r6, #0
 80010b0:	da03      	bge.n	80010ba <_printf_i+0xd2>
 80010b2:	232d      	movs	r3, #45	; 0x2d
 80010b4:	4276      	negs	r6, r6
 80010b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010ba:	485a      	ldr	r0, [pc, #360]	; (8001224 <_printf_i+0x23c>)
 80010bc:	230a      	movs	r3, #10
 80010be:	e012      	b.n	80010e6 <_printf_i+0xfe>
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	6820      	ldr	r0, [r4, #0]
 80010c4:	1d19      	adds	r1, r3, #4
 80010c6:	6029      	str	r1, [r5, #0]
 80010c8:	0605      	lsls	r5, r0, #24
 80010ca:	d501      	bpl.n	80010d0 <_printf_i+0xe8>
 80010cc:	681e      	ldr	r6, [r3, #0]
 80010ce:	e002      	b.n	80010d6 <_printf_i+0xee>
 80010d0:	0641      	lsls	r1, r0, #25
 80010d2:	d5fb      	bpl.n	80010cc <_printf_i+0xe4>
 80010d4:	881e      	ldrh	r6, [r3, #0]
 80010d6:	4853      	ldr	r0, [pc, #332]	; (8001224 <_printf_i+0x23c>)
 80010d8:	2f6f      	cmp	r7, #111	; 0x6f
 80010da:	bf0c      	ite	eq
 80010dc:	2308      	moveq	r3, #8
 80010de:	230a      	movne	r3, #10
 80010e0:	2100      	movs	r1, #0
 80010e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010e6:	6865      	ldr	r5, [r4, #4]
 80010e8:	60a5      	str	r5, [r4, #8]
 80010ea:	2d00      	cmp	r5, #0
 80010ec:	bfa2      	ittt	ge
 80010ee:	6821      	ldrge	r1, [r4, #0]
 80010f0:	f021 0104 	bicge.w	r1, r1, #4
 80010f4:	6021      	strge	r1, [r4, #0]
 80010f6:	b90e      	cbnz	r6, 80010fc <_printf_i+0x114>
 80010f8:	2d00      	cmp	r5, #0
 80010fa:	d04b      	beq.n	8001194 <_printf_i+0x1ac>
 80010fc:	4615      	mov	r5, r2
 80010fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8001102:	fb03 6711 	mls	r7, r3, r1, r6
 8001106:	5dc7      	ldrb	r7, [r0, r7]
 8001108:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800110c:	4637      	mov	r7, r6
 800110e:	42bb      	cmp	r3, r7
 8001110:	460e      	mov	r6, r1
 8001112:	d9f4      	bls.n	80010fe <_printf_i+0x116>
 8001114:	2b08      	cmp	r3, #8
 8001116:	d10b      	bne.n	8001130 <_printf_i+0x148>
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	07de      	lsls	r6, r3, #31
 800111c:	d508      	bpl.n	8001130 <_printf_i+0x148>
 800111e:	6923      	ldr	r3, [r4, #16]
 8001120:	6861      	ldr	r1, [r4, #4]
 8001122:	4299      	cmp	r1, r3
 8001124:	bfde      	ittt	le
 8001126:	2330      	movle	r3, #48	; 0x30
 8001128:	f805 3c01 	strble.w	r3, [r5, #-1]
 800112c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001130:	1b52      	subs	r2, r2, r5
 8001132:	6122      	str	r2, [r4, #16]
 8001134:	f8cd a000 	str.w	sl, [sp]
 8001138:	464b      	mov	r3, r9
 800113a:	aa03      	add	r2, sp, #12
 800113c:	4621      	mov	r1, r4
 800113e:	4640      	mov	r0, r8
 8001140:	f7ff fee4 	bl	8000f0c <_printf_common>
 8001144:	3001      	adds	r0, #1
 8001146:	d14a      	bne.n	80011de <_printf_i+0x1f6>
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	b004      	add	sp, #16
 800114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	6023      	str	r3, [r4, #0]
 800115a:	4833      	ldr	r0, [pc, #204]	; (8001228 <_printf_i+0x240>)
 800115c:	2778      	movs	r7, #120	; 0x78
 800115e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	6829      	ldr	r1, [r5, #0]
 8001166:	061f      	lsls	r7, r3, #24
 8001168:	f851 6b04 	ldr.w	r6, [r1], #4
 800116c:	d402      	bmi.n	8001174 <_printf_i+0x18c>
 800116e:	065f      	lsls	r7, r3, #25
 8001170:	bf48      	it	mi
 8001172:	b2b6      	uxthmi	r6, r6
 8001174:	07df      	lsls	r7, r3, #31
 8001176:	bf48      	it	mi
 8001178:	f043 0320 	orrmi.w	r3, r3, #32
 800117c:	6029      	str	r1, [r5, #0]
 800117e:	bf48      	it	mi
 8001180:	6023      	strmi	r3, [r4, #0]
 8001182:	b91e      	cbnz	r6, 800118c <_printf_i+0x1a4>
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	f023 0320 	bic.w	r3, r3, #32
 800118a:	6023      	str	r3, [r4, #0]
 800118c:	2310      	movs	r3, #16
 800118e:	e7a7      	b.n	80010e0 <_printf_i+0xf8>
 8001190:	4824      	ldr	r0, [pc, #144]	; (8001224 <_printf_i+0x23c>)
 8001192:	e7e4      	b.n	800115e <_printf_i+0x176>
 8001194:	4615      	mov	r5, r2
 8001196:	e7bd      	b.n	8001114 <_printf_i+0x12c>
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	6826      	ldr	r6, [r4, #0]
 800119c:	6961      	ldr	r1, [r4, #20]
 800119e:	1d18      	adds	r0, r3, #4
 80011a0:	6028      	str	r0, [r5, #0]
 80011a2:	0635      	lsls	r5, r6, #24
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	d501      	bpl.n	80011ac <_printf_i+0x1c4>
 80011a8:	6019      	str	r1, [r3, #0]
 80011aa:	e002      	b.n	80011b2 <_printf_i+0x1ca>
 80011ac:	0670      	lsls	r0, r6, #25
 80011ae:	d5fb      	bpl.n	80011a8 <_printf_i+0x1c0>
 80011b0:	8019      	strh	r1, [r3, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	6123      	str	r3, [r4, #16]
 80011b6:	4615      	mov	r5, r2
 80011b8:	e7bc      	b.n	8001134 <_printf_i+0x14c>
 80011ba:	682b      	ldr	r3, [r5, #0]
 80011bc:	1d1a      	adds	r2, r3, #4
 80011be:	602a      	str	r2, [r5, #0]
 80011c0:	681d      	ldr	r5, [r3, #0]
 80011c2:	6862      	ldr	r2, [r4, #4]
 80011c4:	2100      	movs	r1, #0
 80011c6:	4628      	mov	r0, r5
 80011c8:	f7ff f802 	bl	80001d0 <memchr>
 80011cc:	b108      	cbz	r0, 80011d2 <_printf_i+0x1ea>
 80011ce:	1b40      	subs	r0, r0, r5
 80011d0:	6060      	str	r0, [r4, #4]
 80011d2:	6863      	ldr	r3, [r4, #4]
 80011d4:	6123      	str	r3, [r4, #16]
 80011d6:	2300      	movs	r3, #0
 80011d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011dc:	e7aa      	b.n	8001134 <_printf_i+0x14c>
 80011de:	6923      	ldr	r3, [r4, #16]
 80011e0:	462a      	mov	r2, r5
 80011e2:	4649      	mov	r1, r9
 80011e4:	4640      	mov	r0, r8
 80011e6:	47d0      	blx	sl
 80011e8:	3001      	adds	r0, #1
 80011ea:	d0ad      	beq.n	8001148 <_printf_i+0x160>
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	079b      	lsls	r3, r3, #30
 80011f0:	d413      	bmi.n	800121a <_printf_i+0x232>
 80011f2:	68e0      	ldr	r0, [r4, #12]
 80011f4:	9b03      	ldr	r3, [sp, #12]
 80011f6:	4298      	cmp	r0, r3
 80011f8:	bfb8      	it	lt
 80011fa:	4618      	movlt	r0, r3
 80011fc:	e7a6      	b.n	800114c <_printf_i+0x164>
 80011fe:	2301      	movs	r3, #1
 8001200:	4632      	mov	r2, r6
 8001202:	4649      	mov	r1, r9
 8001204:	4640      	mov	r0, r8
 8001206:	47d0      	blx	sl
 8001208:	3001      	adds	r0, #1
 800120a:	d09d      	beq.n	8001148 <_printf_i+0x160>
 800120c:	3501      	adds	r5, #1
 800120e:	68e3      	ldr	r3, [r4, #12]
 8001210:	9903      	ldr	r1, [sp, #12]
 8001212:	1a5b      	subs	r3, r3, r1
 8001214:	42ab      	cmp	r3, r5
 8001216:	dcf2      	bgt.n	80011fe <_printf_i+0x216>
 8001218:	e7eb      	b.n	80011f2 <_printf_i+0x20a>
 800121a:	2500      	movs	r5, #0
 800121c:	f104 0619 	add.w	r6, r4, #25
 8001220:	e7f5      	b.n	800120e <_printf_i+0x226>
 8001222:	bf00      	nop
 8001224:	08001612 	.word	0x08001612
 8001228:	08001623 	.word	0x08001623

0800122c <__sflush_r>:
 800122c:	898a      	ldrh	r2, [r1, #12]
 800122e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001232:	4605      	mov	r5, r0
 8001234:	0710      	lsls	r0, r2, #28
 8001236:	460c      	mov	r4, r1
 8001238:	d458      	bmi.n	80012ec <__sflush_r+0xc0>
 800123a:	684b      	ldr	r3, [r1, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	dc05      	bgt.n	800124c <__sflush_r+0x20>
 8001240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001242:	2b00      	cmp	r3, #0
 8001244:	dc02      	bgt.n	800124c <__sflush_r+0x20>
 8001246:	2000      	movs	r0, #0
 8001248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800124c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800124e:	2e00      	cmp	r6, #0
 8001250:	d0f9      	beq.n	8001246 <__sflush_r+0x1a>
 8001252:	2300      	movs	r3, #0
 8001254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001258:	682f      	ldr	r7, [r5, #0]
 800125a:	6a21      	ldr	r1, [r4, #32]
 800125c:	602b      	str	r3, [r5, #0]
 800125e:	d032      	beq.n	80012c6 <__sflush_r+0x9a>
 8001260:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001262:	89a3      	ldrh	r3, [r4, #12]
 8001264:	075a      	lsls	r2, r3, #29
 8001266:	d505      	bpl.n	8001274 <__sflush_r+0x48>
 8001268:	6863      	ldr	r3, [r4, #4]
 800126a:	1ac0      	subs	r0, r0, r3
 800126c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800126e:	b10b      	cbz	r3, 8001274 <__sflush_r+0x48>
 8001270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001272:	1ac0      	subs	r0, r0, r3
 8001274:	2300      	movs	r3, #0
 8001276:	4602      	mov	r2, r0
 8001278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800127a:	6a21      	ldr	r1, [r4, #32]
 800127c:	4628      	mov	r0, r5
 800127e:	47b0      	blx	r6
 8001280:	1c43      	adds	r3, r0, #1
 8001282:	89a3      	ldrh	r3, [r4, #12]
 8001284:	d106      	bne.n	8001294 <__sflush_r+0x68>
 8001286:	6829      	ldr	r1, [r5, #0]
 8001288:	291d      	cmp	r1, #29
 800128a:	d82b      	bhi.n	80012e4 <__sflush_r+0xb8>
 800128c:	4a29      	ldr	r2, [pc, #164]	; (8001334 <__sflush_r+0x108>)
 800128e:	410a      	asrs	r2, r1
 8001290:	07d6      	lsls	r6, r2, #31
 8001292:	d427      	bmi.n	80012e4 <__sflush_r+0xb8>
 8001294:	2200      	movs	r2, #0
 8001296:	6062      	str	r2, [r4, #4]
 8001298:	04d9      	lsls	r1, r3, #19
 800129a:	6922      	ldr	r2, [r4, #16]
 800129c:	6022      	str	r2, [r4, #0]
 800129e:	d504      	bpl.n	80012aa <__sflush_r+0x7e>
 80012a0:	1c42      	adds	r2, r0, #1
 80012a2:	d101      	bne.n	80012a8 <__sflush_r+0x7c>
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	b903      	cbnz	r3, 80012aa <__sflush_r+0x7e>
 80012a8:	6560      	str	r0, [r4, #84]	; 0x54
 80012aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012ac:	602f      	str	r7, [r5, #0]
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d0c9      	beq.n	8001246 <__sflush_r+0x1a>
 80012b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012b6:	4299      	cmp	r1, r3
 80012b8:	d002      	beq.n	80012c0 <__sflush_r+0x94>
 80012ba:	4628      	mov	r0, r5
 80012bc:	f7ff fbea 	bl	8000a94 <_free_r>
 80012c0:	2000      	movs	r0, #0
 80012c2:	6360      	str	r0, [r4, #52]	; 0x34
 80012c4:	e7c0      	b.n	8001248 <__sflush_r+0x1c>
 80012c6:	2301      	movs	r3, #1
 80012c8:	4628      	mov	r0, r5
 80012ca:	47b0      	blx	r6
 80012cc:	1c41      	adds	r1, r0, #1
 80012ce:	d1c8      	bne.n	8001262 <__sflush_r+0x36>
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0c5      	beq.n	8001262 <__sflush_r+0x36>
 80012d6:	2b1d      	cmp	r3, #29
 80012d8:	d001      	beq.n	80012de <__sflush_r+0xb2>
 80012da:	2b16      	cmp	r3, #22
 80012dc:	d101      	bne.n	80012e2 <__sflush_r+0xb6>
 80012de:	602f      	str	r7, [r5, #0]
 80012e0:	e7b1      	b.n	8001246 <__sflush_r+0x1a>
 80012e2:	89a3      	ldrh	r3, [r4, #12]
 80012e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e8:	81a3      	strh	r3, [r4, #12]
 80012ea:	e7ad      	b.n	8001248 <__sflush_r+0x1c>
 80012ec:	690f      	ldr	r7, [r1, #16]
 80012ee:	2f00      	cmp	r7, #0
 80012f0:	d0a9      	beq.n	8001246 <__sflush_r+0x1a>
 80012f2:	0793      	lsls	r3, r2, #30
 80012f4:	680e      	ldr	r6, [r1, #0]
 80012f6:	bf08      	it	eq
 80012f8:	694b      	ldreq	r3, [r1, #20]
 80012fa:	600f      	str	r7, [r1, #0]
 80012fc:	bf18      	it	ne
 80012fe:	2300      	movne	r3, #0
 8001300:	eba6 0807 	sub.w	r8, r6, r7
 8001304:	608b      	str	r3, [r1, #8]
 8001306:	f1b8 0f00 	cmp.w	r8, #0
 800130a:	dd9c      	ble.n	8001246 <__sflush_r+0x1a>
 800130c:	6a21      	ldr	r1, [r4, #32]
 800130e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001310:	4643      	mov	r3, r8
 8001312:	463a      	mov	r2, r7
 8001314:	4628      	mov	r0, r5
 8001316:	47b0      	blx	r6
 8001318:	2800      	cmp	r0, #0
 800131a:	dc06      	bgt.n	800132a <__sflush_r+0xfe>
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001322:	81a3      	strh	r3, [r4, #12]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	e78e      	b.n	8001248 <__sflush_r+0x1c>
 800132a:	4407      	add	r7, r0
 800132c:	eba8 0800 	sub.w	r8, r8, r0
 8001330:	e7e9      	b.n	8001306 <__sflush_r+0xda>
 8001332:	bf00      	nop
 8001334:	dfbffffe 	.word	0xdfbffffe

08001338 <_fflush_r>:
 8001338:	b538      	push	{r3, r4, r5, lr}
 800133a:	690b      	ldr	r3, [r1, #16]
 800133c:	4605      	mov	r5, r0
 800133e:	460c      	mov	r4, r1
 8001340:	b913      	cbnz	r3, 8001348 <_fflush_r+0x10>
 8001342:	2500      	movs	r5, #0
 8001344:	4628      	mov	r0, r5
 8001346:	bd38      	pop	{r3, r4, r5, pc}
 8001348:	b118      	cbz	r0, 8001352 <_fflush_r+0x1a>
 800134a:	6a03      	ldr	r3, [r0, #32]
 800134c:	b90b      	cbnz	r3, 8001352 <_fflush_r+0x1a>
 800134e:	f7ff fa99 	bl	8000884 <__sinit>
 8001352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f3      	beq.n	8001342 <_fflush_r+0xa>
 800135a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800135c:	07d0      	lsls	r0, r2, #31
 800135e:	d404      	bmi.n	800136a <_fflush_r+0x32>
 8001360:	0599      	lsls	r1, r3, #22
 8001362:	d402      	bmi.n	800136a <_fflush_r+0x32>
 8001364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001366:	f7ff fb92 	bl	8000a8e <__retarget_lock_acquire_recursive>
 800136a:	4628      	mov	r0, r5
 800136c:	4621      	mov	r1, r4
 800136e:	f7ff ff5d 	bl	800122c <__sflush_r>
 8001372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001374:	07da      	lsls	r2, r3, #31
 8001376:	4605      	mov	r5, r0
 8001378:	d4e4      	bmi.n	8001344 <_fflush_r+0xc>
 800137a:	89a3      	ldrh	r3, [r4, #12]
 800137c:	059b      	lsls	r3, r3, #22
 800137e:	d4e1      	bmi.n	8001344 <_fflush_r+0xc>
 8001380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001382:	f7ff fb85 	bl	8000a90 <__retarget_lock_release_recursive>
 8001386:	e7dd      	b.n	8001344 <_fflush_r+0xc>

08001388 <__swbuf_r>:
 8001388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138a:	460e      	mov	r6, r1
 800138c:	4614      	mov	r4, r2
 800138e:	4605      	mov	r5, r0
 8001390:	b118      	cbz	r0, 800139a <__swbuf_r+0x12>
 8001392:	6a03      	ldr	r3, [r0, #32]
 8001394:	b90b      	cbnz	r3, 800139a <__swbuf_r+0x12>
 8001396:	f7ff fa75 	bl	8000884 <__sinit>
 800139a:	69a3      	ldr	r3, [r4, #24]
 800139c:	60a3      	str	r3, [r4, #8]
 800139e:	89a3      	ldrh	r3, [r4, #12]
 80013a0:	071a      	lsls	r2, r3, #28
 80013a2:	d525      	bpl.n	80013f0 <__swbuf_r+0x68>
 80013a4:	6923      	ldr	r3, [r4, #16]
 80013a6:	b31b      	cbz	r3, 80013f0 <__swbuf_r+0x68>
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	6922      	ldr	r2, [r4, #16]
 80013ac:	1a98      	subs	r0, r3, r2
 80013ae:	6963      	ldr	r3, [r4, #20]
 80013b0:	b2f6      	uxtb	r6, r6
 80013b2:	4283      	cmp	r3, r0
 80013b4:	4637      	mov	r7, r6
 80013b6:	dc04      	bgt.n	80013c2 <__swbuf_r+0x3a>
 80013b8:	4621      	mov	r1, r4
 80013ba:	4628      	mov	r0, r5
 80013bc:	f7ff ffbc 	bl	8001338 <_fflush_r>
 80013c0:	b9e0      	cbnz	r0, 80013fc <__swbuf_r+0x74>
 80013c2:	68a3      	ldr	r3, [r4, #8]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60a3      	str	r3, [r4, #8]
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	6022      	str	r2, [r4, #0]
 80013ce:	701e      	strb	r6, [r3, #0]
 80013d0:	6962      	ldr	r2, [r4, #20]
 80013d2:	1c43      	adds	r3, r0, #1
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d004      	beq.n	80013e2 <__swbuf_r+0x5a>
 80013d8:	89a3      	ldrh	r3, [r4, #12]
 80013da:	07db      	lsls	r3, r3, #31
 80013dc:	d506      	bpl.n	80013ec <__swbuf_r+0x64>
 80013de:	2e0a      	cmp	r6, #10
 80013e0:	d104      	bne.n	80013ec <__swbuf_r+0x64>
 80013e2:	4621      	mov	r1, r4
 80013e4:	4628      	mov	r0, r5
 80013e6:	f7ff ffa7 	bl	8001338 <_fflush_r>
 80013ea:	b938      	cbnz	r0, 80013fc <__swbuf_r+0x74>
 80013ec:	4638      	mov	r0, r7
 80013ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013f0:	4621      	mov	r1, r4
 80013f2:	4628      	mov	r0, r5
 80013f4:	f000 f806 	bl	8001404 <__swsetup_r>
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d0d5      	beq.n	80013a8 <__swbuf_r+0x20>
 80013fc:	f04f 37ff 	mov.w	r7, #4294967295
 8001400:	e7f4      	b.n	80013ec <__swbuf_r+0x64>
	...

08001404 <__swsetup_r>:
 8001404:	b538      	push	{r3, r4, r5, lr}
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <__swsetup_r+0xac>)
 8001408:	4605      	mov	r5, r0
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	460c      	mov	r4, r1
 800140e:	b118      	cbz	r0, 8001418 <__swsetup_r+0x14>
 8001410:	6a03      	ldr	r3, [r0, #32]
 8001412:	b90b      	cbnz	r3, 8001418 <__swsetup_r+0x14>
 8001414:	f7ff fa36 	bl	8000884 <__sinit>
 8001418:	89a3      	ldrh	r3, [r4, #12]
 800141a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800141e:	0718      	lsls	r0, r3, #28
 8001420:	d422      	bmi.n	8001468 <__swsetup_r+0x64>
 8001422:	06d9      	lsls	r1, r3, #27
 8001424:	d407      	bmi.n	8001436 <__swsetup_r+0x32>
 8001426:	2309      	movs	r3, #9
 8001428:	602b      	str	r3, [r5, #0]
 800142a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800142e:	81a3      	strh	r3, [r4, #12]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	e034      	b.n	80014a0 <__swsetup_r+0x9c>
 8001436:	0758      	lsls	r0, r3, #29
 8001438:	d512      	bpl.n	8001460 <__swsetup_r+0x5c>
 800143a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800143c:	b141      	cbz	r1, 8001450 <__swsetup_r+0x4c>
 800143e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001442:	4299      	cmp	r1, r3
 8001444:	d002      	beq.n	800144c <__swsetup_r+0x48>
 8001446:	4628      	mov	r0, r5
 8001448:	f7ff fb24 	bl	8000a94 <_free_r>
 800144c:	2300      	movs	r3, #0
 800144e:	6363      	str	r3, [r4, #52]	; 0x34
 8001450:	89a3      	ldrh	r3, [r4, #12]
 8001452:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001456:	81a3      	strh	r3, [r4, #12]
 8001458:	2300      	movs	r3, #0
 800145a:	6063      	str	r3, [r4, #4]
 800145c:	6923      	ldr	r3, [r4, #16]
 800145e:	6023      	str	r3, [r4, #0]
 8001460:	89a3      	ldrh	r3, [r4, #12]
 8001462:	f043 0308 	orr.w	r3, r3, #8
 8001466:	81a3      	strh	r3, [r4, #12]
 8001468:	6923      	ldr	r3, [r4, #16]
 800146a:	b94b      	cbnz	r3, 8001480 <__swsetup_r+0x7c>
 800146c:	89a3      	ldrh	r3, [r4, #12]
 800146e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001476:	d003      	beq.n	8001480 <__swsetup_r+0x7c>
 8001478:	4621      	mov	r1, r4
 800147a:	4628      	mov	r0, r5
 800147c:	f000 f850 	bl	8001520 <__smakebuf_r>
 8001480:	89a0      	ldrh	r0, [r4, #12]
 8001482:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001486:	f010 0301 	ands.w	r3, r0, #1
 800148a:	d00a      	beq.n	80014a2 <__swsetup_r+0x9e>
 800148c:	2300      	movs	r3, #0
 800148e:	60a3      	str	r3, [r4, #8]
 8001490:	6963      	ldr	r3, [r4, #20]
 8001492:	425b      	negs	r3, r3
 8001494:	61a3      	str	r3, [r4, #24]
 8001496:	6923      	ldr	r3, [r4, #16]
 8001498:	b943      	cbnz	r3, 80014ac <__swsetup_r+0xa8>
 800149a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800149e:	d1c4      	bne.n	800142a <__swsetup_r+0x26>
 80014a0:	bd38      	pop	{r3, r4, r5, pc}
 80014a2:	0781      	lsls	r1, r0, #30
 80014a4:	bf58      	it	pl
 80014a6:	6963      	ldrpl	r3, [r4, #20]
 80014a8:	60a3      	str	r3, [r4, #8]
 80014aa:	e7f4      	b.n	8001496 <__swsetup_r+0x92>
 80014ac:	2000      	movs	r0, #0
 80014ae:	e7f7      	b.n	80014a0 <__swsetup_r+0x9c>
 80014b0:	2000005c 	.word	0x2000005c

080014b4 <_sbrk_r>:
 80014b4:	b538      	push	{r3, r4, r5, lr}
 80014b6:	4d06      	ldr	r5, [pc, #24]	; (80014d0 <_sbrk_r+0x1c>)
 80014b8:	2300      	movs	r3, #0
 80014ba:	4604      	mov	r4, r0
 80014bc:	4608      	mov	r0, r1
 80014be:	602b      	str	r3, [r5, #0]
 80014c0:	f7ff f8ce 	bl	8000660 <_sbrk>
 80014c4:	1c43      	adds	r3, r0, #1
 80014c6:	d102      	bne.n	80014ce <_sbrk_r+0x1a>
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	b103      	cbz	r3, 80014ce <_sbrk_r+0x1a>
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	bd38      	pop	{r3, r4, r5, pc}
 80014d0:	200001c4 	.word	0x200001c4

080014d4 <__swhatbuf_r>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	460c      	mov	r4, r1
 80014d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014dc:	2900      	cmp	r1, #0
 80014de:	b096      	sub	sp, #88	; 0x58
 80014e0:	4615      	mov	r5, r2
 80014e2:	461e      	mov	r6, r3
 80014e4:	da0d      	bge.n	8001502 <__swhatbuf_r+0x2e>
 80014e6:	89a3      	ldrh	r3, [r4, #12]
 80014e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80014ec:	f04f 0100 	mov.w	r1, #0
 80014f0:	bf0c      	ite	eq
 80014f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80014f6:	2340      	movne	r3, #64	; 0x40
 80014f8:	2000      	movs	r0, #0
 80014fa:	6031      	str	r1, [r6, #0]
 80014fc:	602b      	str	r3, [r5, #0]
 80014fe:	b016      	add	sp, #88	; 0x58
 8001500:	bd70      	pop	{r4, r5, r6, pc}
 8001502:	466a      	mov	r2, sp
 8001504:	f000 f848 	bl	8001598 <_fstat_r>
 8001508:	2800      	cmp	r0, #0
 800150a:	dbec      	blt.n	80014e6 <__swhatbuf_r+0x12>
 800150c:	9901      	ldr	r1, [sp, #4]
 800150e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001512:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001516:	4259      	negs	r1, r3
 8001518:	4159      	adcs	r1, r3
 800151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151e:	e7eb      	b.n	80014f8 <__swhatbuf_r+0x24>

08001520 <__smakebuf_r>:
 8001520:	898b      	ldrh	r3, [r1, #12]
 8001522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001524:	079d      	lsls	r5, r3, #30
 8001526:	4606      	mov	r6, r0
 8001528:	460c      	mov	r4, r1
 800152a:	d507      	bpl.n	800153c <__smakebuf_r+0x1c>
 800152c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001530:	6023      	str	r3, [r4, #0]
 8001532:	6123      	str	r3, [r4, #16]
 8001534:	2301      	movs	r3, #1
 8001536:	6163      	str	r3, [r4, #20]
 8001538:	b002      	add	sp, #8
 800153a:	bd70      	pop	{r4, r5, r6, pc}
 800153c:	ab01      	add	r3, sp, #4
 800153e:	466a      	mov	r2, sp
 8001540:	f7ff ffc8 	bl	80014d4 <__swhatbuf_r>
 8001544:	9900      	ldr	r1, [sp, #0]
 8001546:	4605      	mov	r5, r0
 8001548:	4630      	mov	r0, r6
 800154a:	f7ff fb0f 	bl	8000b6c <_malloc_r>
 800154e:	b948      	cbnz	r0, 8001564 <__smakebuf_r+0x44>
 8001550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001554:	059a      	lsls	r2, r3, #22
 8001556:	d4ef      	bmi.n	8001538 <__smakebuf_r+0x18>
 8001558:	f023 0303 	bic.w	r3, r3, #3
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	81a3      	strh	r3, [r4, #12]
 8001562:	e7e3      	b.n	800152c <__smakebuf_r+0xc>
 8001564:	89a3      	ldrh	r3, [r4, #12]
 8001566:	6020      	str	r0, [r4, #0]
 8001568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156c:	81a3      	strh	r3, [r4, #12]
 800156e:	9b00      	ldr	r3, [sp, #0]
 8001570:	6163      	str	r3, [r4, #20]
 8001572:	9b01      	ldr	r3, [sp, #4]
 8001574:	6120      	str	r0, [r4, #16]
 8001576:	b15b      	cbz	r3, 8001590 <__smakebuf_r+0x70>
 8001578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800157c:	4630      	mov	r0, r6
 800157e:	f000 f81d 	bl	80015bc <_isatty_r>
 8001582:	b128      	cbz	r0, 8001590 <__smakebuf_r+0x70>
 8001584:	89a3      	ldrh	r3, [r4, #12]
 8001586:	f023 0303 	bic.w	r3, r3, #3
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	81a3      	strh	r3, [r4, #12]
 8001590:	89a3      	ldrh	r3, [r4, #12]
 8001592:	431d      	orrs	r5, r3
 8001594:	81a5      	strh	r5, [r4, #12]
 8001596:	e7cf      	b.n	8001538 <__smakebuf_r+0x18>

08001598 <_fstat_r>:
 8001598:	b538      	push	{r3, r4, r5, lr}
 800159a:	4d07      	ldr	r5, [pc, #28]	; (80015b8 <_fstat_r+0x20>)
 800159c:	2300      	movs	r3, #0
 800159e:	4604      	mov	r4, r0
 80015a0:	4608      	mov	r0, r1
 80015a2:	4611      	mov	r1, r2
 80015a4:	602b      	str	r3, [r5, #0]
 80015a6:	f7ff f832 	bl	800060e <_fstat>
 80015aa:	1c43      	adds	r3, r0, #1
 80015ac:	d102      	bne.n	80015b4 <_fstat_r+0x1c>
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	b103      	cbz	r3, 80015b4 <_fstat_r+0x1c>
 80015b2:	6023      	str	r3, [r4, #0]
 80015b4:	bd38      	pop	{r3, r4, r5, pc}
 80015b6:	bf00      	nop
 80015b8:	200001c4 	.word	0x200001c4

080015bc <_isatty_r>:
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4d06      	ldr	r5, [pc, #24]	; (80015d8 <_isatty_r+0x1c>)
 80015c0:	2300      	movs	r3, #0
 80015c2:	4604      	mov	r4, r0
 80015c4:	4608      	mov	r0, r1
 80015c6:	602b      	str	r3, [r5, #0]
 80015c8:	f7ff f831 	bl	800062e <_isatty>
 80015cc:	1c43      	adds	r3, r0, #1
 80015ce:	d102      	bne.n	80015d6 <_isatty_r+0x1a>
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	b103      	cbz	r3, 80015d6 <_isatty_r+0x1a>
 80015d4:	6023      	str	r3, [r4, #0]
 80015d6:	bd38      	pop	{r3, r4, r5, pc}
 80015d8:	200001c4 	.word	0x200001c4

080015dc <_init>:
 80015dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015de:	bf00      	nop
 80015e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015e2:	bc08      	pop	{r3}
 80015e4:	469e      	mov	lr, r3
 80015e6:	4770      	bx	lr

080015e8 <_fini>:
 80015e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ea:	bf00      	nop
 80015ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ee:	bc08      	pop	{r3}
 80015f0:	469e      	mov	lr, r3
 80015f2:	4770      	bx	lr
