
TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000440  08000440  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000440  08000440  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000440  08000440  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000440  08000440  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000448  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001305  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000486  00000000  00000000  0002137c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001d0  00000000  00000000  00021808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000145  00000000  00000000  000219d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e6ac  00000000  00000000  00021b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000214e  00000000  00000000  000401c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bb9a4  00000000  00000000  00042317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000568  00000000  00000000  000fdcbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000fe224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000428 	.word	0x08000428

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000428 	.word	0x08000428

080001c8 <main>:

void SysClockConfig(void);
void TimerConfig(void);


int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	SysClockConfig();
 80001cc:	f000 f834 	bl	8000238 <SysClockConfig>
	TimerConfig();
 80001d0:	f000 f802 	bl	80001d8 <TimerConfig>


	while(1){
 80001d4:	e7fe      	b.n	80001d4 <main+0xc>
	...

080001d8 <TimerConfig>:

	return 0;
}


void TimerConfig(void){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1<<0); // Enables timer0
 80001dc:	4b14      	ldr	r3, [pc, #80]	; (8000230 <TimerConfig+0x58>)
 80001de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001e0:	4a13      	ldr	r2, [pc, #76]	; (8000230 <TimerConfig+0x58>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->CFGR |= (3<<21); // PLL CLOCK SELECTED AS MCO1
 80001e8:	4b11      	ldr	r3, [pc, #68]	; (8000230 <TimerConfig+0x58>)
 80001ea:	689b      	ldr	r3, [r3, #8]
 80001ec:	4a10      	ldr	r2, [pc, #64]	; (8000230 <TimerConfig+0x58>)
 80001ee:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 80001f2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (6<<24); // MCO1 PRESCALER DIVIDES BY 4
 80001f4:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <TimerConfig+0x58>)
 80001f6:	689b      	ldr	r3, [r3, #8]
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <TimerConfig+0x58>)
 80001fa:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80001fe:	6093      	str	r3, [r2, #8]
	// MCO1 pin (PA8)
	RCC->AHB1ENR |= (1<<0); // ENABLES GPIOA BUS CLOCK
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <TimerConfig+0x58>)
 8000202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000204:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <TimerConfig+0x58>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= (2<<16); // SETS PIN PA8 AS ALTERNATE FUNCTION MODE
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <TimerConfig+0x5c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a08      	ldr	r2, [pc, #32]	; (8000234 <TimerConfig+0x5c>)
 8000212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000216:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &= ~(0X0F); // PIN PA8 STARTS OPERATING AT AF0 -> SYSTEM ALTERNATE FUNCTION MODE
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <TimerConfig+0x5c>)
 800021a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800021c:	4a05      	ldr	r2, [pc, #20]	; (8000234 <TimerConfig+0x5c>)
 800021e:	f023 030f 	bic.w	r3, r3, #15
 8000222:	6253      	str	r3, [r2, #36]	; 0x24


}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40023800 	.word	0x40023800
 8000234:	40020000 	.word	0x40020000

08000238 <SysClockConfig>:


void SysClockConfig(void){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	RCC->CR |= (1 << 16); //HSE on
 800023c:	4b27      	ldr	r3, [pc, #156]	; (80002dc <SysClockConfig+0xa4>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a26      	ldr	r2, [pc, #152]	; (80002dc <SysClockConfig+0xa4>)
 8000242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000246:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<17)));//Wait for HSE clock ready flag
 8000248:	bf00      	nop
 800024a:	4b24      	ldr	r3, [pc, #144]	; (80002dc <SysClockConfig+0xa4>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f9      	beq.n	800024a <SysClockConfig+0x12>

	RCC->APB1ENR |= (1<<28);
 8000256:	4b21      	ldr	r3, [pc, #132]	; (80002dc <SysClockConfig+0xa4>)
 8000258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800025a:	4a20      	ldr	r2, [pc, #128]	; (80002dc <SysClockConfig+0xa4>)
 800025c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000260:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= (1<<14);
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <SysClockConfig+0xa8>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a1e      	ldr	r2, [pc, #120]	; (80002e0 <SysClockConfig+0xa8>)
 8000268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800026c:	6013      	str	r3, [r2, #0]

	FLASH->ACR = (1<<9) | (1<<10) | (1<<8) | 0X05;
 800026e:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <SysClockConfig+0xac>)
 8000270:	f240 7205 	movw	r2, #1797	; 0x705
 8000274:	601a      	str	r2, [r3, #0]

	//AHB PRESCALER
	RCC->CFGR |= 0X00;
 8000276:	4b19      	ldr	r3, [pc, #100]	; (80002dc <SysClockConfig+0xa4>)
 8000278:	4a18      	ldr	r2, [pc, #96]	; (80002dc <SysClockConfig+0xa4>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	6093      	str	r3, [r2, #8]
	//APB1 PRESCALER
	RCC->CFGR |= 0x00001400U; //APB1 Divided by 4 -> 42MHz
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <SysClockConfig+0xa4>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	4a16      	ldr	r2, [pc, #88]	; (80002dc <SysClockConfig+0xa4>)
 8000284:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000288:	6093      	str	r3, [r2, #8]
	//APB2 PRESCALER
	RCC->CFGR |= 0x00008000U; //APB2 Divided by 2 -> 84MHz
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <SysClockConfig+0xa4>)
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	4a13      	ldr	r2, [pc, #76]	; (80002dc <SysClockConfig+0xa4>)
 8000290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000294:	6093      	str	r3, [r2, #8]

	//CONFIGURE THE MAIN PLL
	RCC->PLLCFGR = (4 <<0) | (168 << 6) | (0 <<16) | (1<<22);
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <SysClockConfig+0xa4>)
 8000298:	4a13      	ldr	r2, [pc, #76]	; (80002e8 <SysClockConfig+0xb0>)
 800029a:	605a      	str	r2, [r3, #4]

	//Enable the PLL and wait for it to become ready
	RCC->CR |= (1<<24);
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <SysClockConfig+0xa4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <SysClockConfig+0xa4>)
 80002a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002a6:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<25)));
 80002a8:	bf00      	nop
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <SysClockConfig+0xa4>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f9      	beq.n	80002aa <SysClockConfig+0x72>

	//Select the Clock Source and wait for it to be set
	RCC->CFGR |= 0x02;
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <SysClockConfig+0xa4>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	4a08      	ldr	r2, [pc, #32]	; (80002dc <SysClockConfig+0xa4>)
 80002bc:	f043 0302 	orr.w	r3, r3, #2
 80002c0:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & (3<<2)) != 0x08);
 80002c2:	bf00      	nop
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <SysClockConfig+0xa4>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	f003 030c 	and.w	r3, r3, #12
 80002cc:	2b08      	cmp	r3, #8
 80002ce:	d1f9      	bne.n	80002c4 <SysClockConfig+0x8c>

}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40007000 	.word	0x40007000
 80002e4:	40023c00 	.word	0x40023c00
 80002e8:	00402a04 	.word	0x00402a04

080002ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002f0:	e7fe      	b.n	80002f0 <NMI_Handler+0x4>

080002f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f6:	e7fe      	b.n	80002f6 <HardFault_Handler+0x4>

080002f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <MemManage_Handler+0x4>

080002fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000302:	e7fe      	b.n	8000302 <BusFault_Handler+0x4>

08000304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <UsageFault_Handler+0x4>

0800030a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000338:	f000 f83e 	bl	80003b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}

08000340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <SystemInit+0x20>)
 8000346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <SystemInit+0x20>)
 800034c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800039c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000368:	f7ff ffea 	bl	8000340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800036e:	490d      	ldr	r1, [pc, #52]	; (80003a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000370:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000384:	4c0a      	ldr	r4, [pc, #40]	; (80003b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000392:	f000 f825 	bl	80003e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000396:	f7ff ff17 	bl	80001c8 <main>
  bx  lr    
 800039a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800039c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a8:	08000448 	.word	0x08000448
  ldr r2, =_sbss
 80003ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b0:	20000024 	.word	0x20000024

080003b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC_IRQHandler>
	...

080003b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <HAL_IncTick+0x20>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <HAL_IncTick+0x24>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4413      	add	r3, r2
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <HAL_IncTick+0x24>)
 80003ca:	6013      	str	r3, [r2, #0]
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000000 	.word	0x20000000
 80003dc:	20000020 	.word	0x20000020

080003e0 <__libc_init_array>:
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	4d0d      	ldr	r5, [pc, #52]	; (8000418 <__libc_init_array+0x38>)
 80003e4:	4c0d      	ldr	r4, [pc, #52]	; (800041c <__libc_init_array+0x3c>)
 80003e6:	1b64      	subs	r4, r4, r5
 80003e8:	10a4      	asrs	r4, r4, #2
 80003ea:	2600      	movs	r6, #0
 80003ec:	42a6      	cmp	r6, r4
 80003ee:	d109      	bne.n	8000404 <__libc_init_array+0x24>
 80003f0:	4d0b      	ldr	r5, [pc, #44]	; (8000420 <__libc_init_array+0x40>)
 80003f2:	4c0c      	ldr	r4, [pc, #48]	; (8000424 <__libc_init_array+0x44>)
 80003f4:	f000 f818 	bl	8000428 <_init>
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	10a4      	asrs	r4, r4, #2
 80003fc:	2600      	movs	r6, #0
 80003fe:	42a6      	cmp	r6, r4
 8000400:	d105      	bne.n	800040e <__libc_init_array+0x2e>
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f855 3b04 	ldr.w	r3, [r5], #4
 8000408:	4798      	blx	r3
 800040a:	3601      	adds	r6, #1
 800040c:	e7ee      	b.n	80003ec <__libc_init_array+0xc>
 800040e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000412:	4798      	blx	r3
 8000414:	3601      	adds	r6, #1
 8000416:	e7f2      	b.n	80003fe <__libc_init_array+0x1e>
 8000418:	08000440 	.word	0x08000440
 800041c:	08000440 	.word	0x08000440
 8000420:	08000440 	.word	0x08000440
 8000424:	08000444 	.word	0x08000444

08000428 <_init>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr

08000434 <_fini>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr
